rm -f .stainless-cache/vccache.bin &&  stainless-dotty ListUtils.scala --config-file=stainless.conf --no-colors > constructing_temp_cache.txt  && cp .stainless-cache/vccache.bin ./temp_cache.bin
‚ùØ stainless-dotty ListUtils.scala --config-file=stainless.conf --watch
[  Info  ] Finished compiling                                       
[  Info  ] Preprocessing finished                                   
[  Info  ] Finished lowering the symbols                            
[  Info  ] Generating VCs for functions: isPrefix$0, removeLast$0, reverseList$0, getSuffix$0, getIndex$0, consecutiveSubseq$0, consecutiveSubseqAtHead$0, isSuffix$0, getPrefix$0, lemmaIsSuffixThenSubseq$0, lemmaIsSuffixThenTailIsSuffix$0, lemmaRemovingHeadOfSuffixThenGetPrefixLonger$0, subseqForall$0, lemmaConsecutiveSubseqThenSubseq$0, lemmaContainsAndNotHdThenTlContains$0, lemmaGetIndexBiggerAndHeadNotEqThenTailContains$0, lemmaSameIndexThenSameElement$0, lemmaGetIndexBiggerAndHeadEqThenTailContains$0, lemmaNotHeadSoGetIndexTailIsMinusOne$0, lemmaIsPrefixRefl$0, lemmaConcatTwoListThenFirstIsPrefix$0, lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref$0, lemmaConcatAssociativity$0, lemmaTwoListsConcatAssociativity$0, lemmaChangeCutStillConcatTotal$0, lemmaRemoveLastConcatenatedPrefixStillPrefix$0, lemmaRemoveLastPrefixStillPrefix$0, lemmaPrefixStaysPrefixWhenAddingToSuffix$0, lemmaRemoveLastPrefixDecreasesSize$0, lemmaIsPrefixSameLengthThenSameList$0, lemmaRemoveLastFromBothSidePreservesEq$0, lemmaRemoveLastFromLMakesItPrefix$0, lemmaSamePrefixThenSameSuffix$0, lemmaIsPrefixThenSmallerEqSize$0, lemmaAddHeadSuffixToPrefixStillPrefix$0, lemmaGetSuffixOnListWithItSelfIsEmpty$0, lemmaMoveElementToOtherListKeepsConcatEq$0, lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther$0, concatWithoutDuplicates$0, removeDuplicates$0, removeDuplicates$default$3$0, lemmaSubseqRefl$0, lemmaSubseqOfEmptyIsEmpty$0, lemmaTailIsSubseqOfList$0, lemmaTailIsSubseqOfListBis$0, lemmaTailIsSubseqOfBiggerList$0, lemmaSubSeqTransitive$0, lemmaSubSeqAddSameElmtPreserves$0, lemmaConcatThenFirstSubseqOfTot$0, lemmaConcatThenSecondSubseqOfTot$0, lemmaConcatTwoListsWhichNotContainThenTotNotContain$0, lemmaForallContainsThenInOtherList$0, lemmaForallThenDisjunction2$0, lemmaForallThenDisjunction1$0, lemmaForallContainsThenForEqualLists$0, lemmaForallContainsAndNoDuplicateThenSmallerList$0, lemmaForallContainsAddingInSndListPreserves$0, lemmaForallContainsAddingElmtInPreserves$0, lemmaForallContainsConcatPreserves$0, lemmaForallContainsPreservedRemoveElmt$0, lemmaForallContainsPreservedRemoveElmtInRefList$0, lemmaForallContainsPreservedIfSameContent$0, lemmaForallNotContainsForSubseq$0, lemmaForallNotContainsForConcat$0, lemmaForallNotContainsForConcat$1, lemmaForallNotContainsCannotContain$0, lemmaNoDuplicateConcatThenForallNotContains$0, lemmaForallNotContainsPreservedAddNewElmtInRefList$0, lemmaForallNotContainsNilRefList$0, lemmaForallNotContainedNoDupThenConcatNoDup$0, lemmaRemoveElmtContainedSizeSmaller$0, lemmaRemoveOneElmtNoDuplicateSizeMinusOne$0, noDuplicateConcatNotContainedPreserves$0, noDuplicateConcatListNotContainedPreserves$0, noDuplicateConcatListNotContainedPreservesBis$0, lemmaNoDuplicatePreservedSameContent$0, lemmaRemoveOneElmtNotContainedSameList$0, lemmaRemoveOneElmtPreservesNoDuplicate$0, lemmaSubsetContentThenForallContains$0, notContainsAddNotEqThenNotContains$0, notContainsAThenTailNotContains$0, lemmaListContainsThenFilterContainsNotEmpt[  Info  ] Finished generating VCs                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
[  Info  ] Starting verification...
[  Info  ] Verified: 0 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates$default$3 @582:24...
[ Debug  ] Cache miss: 'postcondition' VC for removeDuplicates$default$3 @582:24...
[  Info  ] Verified: 1 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 2 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 3 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAddingElmtInPreserves @875:23...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAddingElmtInPreserves @875:23...
[  Info  ] Verified: 4 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 5 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 6 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 7 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 8 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @872:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @872:21...
[  Info  ] Verified: 9 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[  Info  ] Verified: 10 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[  Info  ] Verified: 11 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:13...
[  Info  ] Verified: 12 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:31...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:31...
[  Info  ] Verified: 13 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 14 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 15 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 16 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 17 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 18 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 19 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 20 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 21 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 22 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 23 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 24 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 25 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 26 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[  Info  ] Verified: 27 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[  Info  ] Verified: 28 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @202:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @202:16...
[  Info  ] Verified: 29 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[  Info  ] Verified: 30 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[  Info  ] Verified: 31 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 32 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 33 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 34 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 35 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[  Info  ] Verified: 36 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[  Info  ] Verified: 37 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[  Info  ] Verified: 38 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[  Info  ] Verified: 39 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[  Info  ] Verified: 40 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[  Info  ] Verified: 41 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 42 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 43 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 44 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 45 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @210:21...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @210:21...
[  Info  ] Verified: 46 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @198:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @198:5...
[  Info  ] Verified: 47 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:5...
[  Info  ] Verified: 48 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @251:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @251:13...
[  Info  ] Verified: 49 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[  Info  ] Verified: 50 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](tail[B](l)))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[ Debug  ] Cache hit: 'precond. (call head[B](tail[B](l)))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[  Info  ] Verified: 51 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:44...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:44...
[  Info  ] Verified: 52 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 53 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 54 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[  Info  ] Verified: 55 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 56 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[  Info  ] Verified: 57 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[  Info  ] Verified: 58 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 59 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[  Info  ] Verified: 60 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 61 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 62 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 63 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 64 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 65 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @256:6...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @256:6...
[  Info  ] Verified: 66 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingInSndListPre...)' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingInSndListPre...)' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[  Info  ] Verified: 67 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAddingInSndListPreserves @856:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAddingInSndListPreserves @856:15...
[  Info  ] Verified: 68 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[  Info  ] Verified: 69 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[  Info  ] Verified: 70 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[  Info  ] Verified: 71 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @853:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @853:21...
[  Info  ] Verified: 72 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[  Info  ] Verified: 73 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[  Info  ] Verified: 74 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)' VC for subseqForall @?:?...
[  Info  ] Verified: 75 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqContains[B](lSub, l, (scrut.h):...)' VC for subseqForall @156:9...
[ Debug  ] Cache hit: 'precond. (call subseqContains[B](lSub, l, (scrut.h):...)' VC for subseqForall @156:9...
[  Info  ] Verified: 76 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContained[B](l, p, (scrut.h): @...)' VC for subseqForall @157:9...
[ Debug  ] Cache hit: 'precond. (call forallContained[B](l, p, (scrut.h): @...)' VC for subseqForall @157:9...
[  Info  ] Verified: 77 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqForall[B](l, lSub, p) (require 1/2))' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call subseqForall[B](l, lSub, p) (require 1/2))' VC for subseqForall @?:?...
[  Info  ] Verified: 78 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqForall[B](l, lSub, p) (require 2/2))' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call subseqForall[B](l, lSub, p) (require 2/2))' VC for subseqForall @?:?...
[  Info  ] Verified: 79 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for subseqForall @152:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for subseqForall @152:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for subseqForall @152:15...
[ Debug  ] !subseq[B](lSub, l) || !forall[B](l, p) || size[B](lSub) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for subseqForall @152:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 80 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList' VC for subseqForall @155:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList' VC for subseqForall @155:9...
[  Info  ] Verified: 81 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of subseqForall' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of subseqForall' VC for subseqForall @158:9...
[  Info  ] Verified: 82 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of subseqForall' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of subseqForall' VC for subseqForall @158:9...
[  Info  ] Verified: 83 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for subseqForall @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for subseqForall @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for subseqForall @?:?...
[ Debug  ] !subseq[B](lSub, l) || !forall[B](l, p) || !lSub.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaTailIsSubseqOfBiggerList[B](lSub, l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](lSub) || subseq[B](tail[B](lSub), l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val tmp: Unit = subseqContains[B](lSub, l, lSub.h)
[ Debug  ]   val tmp: Unit = forallContained[B](l, p, lSub.h)
[ Debug  ]   !subseq[B](lSub.t, l) || !forall[B](l, p) || size[B](lSub.t) < size[B](lSub)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for subseqForall @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 84 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @158:9...
[ Debug  ] Cache miss: 'postcondition' VC for subseqForall @158:9...
[ Debug  ]  - Now solving 'postcondition' VC for subseqForall @158:9...
[ Debug  ] !subseq[B](lSub, l) || !forall[B](l, p) || !lSub.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaTailIsSubseqOfBiggerList[B](lSub, l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](lSub) || subseq[B](tail[B](lSub), l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val tmp: Unit = subseqContains[B](lSub, l, lSub.h)
[ Debug  ]   val tmp: Unit = forallContained[B](l, p, lSub.h)
[ Debug  ]   !subseq[B](lSub.t, l) || !forall[B](l, p) || {
[ Debug  ]     val res: Unit = subseqForall[B](l, lSub.t, p)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(forall[B](lSub.t, p))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     forall[B](lSub, p)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for subseqForall @158:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 85 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @160:21...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @160:21...
[  Info  ] Verified: 86 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for subseqForall @153:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for subseqForall @153:5...
[  Info  ] Verified: 87 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @153:5...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @153:5...
[  Info  ] Verified: 88 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @662:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @662:29...
[  Info  ] Verified: 89 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[  Info  ] Verified: 90 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[  Info  ] Verified: 91 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] !subseq[B](l, lRef) || {
[ Debug  ]   val res: Unit = lemmaTailIsSubseqOfListBis[B](l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](l) || subseq[B](tail[B](l), l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !!isEmpty[B](l) || {
[ Debug  ]     val l1: List[B] = tail[B](l)
[ Debug  ]     !subseq[B](l1, l) || !subseq[B](l, lRef) || {
[ Debug  ]       val res: Unit = lemmaSubSeqTransitive[B](l1, l, lRef)
[ Debug  ]       val res: Unit = {
[ Debug  ]         assume(subseq[B](l1, lRef))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       isEmpty[B](l) || l != Nil[B]()
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45:
[ Debug  ]  => VALID
[  Info  ] Verified: 92 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[  Info  ] Verified: 93 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 94 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 95 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] !subseq[B](l, lRef) || {
[ Debug  ]   val res: Unit = lemmaTailIsSubseqOfListBis[B](l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](l) || subseq[B](tail[B](l), l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !!isEmpty[B](l) || {
[ Debug  ]     val l1: List[B] = tail[B](l)
[ Debug  ]     !subseq[B](l1, l) || !subseq[B](l, lRef) || {
[ Debug  ]       val res: Unit = lemmaSubSeqTransitive[B](l1, l, lRef)
[ Debug  ]       val res: Unit = {
[ Debug  ]         assume(subseq[B](l1, lRef))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       isEmpty[B](l) || subseq[B](tail[B](l), lRef)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7:
[ Debug  ]  => VALID
[  Info  ] Verified: 96 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @664:6...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @664:6...
[  Info  ] Verified: 97 / 982
[ Debug  ]  - Checking cache: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 98 / 982
[ Debug  ]  - Checking cache: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 99 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[ Debug  ] !noDuplicate[B](baseList) || size[B](newList) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for concatWithoutDuplicates @571:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 100 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @575:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @575:9...
[  Info  ] Verified: 101 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] !noDuplicate[B](baseList) || !newList.isInstanceOf[Cons] || !contains[B](baseList, newList.h) || size[B](newList.t) < size[B](newList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for concatWithoutDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 102 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @575:9...
[ Debug  ] Cache miss: 'postcondition' VC for concatWithoutDuplicates @575:9...
[ Debug  ]  - Now solving 'postcondition' VC for concatWithoutDuplicates @575:9...
[ Debug  ] !noDuplicate[B](baseList) || !newList.isInstanceOf[Cons] || !contains[B](baseList, newList.h) || {
[ Debug  ]   val res: List[B] = concatWithoutDuplicates[B](baseList, newList.t)
[ Debug  ]   val res: List[B] = {
[ Debug  ]     assume(noDuplicate[B](res) && content[B](++[B](baseList, newList.t)) == content[B](res))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   noDuplicate[B](res) && content[B](++[B](baseList, newList)) == content[B](res)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for concatWithoutDuplicates @575:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 103 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @577:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @577:9...
[  Info  ] Verified: 104 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] !noDuplicate[B](baseList) || newList.isInstanceOf[Cons] && contains[B](baseList, newList.h) || !newList.isInstanceOf[Cons] || contains[B](baseList, newList.h) || !noDuplicate[B](Cons[B](newList.h, baseList)) || size[B](newList.t) < size[B](newList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for concatWithoutDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 105 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @577:9...
[ Debug  ] Cache miss: 'postcondition' VC for concatWithoutDuplicates @577:9...
[ Debug  ]  - Now solving 'postcondition' VC for concatWithoutDuplicates @577:9...
[ Debug  ] !noDuplicate[B](baseList) || newList.isInstanceOf[Cons] && contains[B](baseList, newList.h) || !newList.isInstanceOf[Cons] || contains[B](baseList, newList.h) || {
[ Debug  ]   val baseList: List[B] = Cons[B](newList.h, baseList)
[ Debug  ]   !noDuplicate[B](baseList) || {
[ Debug  ]     val res: List[B] = concatWithoutDuplicates[B](baseList, newList.t)
[ Debug  ]     val res: List[B] = {
[ Debug  ]       assume(noDuplicate[B](res) && content[B](++[B](baseList, newList.t)) == content[B](res))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     noDuplicate[B](res) && content[B](++[B](baseList, newList)) == content[B](res)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for concatWithoutDuplicates @577:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 106 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @580:51...
[ Debug  ] Cache miss: 'postcondition' VC for concatWithoutDuplicates @580:51...
[ Debug  ]  - Now solving 'postcondition' VC for concatWithoutDuplicates @580:51...
[ Debug  ] !noDuplicate[B](baseList) || newList.isInstanceOf[Cons] && contains[B](baseList, newList.h) || newList.isInstanceOf[Cons] && !contains[B](baseList, newList.h) || !newList.isInstanceOf[Nil] || noDuplicate[B](baseList) && content[B](++[B](baseList, newList)) == content[B](baseList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for concatWithoutDuplicates @580:51:
[ Debug  ]  => VALID
[  Info  ] Verified: 107 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for concatWithoutDuplicates @573:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for concatWithoutDuplicates @573:5...
[  Info  ] Verified: 108 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @573:5...
[ Debug  ] Cache miss: 'postcondition' VC for concatWithoutDuplicates @573:5...
[ Debug  ]  - Now solving 'postcondition' VC for concatWithoutDuplicates @573:5...
[ Debug  ] !noDuplicate[B](baseList) || newList.isInstanceOf[Cons] && contains[B](baseList, newList.h) || newList.isInstanceOf[Cons] && !contains[B](baseList, newList.h) || newList.isInstanceOf[Nil] || {
[ Debug  ]   val res: List[B] = stainless.lang.error[List[B]]("match exhaustiveness")
[ Debug  ]   noDuplicate[B](res) && content[B](++[B](baseList, newList)) == content[B](res)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for concatWithoutDuplicates @573:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 109 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70:
[ Debug  ]  => VALID
[  Info  ] Verified: 110 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || isPrefix[B](p.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 111 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || size[B](p.t) < size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 112 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || {
[ Debug  ]     val res: Unit = lemmaAddHeadSuffixToPrefixStillPrefix[B](p.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](++[B](p.t, Cons[B](head[B](getSuffix[B](l, p.t)), Nil[B]())), l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l) >= size[B](p)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 113 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || {
[ Debug  ]     val res: Unit = lemmaAddHeadSuffixToPrefixStillPrefix[B](p.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](++[B](p.t, Cons[B](head[B](getSuffix[B](l, p.t)), Nil[B]())), l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l) < size[B](p) || isPrefix[B](p, l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 114 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || {
[ Debug  ]     val res: Unit = lemmaAddHeadSuffixToPrefixStillPrefix[B](p.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](++[B](p.t, Cons[B](head[B](getSuffix[B](l, p.t)), Nil[B]())), l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     getSuffix[B](l, p) != Nil[B]()
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 115 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || p.isInstanceOf[Cons] || size[B](l) >= size[B](p)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 116 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || p.isInstanceOf[Cons] || size[B](l) < size[B](p) || isPrefix[B](p, l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 117 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || p.isInstanceOf[Cons] || getSuffix[B](l, p) != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 118 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 119 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 120 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 121 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57:
[ Debug  ]  => VALID
[  Info  ] Verified: 122 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || isPrefix[B](p.t, tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 123 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) < size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 124 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 125 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || {
[ Debug  ]     val res: Unit = lemmaAddHeadSuffixToPrefixStillPrefix[B](p.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](++[B](p.t, Cons[B](head[B](getSuffix[B](l, p.t)), Nil[B]())), l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     isPrefix[B](++[B](p, Cons[B](head[B](getSuffix[B](l, p)), Nil[B]())), l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 126 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[ Debug  ] !isPrefix[B](p, l) || size[B](p) >= size[B](l) || p.isInstanceOf[Cons] || isPrefix[B](++[B](p, Cons[B](head[B](getSuffix[B](l, p)), Nil[B]())), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 127 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[  Info  ] Verified: 128 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[  Info  ] Verified: 129 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 130 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 131 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsConcatPreserves @890:16...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsConcatPreserves @890:16...
[  Info  ] Verified: 132 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[ Debug  ] !forall[B](l1, (b: B) => contains[B](lRef, b)) || !forall[B](l2, (b: B) => contains[B](lRef, b)) || !l1.isInstanceOf[Nil] || forall[B](++[B](l1, l2), (b: B) => contains[B](lRef, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 133 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 134 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 135 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 136 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] !forall[B](l1, (b: B) => contains[B](lRef, b)) || !forall[B](l2, (b: B) => contains[B](lRef, b)) || l1.isInstanceOf[Nil] || !forall[B](l1.t, (b: B) => contains[B](lRef, b)) || !forall[B](l2, (b: B) => contains[B](lRef, b)) || {
[ Debug  ]   val res: Unit = lemmaForallContainsConcatPreserves[B](l1.t, l2, lRef)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(forall[B](++[B](l1.t, l2), (b: B) => contains[B](lRef, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   forall[B](++[B](l1, l2), (b: B) => contains[B](lRef, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 137 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsConcatPreserves @884:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsConcatPreserves @884:5...
[  Info  ] Verified: 138 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @884:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @884:5...
[  Info  ] Verified: 139 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatNotContainedPreserves @1018:7...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatNotContainedPreserves @1018:7...
[  Info  ] Verified: 140 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 141 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 142 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[ Debug  ] contains[B](l1, b) || l2 != Cons[B](b, Nil[B]()) || size[B](l1) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 143 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 144 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 145 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] contains[B](l1, b) || l2 != Cons[B](b, Nil[B]()) || !l1.isInstanceOf[Cons] || contains[B](l1.t, b) || size[B](l1.t) < size[B](l1)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 146 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] contains[B](l1, b) || l2 != Cons[B](b, Nil[B]()) || !l1.isInstanceOf[Cons] || contains[B](l1.t, b) || {
[ Debug  ]   val res: Unit = lemmaListNotContainsThenFilterContainsEmpty[B](l1.t, l2, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](filter[B](l1.t, (e: B) => contains[B](l2, e))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](filter[B](l1, (e: B) => contains[B](l2, e)))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 147 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[ Debug  ] contains[B](l1, b) || l2 != Cons[B](b, Nil[B]()) || l1.isInstanceOf[Cons] || isEmpty[B](filter[B](l1, (e: B) => contains[B](l2, e)))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 148 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[  Info  ] Verified: 149 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[  Info  ] Verified: 150 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[ Debug  ] Cache miss: 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[ Debug  ]  - Now solving 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || !l1.isInstanceOf[Cons] || tot != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67:
[ Debug  ]  => VALID
[  Info  ] Verified: 151 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || !l1.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   ++[B](++[B](l1.t, Cons[B](elmt, Nil[B]())), l2) != tot || ++[B](++[B](l1.t, Cons[B](elmt, Nil[B]())), l2) == tot
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 152 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaConcatAssociativity @319:12...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaConcatAssociativity @319:12...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaConcatAssociativity @319:12...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) == tot
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaConcatAssociativity @319:12:
[ Debug  ]  => VALID
[  Info  ] Verified: 153 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || ListPrimitiveSize[B](l1) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaConcatAssociativity @324:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 154 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || !l1.isInstanceOf[Cons] || ++[B](++[B](l1.t, Cons[B](elmt, Nil[B]())), l2) == tail[B](tot)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 155 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || !l1.isInstanceOf[Cons] || ++[B](++[B](l1.t, Cons[B](elmt, Nil[B]())), l2) != tail[B](tot) || ListPrimitiveSize[B](l1.t) < ListPrimitiveSize[B](l1)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaConcatAssociativity @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 156 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatAssociativity @321:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || !l1.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   ++[B](++[B](l1.t, Cons[B](elmt, Nil[B]())), l2) != tot || {
[ Debug  ]     val res: Unit = lemmaConcatAssociativity[B](l1.t, elmt, l2, tot)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(++[B](l1.t, ++[B](Cons[B](elmt, Nil[B]()), l2)) == tot)
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     ++[B](l1, ++[B](Cons[B](elmt, Nil[B]()), l2)) == tot
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatAssociativity @321:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 157 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @322:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatAssociativity @322:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatAssociativity @322:28...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || l1.isInstanceOf[Cons] || ++[B](l1, ++[B](Cons[B](elmt, Nil[B]()), l2)) == tot
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatAssociativity @322:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 158 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] ++[B](++[B](l1, Cons[B](elmt, Nil[B]())), l2) != tot || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 159 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @320:5...
[  Info  ] Verified: 160 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 161 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 162 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[ Debug  ] !consecutiveSubseq[B](l1, l2) || size[B](l1) + size[B](l2) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 163 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[  Info  ] Verified: 164 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] !consecutiveSubseq[B](l1, l2) || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !consecutiveSubseqAtHead[B](l1, l2) || !consecutiveSubseq[B](l1.t, l2.t) || size[B](l1.t) + size[B](l2.t) < size[B](l1) + size[B](l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 165 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] !consecutiveSubseq[B](l1, l2) || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !consecutiveSubseqAtHead[B](l1, l2) || !consecutiveSubseq[B](l1.t, l2.t) || {
[ Debug  ]   val res: Unit = lemmaConsecutiveSubseqThenSubseq[B](l1.t, l2.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1.t, l2.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 166 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[  Info  ] Verified: 167 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] !consecutiveSubseq[B](l1, l2) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && consecutiveSubseqAtHead[B](l1, l2) || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !consecutiveSubseq[B](l1, l2.t) || size[B](l1) + size[B](l2.t) < size[B](l1) + size[B](l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 168 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] !consecutiveSubseq[B](l1, l2) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && consecutiveSubseqAtHead[B](l1, l2) || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !consecutiveSubseq[B](l1, l2.t) || {
[ Debug  ]   val res: Unit = lemmaConsecutiveSubseqThenSubseq[B](l1, l2.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l2.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 169 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @173:17...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @173:17...
[  Info  ] Verified: 170 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 171 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 172 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for notContainsAddNotEqThenNotContains @1127:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for notContainsAddNotEqThenNotContains @1127:15...
[  Info  ] Verified: 173 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 174 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 175 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 176 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 177 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 178 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[ Debug  ] Cache miss: 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[ Debug  ]  - Now solving 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || p2 != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47:
[ Debug  ]  => VALID
[  Info  ] Verified: 179 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60:
[ Debug  ]  => VALID
[  Info  ] Verified: 180 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || isPrefix[B](p1.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 181 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || isPrefix[B](p2, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 182 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || ++[B](p1.t, s1) == l
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 183 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || ++[B](p2, s2) == l
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 184 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || p1.t == p2
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 185 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60:
[ Debug  ]  => VALID
[  Info  ] Verified: 186 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || isPrefix[B](p1.t, tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 187 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || isPrefix[B](tail[B](p2), l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 188 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](tail[B](p2), l) || ++[B](p1.t, s1) == l
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 189 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) == l
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 190 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t == p2
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 191 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 192 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || ++[B](p2, s2) != l || p1.t != p2 || {
[ Debug  ]     val res: Unit = lemmaSamePrefixThenSameSuffix[B](p1.t, s1, p2, s2, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(s1 == s2)
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     s1 == s2
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 193 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || p1 != p2 || p1.isInstanceOf[Cons] || s1 == s2
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 194 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || ++[B](p1, s1) != l || ++[B](p2, s2) != l || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 195 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @477:5...
[  Info  ] Verified: 196 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 197 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 198 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 199 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainedNoDupThenConcatNoDup @976:62...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainedNoDupThenConcatNoDup @976:62...
[  Info  ] Verified: 200 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 201 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] !forall[B](l1, (b: B) => !contains[B](l2, b)) || !noDuplicate[B](l1) || !noDuplicate[B](l2) || !l1.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaForallNotContainedNoDupThenConcatNoDup[B](l1.t, l2)
[ Debug  ]   noDuplicate[B](++[B](l1, l2))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 202 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] !forall[B](l1, (b: B) => !contains[B](l2, b)) || !noDuplicate[B](l1) || !noDuplicate[B](l2) || l1.isInstanceOf[Cons] || noDuplicate[B](++[B](l1, l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 203 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 204 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 205 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @221:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @221:13...
[  Info  ] Verified: 206 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaSameIndexThenSameElement @221:32...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaSameIndexThenSameElement @221:32...
[  Info  ] Verified: 207 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @224:9...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @224:9...
[  Info  ] Verified: 208 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @225:14...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @225:14...
[  Info  ] Verified: 209 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @226:14...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @226:14...
[  Info  ] Verified: 210 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaSameIndexThenSameElement @229:37...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaSameIndexThenSameElement @229:37...
[  Info  ] Verified: 211 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 212 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 213 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 214 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @225:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @225:14...
[  Info  ] Verified: 215 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @226:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @226:14...
[  Info  ] Verified: 216 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @227:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @227:14...
[  Info  ] Verified: 217 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSameIndexThenSameElement @229:37...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSameIndexThenSameElement @229:37...
[  Info  ] Verified: 218 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameIndexThenSameElement @225:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameIndexThenSameElement @225:7...
[  Info  ] Verified: 219 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 220 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 221 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 222 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 223 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 224 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[ Debug  ] size[B](l) <= BigInt("0") || !isEmpty[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 225 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[ Debug  ] size[B](l) <= BigInt("0") || size[B](removeLast[B](l)) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7:
[ Debug  ]  => VALID
[  Info  ] Verified: 226 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[ Debug  ] Cache miss: 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[ Debug  ]  - Now solving 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || !s1.isInstanceOf[Cons] || tot != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65:
[ Debug  ]  => VALID
[  Info  ] Verified: 227 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || !s1.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   ++[B](s1.t, Cons[B](hd2, tl2)) != tot || ++[B](s1.t, Cons[B](hd2, tl2)) == tot
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 228 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || ListPrimitiveSize[B](tot) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43:
[ Debug  ]  => VALID
[  Info  ] Verified: 229 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || !s1.isInstanceOf[Cons] || ++[B](s1.t, Cons[B](hd2, tl2)) == tail[B](tot)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 230 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || !s1.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   ++[B](s1.t, Cons[B](hd2, tl2)) != tot || ListPrimitiveSize[B](tot) < ListPrimitiveSize[B](tot)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 231 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || !s1.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   ++[B](s1.t, Cons[B](hd2, tl2)) != tot || {
[ Debug  ]     val res: Unit = lemmaMoveElementToOtherListKeepsConcatEq[B](s1.t, hd2, tl2, tot)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(++[B](++[B](s1.t, Cons[B](hd2, Nil[B]())), tl2) == tot)
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     ++[B](++[B](s1, Cons[B](hd2, Nil[B]())), tl2) == tot
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 232 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || s1.isInstanceOf[Cons] || ++[B](++[B](s1, Cons[B](hd2, Nil[B]())), tl2) == tot
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 233 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] ++[B](s1, Cons[B](hd2, tl2)) != tot || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 234 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[  Info  ] Verified: 235 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || isSuffix[B](list, totList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35:
[ Debug  ]  => VALID
[  Info  ] Verified: 236 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || isSuffix[B](list, totList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 237 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !isSuffix[B](list, totList) || isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 238 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41:
[ Debug  ]  => VALID
[  Info  ] Verified: 239 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36:
[ Debug  ]  => VALID
[  Info  ] Verified: 240 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 241 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   !subseq[B](acc, l2) || !subseq[B](l2, l3) || subseq[B](acc, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 242 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   !subseq[B](acc, l2) || !subseq[B](l2, l3) || subseq[B](l2, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 243 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   noDuplicate[B](acc)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 244 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](acc) || isSuffix[B](list.t, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 245 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](acc) || !isSuffix[B](list.t, totList) || subseq[B](acc, getPrefix[B](totList, list.t))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 246 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](acc) || !isSuffix[B](list.t, totList) || !subseq[B](acc, getPrefix[B](totList, list.t)) || content[B](++[B](acc, list.t)) == content[B](totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 247 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || isSuffix[B](list, totList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 248 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !isSuffix[B](list, totList) || isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 249 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41:
[ Debug  ]  => VALID
[  Info  ] Verified: 250 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36:
[ Debug  ]  => VALID
[  Info  ] Verified: 251 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 252 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   !subseq[B](acc, l2) || !subseq[B](l2, l3) || subseq[B](acc, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 253 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   !subseq[B](acc, l2) || !subseq[B](l2, l3) || subseq[B](l2, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 254 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46:
[ Debug  ]  => VALID
[  Info  ] Verified: 255 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   !subseq[B](acc, l) || subseq[B](acc, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 256 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   !forall[B](acc, (bb: B) => !contains[B](lRef, bb)) || contains[B](acc, list.h) || forall[B](acc, (bb: B) => !contains[B](lRef, bb))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 257 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   !forall[B](acc, (bb: B) => !contains[B](lRef, bb)) || contains[B](acc, list.h) || !forall[B](acc, (bb: B) => !contains[B](lRef, bb)) || true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 258 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   !noDuplicate[B](acc) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](acc, b)) || !forall[B](acc, (b: B) => !contains[B](lB, b)) || noDuplicate[B](acc)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 259 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   !noDuplicate[B](acc) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](acc, b)) || !forall[B](acc, (b: B) => !contains[B](lB, b)) || noDuplicate[B](lB)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 260 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   !noDuplicate[B](acc) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](acc, b)) || !forall[B](acc, (b: B) => !contains[B](lB, b)) || forall[B](lB, (b: B) => !contains[B](acc, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 261 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   !noDuplicate[B](acc) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](acc, b)) || !forall[B](acc, (b: B) => !contains[B](lB, b)) || !forall[B](lB, (b: B) => !contains[B](acc, b)) || forall[B](acc, (b: B) => !contains[B](lB, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 262 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](acc, lB)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](acc, lB)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   noDuplicate[B](++[B](acc, Cons[B](list.h, Nil[B]())))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 263 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](acc, lB)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](acc, lB)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](++[B](acc, Cons[B](list.h, Nil[B]()))) || isSuffix[B](list.t, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 264 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](acc, lB)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](acc, lB)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val acc: List[B] = ++[B](acc, Cons[B](list.h, Nil[B]()))
[ Debug  ]   !noDuplicate[B](acc) || !isSuffix[B](list.t, totList) || subseq[B](acc, getPrefix[B](totList, list.t))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 265 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache miss: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[ Debug  ]  - Now solving 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](acc, lB)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](acc, lB)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val acc: List[B] = ++[B](acc, Cons[B](list.h, Nil[B]()))
[ Debug  ]   !noDuplicate[B](acc) || !isSuffix[B](list.t, totList) || !subseq[B](acc, getPrefix[B](totList, list.t)) || content[B](++[B](acc, list.t)) == content[B](totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 266 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for removeDuplicates @614:100...
[ Debug  ] Cache miss: 'non-negative measure' VC for removeDuplicates @614:100...
[ Debug  ]  - Now solving 'non-negative measure' VC for removeDuplicates @614:100...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || ListPrimitiveSize[B](list) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for removeDuplicates @614:100:
[ Debug  ]  => VALID
[  Info  ] Verified: 267 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @591:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @591:9...
[  Info  ] Verified: 268 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 269 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   subseq[B](acc, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 270 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   !subseq[B](acc, l2) || subseq[B](l2, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 271 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeDuplicates @596:9...
[ Debug  ] Cache miss: 'measure decreases' VC for removeDuplicates @596:9...
[ Debug  ]  - Now solving 'measure decreases' VC for removeDuplicates @596:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   ListPrimitiveSize[B](list.t) < ListPrimitiveSize[B](list)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for removeDuplicates @596:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 272 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @596:9...
[ Debug  ] Cache miss: 'postcondition' VC for removeDuplicates @596:9...
[ Debug  ]  - Now solving 'postcondition' VC for removeDuplicates @596:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || !list.isInstanceOf[Cons] || !contains[B](acc, list.h) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: List[B] = removeDuplicates[B](totList, list.t, acc)
[ Debug  ]   noDuplicate[B](res) && subseq[B](res, totList) && content[B](res) == content[B](++[B](list, acc)) && content[B](res) == content[B](totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for removeDuplicates @596:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 273 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @599:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @599:9...
[  Info  ] Verified: 274 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isSuffix[B](list, totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 275 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   subseq[B](acc, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 276 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   !subseq[B](acc, l2) || subseq[B](l2, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 277 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](acc, getPrefix[B](totList, list))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 278 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 279 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)) || !contains[B](acc, list.h)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 280 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   noDuplicate[B](acc)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 281 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](acc) || noDuplicate[B](Cons[B](list.h, Nil[B]()))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 282 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   !noDuplicate[B](acc) || !noDuplicate[B](lB) || forall[B](lB, (b: B) => !contains[B](acc, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 283 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   !noDuplicate[B](acc) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](acc, b)) || forall[B](acc, (b: B) => !contains[B](lB, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 284 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeDuplicates @610:9...
[ Debug  ] Cache miss: 'measure decreases' VC for removeDuplicates @610:9...
[ Debug  ]  - Now solving 'measure decreases' VC for removeDuplicates @610:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](acc, lB)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](acc, lB)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   {
[ Debug  ]     val acc: List[B] = ++[B](acc, Cons[B](list.h, Nil[B]()))
[ Debug  ]     ListPrimitiveSize[B](list.t)
[ Debug  ]   } < ListPrimitiveSize[B](list)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for removeDuplicates @610:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 285 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @610:9...
[ Debug  ] Cache miss: 'postcondition' VC for removeDuplicates @610:9...
[ Debug  ]  - Now solving 'postcondition' VC for removeDuplicates @610:9...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || !list.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || isSuffix[B](tail[B](list), totList))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](totList, list)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isEmpty[B](list) || ++[B](getPrefix[B](totList, list), Cons[B](head[B](list), Nil[B]())) == getPrefix[B](totList, tail[B](list)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l2: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l1, ++[B](l1, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l2: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val l3: List[B] = ++[B](getPrefix[B](totList, list), Cons[B](list.h, Nil[B]()))
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](acc, l2, l3)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](acc, l3))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l: List[B] = getPrefix[B](totList, list)
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](acc, l, list.h)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](++[B](acc, Cons[B](list.h, Nil[B]())), ++[B](l, Cons[B](list.h, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaForallNotContainsNilRefList[B](acc)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Nil[B](), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lRef: List[B] = Nil[B]()
[ Debug  ]   val b: B = list.h
[ Debug  ]   val res: Unit = lemmaForallNotContainsPreservedAddNewElmtInRefList[B](acc, lRef, b)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](acc, (bb: B) => !contains[B](Cons[B](b, lRef), bb)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val lB: List[B] = Cons[B](list.h, Nil[B]())
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](acc, lB)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](acc, lB)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: List[B] = removeDuplicates[B](totList, list.t, ++[B](acc, Cons[B](list.h, Nil[B]())))
[ Debug  ]   noDuplicate[B](res) && subseq[B](res, totList) && content[B](res) == content[B](++[B](list, acc)) && content[B](res) == content[B](totList)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for removeDuplicates @610:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 286 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @614:108...
[ Debug  ] Cache miss: 'postcondition' VC for removeDuplicates @614:108...
[ Debug  ]  - Now solving 'postcondition' VC for removeDuplicates @614:108...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || list.isInstanceOf[Cons] || noDuplicate[B](acc) && subseq[B](acc, totList) && content[B](acc) == content[B](++[B](list, acc)) && content[B](acc) == content[B](totList)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for removeDuplicates @614:108:
[ Debug  ]  => VALID
[  Info  ] Verified: 287 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[ Debug  ] !noDuplicate[B](acc) || !isSuffix[B](list, totList) || !subseq[B](acc, getPrefix[B](totList, list)) || content[B](++[B](acc, list)) != content[B](totList) || list.isInstanceOf[Cons] && contains[B](acc, list.h) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 288 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @589:5...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @589:5...
[  Info  ] Verified: 289 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsNilRefList @972:51...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsNilRefList @972:51...
[  Info  ] Verified: 290 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 291 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 292 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 293 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 294 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 295 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 296 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 297 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 298 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 299 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 300 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 301 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 302 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 303 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 304 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 305 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 306 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 307 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 308 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 309 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } >= BigInt("0") && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } >= BigInt("0") && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] } >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 310 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 311 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 312 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h == l3.h || !subseq[B](l2, l3.t) || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 313 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h == l3.h || !subseq[B](l2, l3.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1, l2, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @676:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 314 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 315 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 316 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || !subseq[B](l2.t, l3.t) || l1.h != l2.h || !subseq[B](l1.t, l2.t) || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1.t)
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 317 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || !subseq[B](l2.t, l3.t) || l1.h != l2.h || !subseq[B](l1.t, l2.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1.t, l2.t, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1.t, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @682:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 318 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 319 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 320 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || !subseq[B](l2.t, l3.t) || l1.h != l2.h || subseq[B](l1.t, l2.t) || !subseq[B](l1, l2.t) || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 321 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || !subseq[B](l2.t, l3.t) || l1.h != l2.h || subseq[B](l1.t, l2.t) || !subseq[B](l1, l2.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1, l2.t, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @684:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 322 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 323 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 324 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || !subseq[B](l2.t, l3.t) || l1.h == l2.h || !subseq[B](l1, l2.t) || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2.t)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 325 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || !subseq[B](l2.t, l3.t) || l1.h == l2.h || !subseq[B](l1, l2.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1, l2.t, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @687:13:
[ Debug  ]  => VALID
[  Info  ] Verified: 326 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 327 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 328 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || subseq[B](l2.t, l3.t) || l1.h != l2.h || !subseq[B](l1.t, l2) || !subseq[B](l2, l3.t) || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1.t)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1.t)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1.t)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 329 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || subseq[B](l2.t, l3.t) || l1.h != l2.h || !subseq[B](l1.t, l2) || !subseq[B](l2, l3.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1.t, l2, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1.t, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @692:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 330 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 331 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 332 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || subseq[B](l2.t, l3.t) || l1.h != l2.h || subseq[B](l1.t, l2) || !subseq[B](l2, l3.t) || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 333 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || subseq[B](l2.t, l3.t) || l1.h != l2.h || subseq[B](l1.t, l2) || !subseq[B](l2, l3.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1, l2, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @694:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 334 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 335 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 336 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || subseq[B](l2.t, l3.t) || l1.h == l2.h || !subseq[B](l2, l3.t) || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } || {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l1)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l1)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3.t)
[ Debug  ]   size[B](l2)
[ Debug  ] } == {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l3)
[ Debug  ]   size[B](l2)
[ Debug  ] } && {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3.t)
[ Debug  ] } < {
[ Debug  ]   val e: BigInt = size[B](l1)
[ Debug  ]   val e: BigInt = size[B](l2)
[ Debug  ]   size[B](l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqTransitive @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 337 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] !subseq[B](l1, l2) || !subseq[B](l2, l3) || l1.isInstanceOf[Cons] && l2.isInstanceOf[Cons] && l3.isInstanceOf[Cons] && l2.h != l3.h || !l1.isInstanceOf[Cons] || !l2.isInstanceOf[Cons] || !l3.isInstanceOf[Cons] || l2.h != l3.h || subseq[B](l2.t, l3.t) || l1.h == l2.h || !subseq[B](l2, l3.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqTransitive[B](l1, l2, l3.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l3.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l3)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqTransitive @697:13:
[ Debug  ]  => VALID
[  Info  ] Verified: 338 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @702:17...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @702:17...
[  Info  ] Verified: 339 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || !forall[B](lB, (b: B) => !contains[B](l, b)) || forall[B](lB, (b: B) => !contains[B](l, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 340 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   !forall[B](lB, (b: B) => !contains[B](l, b)) || l != ++[B](l1, l.t) || !forall[B](lB, (b: B) => !contains[B](l, b)) || l == ++[B](l1, l.t)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 341 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   !forall[B](lB, (b: B) => !contains[B](++[B](l1, l.t), b)) || forall[B](lB, (b: B) => !contains[B](++[B](l1, l.t), b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 342 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || !forall[B](l.t, (b: B) => !contains[B](lB, b)) || noDuplicate[B](l.t)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 343 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || !forall[B](l.t, (b: B) => !contains[B](lB, b)) || noDuplicate[B](lB)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 344 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || !forall[B](l.t, (b: B) => !contains[B](lB, b)) || forall[B](lB, (b: B) => !contains[B](l.t, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 345 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || !forall[B](l.t, (b: B) => !contains[B](lB, b)) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || forall[B](l.t, (b: B) => !contains[B](lB, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 346 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[ Debug  ] Cache miss: 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[ Debug  ]  - Now solving 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l == ++[B](Cons[B](l.h, Nil[B]()), l.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 347 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreservesBis @1057:35...
[ Debug  ] Cache hit: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreservesBis @1057:35...
[  Info  ] Verified: 348 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || forall[B](lB, (b: B) => !contains[B](l, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 349 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || !forall[B](lB, (b: B) => !contains[B](l, b)) || l == ++[B](Cons[B](l.h, Nil[B]()), l.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 350 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   forall[B](lB, (b: B) => !contains[B](++[B](l1, l.t), b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 351 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   noDuplicate[B](l.t)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 352 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || noDuplicate[B](lB)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 353 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || forall[B](lB, (b: B) => !contains[B](l.t, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 354 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || forall[B](l.t, (b: B) => !contains[B](lB, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 355 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || !forall[B](l.t, (b: B) => !contains[B](lB, b)) || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 356 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache miss: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ]  - Now solving 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || !l.isInstanceOf[Cons] || l != ++[B](Cons[B](l.h, Nil[B]()), l.t) || {
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForConcat[B](lB, l, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](++[B](l1, l2), b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val l1: List[B] = Cons[B](l.h, Nil[B]())
[ Debug  ]   val l2: List[B] = l.t
[ Debug  ]   val res: Unit = lemmaForallNotContainsForSubseq[B](lB, l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](lB, (b: B) => !contains[B](l1, b)) && forall[B](lB, (b: B) => !contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !noDuplicate[B](l.t) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l.t, b)) || !forall[B](l.t, (b: B) => !contains[B](lB, b)) || {
[ Debug  ]     val res: Unit = noDuplicateConcatListNotContainedPreservesBis[B](l.t, lB)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(noDuplicate[B](++[B](l.t, lB)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     noDuplicate[B](++[B](l, lB))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 357 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[ Debug  ] Cache miss: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[ Debug  ]  - Now solving 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !forall[B](l, (b: B) => !contains[B](lB, b)) || l.isInstanceOf[Cons] || noDuplicate[B](++[B](l, lB))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 358 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[  Info  ] Verified: 359 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[  Info  ] Verified: 360 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b)) || !l.isInstanceOf[Cons] || forall[B](l.t, (b: B) => !contains[B](++[B](l1, l2), b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 361 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b)) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50:
[ Debug  ]  => VALID
[  Info  ] Verified: 362 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b)) || !l.isInstanceOf[Cons] || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 363 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b)) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaForallNotContainsForSubseq[B](l.t, l1, l2)
[ Debug  ]   forall[B](l, (b: B) => !contains[B](l1, b)) && forall[B](l, (b: B) => !contains[B](l2, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 364 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b)) || l.isInstanceOf[Cons] || forall[B](l, (b: B) => !contains[B](l1, b)) && forall[B](l, (b: B) => !contains[B](l2, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 365 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b)) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 366 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 367 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 368 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 369 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @964:69...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @964:69...
[  Info  ] Verified: 370 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 371 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 372 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 373 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 374 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 375 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 376 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 377 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @763:17...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @763:17...
[  Info  ] Verified: 378 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[  Info  ] Verified: 379 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] contains[B](l1, b) || contains[B](l2, b) || !l1.isInstanceOf[Cons] || l1.h != b || {
[ Debug  ]   val prop: Boolean = false
[ Debug  ]   !prop || {
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(prop)
[ Debug  ]       ()
[ Debug  ]     }
[ Debug  ]     !contains[B](++[B](l1, l2), b)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39:
[ Debug  ]  => VALID
[  Info  ] Verified: 380 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 381 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 382 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 383 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] contains[B](l1, b) || contains[B](l2, b) || l1.isInstanceOf[Cons] && l1.h == b || !l1.isInstanceOf[Cons] || contains[B](l1.t, b) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListsWhichNotContainThenTotNotContain[B](l1.t, l2, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(!contains[B](++[B](l1.t, l2), b))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !contains[B](++[B](l1, l2), b)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 384 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[ Debug  ] contains[B](l1, b) || contains[B](l2, b) || l1.isInstanceOf[Cons] && l1.h == b || l1.isInstanceOf[Cons] || !contains[B](++[B](l1, l2), b)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 385 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[  Info  ] Verified: 386 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[  Info  ] Verified: 387 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAThenTailNotContains[B]((s...)' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAThenTailNotContains[B]((s...)' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 388 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 389 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 390 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 391 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for notContainsAThenTailNotContains @1139:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for notContainsAThenTailNotContains @1139:15...
[  Info  ] Verified: 392 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 393 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 394 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 395 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 396 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 397 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContained[B](l1, (b: B) => cont...)' VC for lemmaForallContainsPreservedIfSameContent @918:9...
[ Debug  ] Cache hit: 'precond. (call forallContained[B](l1, (b: B) => cont...)' VC for lemmaForallContainsPreservedIfSameContent @918:9...
[  Info  ] Verified: 398 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 399 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 400 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedIfSameContent @922:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedIfSameContent @922:15...
[  Info  ] Verified: 401 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @916:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @916:21...
[  Info  ] Verified: 402 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 403 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 404 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 405 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 406 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[  Info  ] Verified: 407 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[  Info  ] Verified: 408 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[ Debug  ] Cache miss: 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[ Debug  ]  - Now solving 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || s1 != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 409 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 410 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val s1: List[B] = tail[B](s1)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](s1, l) || !isPrefix[B](s2.t, l) || size[B](s2.t) > size[B](s1) || isPrefix[B](s1, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 411 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val s1: List[B] = tail[B](s1)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](s1, l) || !isPrefix[B](s2.t, l) || size[B](s2.t) > size[B](s1) || isPrefix[B](s2.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 412 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val s1: List[B] = tail[B](s1)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](s1, l) || !isPrefix[B](s2.t, l) || size[B](s2.t) > size[B](s1) || size[B](s2.t) <= size[B](s1)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 413 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 414 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || isPrefix[B](tail[B](s1), tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 415 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](tail[B](s1), l) || isPrefix[B](s2.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 416 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val s1: List[B] = tail[B](s1)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](s1, l) || !isPrefix[B](s2.t, l) || size[B](s2.t) <= size[B](s1)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 417 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val s1: List[B] = tail[B](s1)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](s1, l) || !isPrefix[B](s2.t, l) || size[B](s2.t) > size[B](s1) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 418 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || !s2.isInstanceOf[Cons] || {
[ Debug  ]   val s1: List[B] = tail[B](s1)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](s1, l) || !isPrefix[B](s2.t, l) || size[B](s2.t) > size[B](s1) || {
[ Debug  ]     val res: Unit = lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther[B](s1, s2.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](s2.t, s1))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     isPrefix[B](s2, s1)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 419 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || s2.isInstanceOf[Cons] || isPrefix[B](s2, s1)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 420 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] !isPrefix[B](s1, l) || !isPrefix[B](s2, l) || size[B](s2) > size[B](s1) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 421 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[  Info  ] Verified: 422 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] !noDuplicate[B](++[B](l1, l2)) || !l1.isInstanceOf[Cons] || noDuplicate[B](++[B](l1.t, l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 423 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[ Debug  ] !noDuplicate[B](++[B](l1, l2)) || ListPrimitiveSize[B](l1) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 424 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] !noDuplicate[B](++[B](l1, l2)) || !l1.isInstanceOf[Cons] || ListPrimitiveSize[B](l1.t) < ListPrimitiveSize[B](l1)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 425 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] !noDuplicate[B](++[B](l1, l2)) || !l1.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaNoDuplicateConcatThenForallNotContains[B](l1.t, l2)
[ Debug  ]   forall[B](l1, (b: B) => !contains[B](l2, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 426 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] !noDuplicate[B](++[B](l1, l2)) || l1.isInstanceOf[Cons] || forall[B](l1, (b: B) => !contains[B](l2, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 427 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] !noDuplicate[B](++[B](l1, l2)) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 428 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 429 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74:
[ Debug  ]  => VALID
[  Info  ] Verified: 430 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   ++[B](p.t, s) != l || ++[B](p.t, s) == l
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 431 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || ++[B](p.t, s) != tail[B](l) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 432 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   ++[B](p.t, s) != l || {
[ Debug  ]     val res: Unit = lemmaRemoveLastFromBothSidePreservesEq[B](p.t, s, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(++[B](p.t, removeLast[B](s)) == removeLast[B](l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     true
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20:
[ Debug  ]  => VALID
[  Info  ] Verified: 433 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   ++[B](p.t, s) != l || {
[ Debug  ]     val res: Unit = lemmaRemoveLastFromBothSidePreservesEq[B](p.t, s, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(++[B](p.t, removeLast[B](s)) == removeLast[B](l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     !isEmpty[B](l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37:
[ Debug  ]  => VALID
[  Info  ] Verified: 434 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] ++[B](p, s) != l || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20:
[ Debug  ]  => VALID
[  Info  ] Verified: 435 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || p.isInstanceOf[Cons] || !isEmpty[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37:
[ Debug  ]  => VALID
[  Info  ] Verified: 436 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 437 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 438 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48:
[ Debug  ]  => VALID
[  Info  ] Verified: 439 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || ++[B](p.t, s) == tail[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 440 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 441 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   ++[B](p.t, s) != l || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 442 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   ++[B](p.t, s) != l || {
[ Debug  ]     val res: Unit = lemmaRemoveLastFromBothSidePreservesEq[B](p.t, s, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(++[B](p.t, removeLast[B](s)) == removeLast[B](l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     ++[B](p, removeLast[B](s)) == removeLast[B](l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 443 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[ Debug  ] ++[B](p, s) != l || isEmpty[B](s) || p.isInstanceOf[Cons] || ++[B](p, removeLast[B](s)) == removeLast[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 444 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[  Info  ] Verified: 445 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[  Info  ] Verified: 446 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](suffix) >= size[B](l) || !isSuffix[B](suffix, l.t) || isSuffix[B](suffix, l.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 447 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](suffix) >= size[B](l) || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42:
[ Debug  ]  => VALID
[  Info  ] Verified: 448 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || !isEmpty[B](suffix) || !isEmpty[B](l) || isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42:
[ Debug  ]  => VALID
[  Info  ] Verified: 449 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] Cache miss: 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ]  - Now solving 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 450 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[ Debug  ] Cache miss: 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[ Debug  ]  - Now solving 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33:
[ Debug  ]  => VALID
[  Info  ] Verified: 451 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 452 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33:
[ Debug  ]  => VALID
[  Info  ] Verified: 453 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || tail[B](suffix) != tail[B](l) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 454 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || tail[B](suffix) != tail[B](l) || !isSuffix[B](tail[B](suffix), l) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42:
[ Debug  ]  => VALID
[  Info  ] Verified: 455 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix == l || isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42:
[ Debug  ]  => VALID
[  Info  ] Verified: 456 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || suffix == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 457 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || !isEmpty[B](suffix) || isEmpty[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 458 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) == head[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 459 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || tail[B](suffix) == tail[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 460 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || tail[B](suffix) != tail[B](l) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 461 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[ Debug  ] !isSuffix[B](suffix, l) || size[B](l) + size[B](suffix) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 462 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](suffix) >= size[B](l) || isSuffix[B](suffix, l.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59:
[ Debug  ]  => VALID
[  Info  ] Verified: 463 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](suffix) >= size[B](l) || !isSuffix[B](suffix, l.t) || size[B](l.t) + size[B](suffix) < size[B](l) + size[B](suffix)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 464 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](suffix) >= size[B](l) || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenTailIsSuffix[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59:
[ Debug  ]  => VALID
[  Info  ] Verified: 465 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || !isEmpty[B](suffix) || !isEmpty[B](l) || isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 466 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix != l || isEmpty[B](suffix) || head[B](suffix) != head[B](l) || tail[B](suffix) != tail[B](l) || !isSuffix[B](tail[B](suffix), l) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 467 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 468 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](suffix) < size[B](l) || suffix == l || isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 469 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 470 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 471 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 472 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSubSeqAddSameElmtPreserves @719:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSubSeqAddSameElmtPreserves @719:18...
[  Info  ] Verified: 473 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[ Debug  ] !subseq[B](lSub, l) || size[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 474 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[ Debug  ] !subseq[B](lSub, l) || !lSub.isInstanceOf[Nil] || !l.isInstanceOf[Nil] || subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l, Cons[B](b, Nil[B]())))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39:
[ Debug  ]  => VALID
[  Info  ] Verified: 475 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[  Info  ] Verified: 476 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || !lSub.isInstanceOf[Nil] || !l.isInstanceOf[Cons] || !subseq[B](lSub, l.t) || size[B](l.t) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 477 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || !lSub.isInstanceOf[Nil] || !l.isInstanceOf[Cons] || !subseq[B](lSub, l.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](lSub, l.t, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l.t, Cons[B](b, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l, Cons[B](b, Nil[B]())))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39:
[ Debug  ]  => VALID
[  Info  ] Verified: 478 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[  Info  ] Verified: 479 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || lSub.isInstanceOf[Nil] && l.isInstanceOf[Cons] || !lSub.isInstanceOf[Cons] || !l.isInstanceOf[Cons] || !(lSub.h == l.h && subseq[B](lSub.t, l.t)) || !subseq[B](lSub.t, l.t) || size[B](l.t) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 480 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || lSub.isInstanceOf[Nil] && l.isInstanceOf[Cons] || !lSub.isInstanceOf[Cons] || !l.isInstanceOf[Cons] || !(lSub.h == l.h && subseq[B](lSub.t, l.t)) || !subseq[B](lSub.t, l.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](lSub.t, l.t, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](++[B](lSub.t, Cons[B](b, Nil[B]())), ++[B](l.t, Cons[B](b, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l, Cons[B](b, Nil[B]())))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 481 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[  Info  ] Verified: 482 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || lSub.isInstanceOf[Nil] && l.isInstanceOf[Cons] || !lSub.isInstanceOf[Cons] || !l.isInstanceOf[Cons] || lSub.h == l.h && subseq[B](lSub.t, l.t) || !subseq[B](lSub, l.t) || size[B](l.t) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 483 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || lSub.isInstanceOf[Nil] && l.isInstanceOf[Cons] || !lSub.isInstanceOf[Cons] || !l.isInstanceOf[Cons] || lSub.h == l.h && subseq[B](lSub.t, l.t) || !subseq[B](lSub, l.t) || {
[ Debug  ]   val res: Unit = lemmaSubSeqAddSameElmtPreserves[B](lSub, l.t, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l.t, Cons[B](b, Nil[B]()))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l, Cons[B](b, Nil[B]())))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 484 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[  Info  ] Verified: 485 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] !subseq[B](lSub, l) || lSub.isInstanceOf[Nil] && l.isInstanceOf[Nil] || lSub.isInstanceOf[Nil] && l.isInstanceOf[Cons] || lSub.isInstanceOf[Cons] && l.isInstanceOf[Cons] || subseq[B](++[B](lSub, Cons[B](b, Nil[B]())), ++[B](l, Cons[B](b, Nil[B]())))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 486 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[ Debug  ] size[B](l1) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 487 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[ Debug  ] !l1.isInstanceOf[Cons] || size[B](l1.t) < size[B](l1)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 488 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[ Debug  ] !l1.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaConcatThenFirstSubseqOfTot[B](l1.t, l2)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1.t, ++[B](l1.t, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, ++[B](l1, l2))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 489 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[ Debug  ] l1.isInstanceOf[Cons] || subseq[B](l1, ++[B](l1, l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 490 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[  Info  ] Verified: 491 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[  Info  ] Verified: 492 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 493 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 494 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForConcat @941:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForConcat @941:50...
[  Info  ] Verified: 495 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 496 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l1, (b: B) => !contains[B](lRef, b)) || !forall[B](l2, (b: B) => !contains[B](lRef, b)) || !l1.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaForallNotContainsForConcat[B](l1.t, l2, lRef)
[ Debug  ]   forall[B](++[B](l1, l2), (b: B) => !contains[B](lRef, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 497 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l1, (b: B) => !contains[B](lRef, b)) || !forall[B](l2, (b: B) => !contains[B](lRef, b)) || l1.isInstanceOf[Cons] || forall[B](++[B](l1, l2), (b: B) => !contains[B](lRef, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 498 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 499 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 500 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 501 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 502 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[ Debug  ] !contains[B](l1, b) || !contains[B](l2, b) || size[B](l1) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 503 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 504 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 505 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] !contains[B](l1, b) || !contains[B](l2, b) || !l1.isInstanceOf[Cons] || !(l1.h != b) || !contains[B](l1.t, b) || size[B](l1.t) < size[B](l1)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 506 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] !contains[B](l1, b) || !contains[B](l2, b) || !l1.isInstanceOf[Cons] || !(l1.h != b) || !contains[B](l1.t, b) || {
[ Debug  ]   val res: Unit = lemmaListContainsThenFilterContainsNotEmpty[B](l1.t, l2, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(!isEmpty[B](filter[B](l1.t, (e: B) => contains[B](l2, e))))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !isEmpty[B](filter[B](l1, (e: B) => contains[B](l2, e)))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 507 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[ Debug  ] !contains[B](l1, b) || !contains[B](l2, b) || !l1.isInstanceOf[Cons] || l1.h != b || !isEmpty[B](filter[B](l1, (e: B) => contains[B](l2, e)))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10:
[ Debug  ]  => VALID
[  Info  ] Verified: 508 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[  Info  ] Verified: 509 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] !contains[B](l1, b) || !contains[B](l2, b) || l1.isInstanceOf[Cons] || {
[ Debug  ]   val prop: Boolean = false
[ Debug  ]   !prop || {
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(prop)
[ Debug  ]       ()
[ Debug  ]     }
[ Debug  ]     !isEmpty[B](filter[B](l1, (e: B) => contains[B](l2, e)))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 510 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[  Info  ] Verified: 511 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[  Info  ] Verified: 512 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatThenSecondSubseqOfTot @739:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatThenSecondSubseqOfTot @739:15...
[  Info  ] Verified: 513 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatThenSecondSubseqOfTot @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatThenSecondSubseqOfTot @?:?...
[  Info  ] Verified: 514 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[ Debug  ] !l1.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaConcatThenSecondSubseqOfTot[B](l1.t, l2)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l2, ++[B](l1.t, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l2, ++[B](l1, l2))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 515 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[ Debug  ] l1.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l2)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l2, l2))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l2, ++[B](l1, l2))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 516 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[  Info  ] Verified: 517 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[  Info  ] Verified: 518 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 519 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 520 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsCannotContain @949:54...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsCannotContain @949:54...
[  Info  ] Verified: 521 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 522 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 523 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 524 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 525 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 526 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65:
[ Debug  ]  => VALID
[  Info  ] Verified: 527 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 528 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || isPrefix[B](p.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 529 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || size[B](p.t) < size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 530 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || {
[ Debug  ]     val res: Unit = lemmaRemoveLastPrefixStillPrefix[B](p.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](p.t, removeLast[B](l)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     true
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 531 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 532 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 533 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38:
[ Debug  ]  => VALID
[  Info  ] Verified: 534 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || !isEmpty[B](tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 535 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || isPrefix[B](p.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 536 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) < size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 537 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 538 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   isEmpty[B](l) || !isPrefix[B](p.t, l) || size[B](p.t) >= size[B](l) || {
[ Debug  ]     val res: Unit = lemmaRemoveLastPrefixStillPrefix[B](p.t, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](p.t, removeLast[B](l)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     isPrefix[B](p, removeLast[B](l))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 539 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[ Debug  ] isEmpty[B](l) || !isPrefix[B](p, l) || size[B](p) >= size[B](l) || p.isInstanceOf[Cons] || isPrefix[B](p, removeLast[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 540 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[  Info  ] Verified: 541 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[  Info  ] Verified: 542 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 543 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 544 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 545 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @777:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @777:39...
[  Info  ] Verified: 546 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 547 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 548 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 549 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 550 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @779:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @779:39...
[  Info  ] Verified: 551 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 552 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 553 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[ Debug  ] Cache miss: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[ Debug  ]  - Now solving 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[ Debug  ] ++[B](l1, l2) != lTot || isEmpty[B](l2) || l2 != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47:
[ Debug  ]  => VALID
[  Info  ] Verified: 554 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:57...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:57...
[  Info  ] Verified: 555 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[ Debug  ] Cache miss: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[ Debug  ]  - Now solving 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[ Debug  ] ++[B](l1, l2) != lTot || isEmpty[B](l2) || {
[ Debug  ]   val l2: List[B] = Cons[B](head[B](l2), Nil[B]())
[ Debug  ]   val l3: List[B] = tail[B](l2)
[ Debug  ]   val res: Unit = lemmaTwoListsConcatAssociativity[B](l1, l2, l3)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(++[B](++[B](l1, l2), l3) == ++[B](l1, ++[B](l2, l3)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   l2 != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 556 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[ Debug  ] Cache miss: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[ Debug  ]  - Now solving 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[ Debug  ] ++[B](l1, l2) != lTot || isEmpty[B](l2) || {
[ Debug  ]   val l2: List[B] = Cons[B](head[B](l2), Nil[B]())
[ Debug  ]   val l3: List[B] = tail[B](l2)
[ Debug  ]   val res: Unit = lemmaTwoListsConcatAssociativity[B](l1, l2, l3)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(++[B](++[B](l1, l2), l3) == ++[B](l1, ++[B](l2, l3)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val thiss: List[B] = ++[B](l1, Cons[B](head[B](l2), Nil[B]()))
[ Debug  ]   l2 != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40:
[ Debug  ]  => VALID
[  Info  ] Verified: 557 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[ Debug  ] ++[B](l1, l2) != lTot || isEmpty[B](l2) || {
[ Debug  ]   val l2: List[B] = Cons[B](head[B](l2), Nil[B]())
[ Debug  ]   val l3: List[B] = tail[B](l2)
[ Debug  ]   val res: Unit = lemmaTwoListsConcatAssociativity[B](l1, l2, l3)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(++[B](++[B](l1, l2), l3) == ++[B](l1, ++[B](l2, l3)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   ++[B](++[B](l1, Cons[B](head[B](l2), Nil[B]())), tail[B](l2)) == lTot
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 558 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaTwoListsConcatAssociativity @333:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaTwoListsConcatAssociativity @333:15...
[  Info  ] Verified: 559 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaTwoListsConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaTwoListsConcatAssociativity @?:?...
[  Info  ] Verified: 560 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[ Debug  ] !l1.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaTwoListsConcatAssociativity[B](l1.t, l2, l3)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(++[B](++[B](l1.t, l2), l3) == ++[B](l1.t, ++[B](l2, l3)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   ++[B](++[B](l1, l2), l3) == ++[B](l1, ++[B](l2, l3))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 561 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[ Debug  ] l1.isInstanceOf[Cons] || ++[B](++[B](l1, l2), l3) == ++[B](l1, ++[B](l2, l3))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 562 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTwoListsConcatAssociativity @334:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTwoListsConcatAssociativity @334:5...
[  Info  ] Verified: 563 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @334:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTwoListsConcatAssociativity @334:5...
[  Info  ] Verified: 564 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for reverseList @30:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for reverseList @30:5...
[  Info  ] Verified: 565 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for reverseList @31:28...
[ Debug  ] Cache hit: 'measure decreases' VC for reverseList @31:28...
[  Info  ] Verified: 566 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for reverseList @30:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for reverseList @30:5...
[  Info  ] Verified: 567 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[ Debug  ] Cache miss: 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[ Debug  ]  - Now solving 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || l.isInstanceOf[Nil] || p != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57:
[ Debug  ]  => VALID
[  Info  ] Verified: 568 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[ Debug  ] Cache miss: 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[ Debug  ]  - Now solving 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || l.isInstanceOf[Nil] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66:
[ Debug  ]  => VALID
[  Info  ] Verified: 569 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || l.isInstanceOf[Nil] || {
[ Debug  ]   val p: List[B] = tail[B](p)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p, l) || isPrefix[B](p, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 570 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[ Debug  ] !isPrefix[B](p, l) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25:
[ Debug  ]  => VALID
[  Info  ] Verified: 571 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[ Debug  ] !isPrefix[B](p, l) || !p.isInstanceOf[Nil] || size[B](p) <= size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26:
[ Debug  ]  => VALID
[  Info  ] Verified: 572 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || !l.isInstanceOf[Nil] || size[B](p) <= size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26:
[ Debug  ]  => VALID
[  Info  ] Verified: 573 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || l.isInstanceOf[Nil] || isPrefix[B](tail[B](p), tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26:
[ Debug  ]  => VALID
[  Info  ] Verified: 574 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || l.isInstanceOf[Nil] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](tail[B](p), l) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 575 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Nil] || l.isInstanceOf[Nil] || {
[ Debug  ]   val p: List[B] = tail[B](p)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p, l) || {
[ Debug  ]     val res: Unit = lemmaIsPrefixThenSmallerEqSize[B](p, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(size[B](p) <= size[B](l))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](p) <= size[B](l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26:
[ Debug  ]  => VALID
[  Info  ] Verified: 576 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] Cache miss: 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ]  - Now solving 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || l2 != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 577 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[ Debug  ] Cache miss: 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[ Debug  ]  - Now solving 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || l2 != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58:
[ Debug  ]  => VALID
[  Info  ] Verified: 578 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) != size[B](l2) || size[B](l1.t) > BigInt("1") || content[B](l1.t) == content[B](l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 579 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) != size[B](l2) || size[B](l1.t) > BigInt("1") || size[B](l1.t) == size[B](l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 580 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) != size[B](l2) || size[B](l1.t) > BigInt("1") || size[B](l1.t) <= BigInt("1")
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 581 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || !l1.isInstanceOf[Nil] || isEmpty[B](l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 582 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) == l1.h
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 583 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || isEmpty[B](l1.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 584 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || size[B](l1) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 585 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || !l1.isInstanceOf[Nil] || !isEmpty[B](l2) || l1 == l2
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 586 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || content[B](l1.t) == content[B](tail[B](l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 587 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) == size[B](l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 588 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) != size[B](l2) || size[B](l1.t) <= BigInt("1")
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 589 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) != size[B](l2) || size[B](l1.t) > BigInt("1") || size[B](l1.t) < size[B](l1)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 590 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || l1.isInstanceOf[Nil] || head[B](l2) != l1.h || !isEmpty[B](l1.t) || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   content[B](l1.t) != content[B](l2) || size[B](l1.t) != size[B](l2) || size[B](l1.t) > BigInt("1") || {
[ Debug  ]     val res: Unit = lemmaSameContentSameSizeSmallerEqOneSameList[B](l1.t, l2)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(l1.t == l2)
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     l1 == l2
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 591 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] content[B](l1) != content[B](l2) || size[B](l1) != size[B](l2) || size[B](l1) > BigInt("1") || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 592 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[  Info  ] Verified: 593 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 594 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 595 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubseqOfEmptyIsEmpty @628:44...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubseqOfEmptyIsEmpty @628:44...
[  Info  ] Verified: 596 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 597 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 598 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 599 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 600 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 601 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || !content[B](l1).subsetOf(content[B](l2)) || content[B](l1).subsetOf(content[B](l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 602 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !content[B](l2).subsetOf(content[B](l1)) || content[B](l2).subsetOf(content[B](l1))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 603 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     !noDuplicate[B](l1) || noDuplicate[B](l1)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 604 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     !noDuplicate[B](l1) || !contains[B](l1, l2.h) || noDuplicate[B](l1)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 605 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     !noDuplicate[B](l1) || !contains[B](l1, l2.h) || contains[B](l1, l2.h)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 606 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || !forall[B](l1, (b: B) => contains[B](l2, b)) || forall[B](l1, (b: B) => contains[B](l2, b))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 607 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || !forall[B](newL1, (e: B) => contains[B](l2, e)) || !noDuplicate[B](newL1) || forall[B](newL1, (e: B) => contains[B](l2, e))
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 608 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || !forall[B](newL1, (e: B) => contains[B](l2, e)) || !noDuplicate[B](newL1) || !forall[B](newL1, (e: B) => contains[B](l2, e)) || noDuplicate[B](newL1)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 609 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || contains[B](newL1, l2.h) || l2RemHd != -[B](l2, l2.h) || forall[B](newL1, (bb: B) => contains[B](l2, bb))
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 610 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || contains[B](newL1, l2.h) || l2RemHd != -[B](l2, l2.h) || !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || true
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 611 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || contains[B](newL1, l2.h) || l2RemHd != -[B](l2, l2.h) || !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || l2RemHd == -[B](l2, l2.h)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 612 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           !forall[B](newL1, (e: B) => contains[B](l2RemHd, e)) || !noDuplicate[B](newL1) || forall[B](newL1, (e: B) => contains[B](l2RemHd, e))
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 613 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           !forall[B](newL1, (e: B) => contains[B](l2RemHd, e)) || !noDuplicate[B](newL1) || !forall[B](newL1, (e: B) => contains[B](l2RemHd, e)) || noDuplicate[B](newL1)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 614 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || !contains[B](l2.t, l2.h) || contains[B](l2.t, l2.h)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 615 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache miss: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ]  - Now solving 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || {
[ Debug  ]             val t: Unit = if (contains[B](l2.t, l2.h)) {
[ Debug  ]               val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]               val tmp: Unit = {
[ Debug  ]                 assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]                 res
[ Debug  ]               }
[ Debug  ]               assume(false)
[ Debug  ]               ()
[ Debug  ]             } else {
[ Debug  ]               ()
[ Debug  ]             }
[ Debug  ]             noDuplicate[B](newL1)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 616 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache miss: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ]  - Now solving 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || {
[ Debug  ]             val t: Unit = if (contains[B](l2.t, l2.h)) {
[ Debug  ]               val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]               val tmp: Unit = {
[ Debug  ]                 assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]                 res
[ Debug  ]               }
[ Debug  ]               assume(false)
[ Debug  ]               ()
[ Debug  ]             } else {
[ Debug  ]               ()
[ Debug  ]             }
[ Debug  ]             !noDuplicate[B](newL1) || size[B](newL1) == size[B](l2.t)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 617 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache miss: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ]  - Now solving 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || {
[ Debug  ]             val t: Unit = if (contains[B](l2.t, l2.h)) {
[ Debug  ]               val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]               val tmp: Unit = {
[ Debug  ]                 assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]                 res
[ Debug  ]               }
[ Debug  ]               assume(false)
[ Debug  ]               ()
[ Debug  ]             } else {
[ Debug  ]               ()
[ Debug  ]             }
[ Debug  ]             !noDuplicate[B](newL1) || size[B](newL1) != size[B](l2.t) || content[B](newL1) == content[B](l2.t)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 618 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   forall[B](l1, (b: B) => contains[B](l2, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12:
[ Debug  ]  => VALID
[  Info  ] Verified: 619 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || forall[B](l2, (b: B) => contains[B](l1, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12:
[ Debug  ]  => VALID
[  Info  ] Verified: 620 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || contains[B](l1, l2.h)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 621 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) >= size[B](l1)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 622 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       forall[B](newL1, (b: B) => contains[B](l2, b))
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 623 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) >= size[B](newL1)
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 624 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || !contains[B](newL1, l2.h)
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 625 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || noDuplicate[B](newL1)
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 626 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || forall[B](newL1, (b: B) => contains[B](l2, b))
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 627 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) >= size[B](newL1)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 628 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || !contains[B](l2.t, l2.h) || {
[ Debug  ]             val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]             val tmp: Unit = {
[ Debug  ]               assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]               res
[ Debug  ]             }
[ Debug  ]             size[B](-[B](l2.t, l2.h)) < size[B](l2.t)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 629 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || !contains[B](l2.t, l2.h) || {
[ Debug  ]             val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]             val tmp: Unit = {
[ Debug  ]               assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]               res
[ Debug  ]             }
[ Debug  ]             size[B](-[B](l2.t, l2.h)) >= size[B](l2.t) || size[B](-[B](l2, l2.h)) < size[B](l2.t)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 630 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || !contains[B](l2.t, l2.h) || {
[ Debug  ]             val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]             val tmp: Unit = {
[ Debug  ]               assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]               res
[ Debug  ]             }
[ Debug  ]             size[B](-[B](l2.t, l2.h)) >= size[B](l2.t) || size[B](-[B](l2, l2.h)) >= size[B](l2.t) || size[B](-[B](l2, l2.h)) < size[B](newL1)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18:
[ Debug  ]  => VALID
[  Info  ] Verified: 631 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || ListPrimitiveSize[B](l2) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37:
[ Debug  ]  => VALID
[  Info  ] Verified: 632 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || content[B](l1).subsetOf(content[B](l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 633 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   content[B](l2).subsetOf(content[B](l1))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 634 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || !l2.isInstanceOf[Nil] || noDuplicate[B](l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 635 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     noDuplicate[B](l1)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 636 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     noDuplicate[B](l1)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 637 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     !noDuplicate[B](l1) || contains[B](l1, l2.h)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 638 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || forall[B](l1, (b: B) => contains[B](l2, b))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 639 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || forall[B](newL1, (e: B) => contains[B](l2, e))
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 640 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || !forall[B](newL1, (e: B) => contains[B](l2, e)) || noDuplicate[B](newL1)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 641 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           forall[B](newL1, (bb: B) => contains[B](l2, bb))
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 642 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || !contains[B](newL1, l2.h)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 643 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           !forall[B](newL1, (bb: B) => contains[B](l2, bb)) || contains[B](newL1, l2.h) || l2RemHd == -[B](l2, l2.h)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 644 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           forall[B](newL1, (b: B) => contains[B](l2RemHd, b))
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 645 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           forall[B](newL1, (e: B) => contains[B](l2RemHd, e))
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 646 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           !forall[B](newL1, (e: B) => contains[B](l2RemHd, e)) || noDuplicate[B](newL1)
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 647 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaNoDuplicatePreservedSameContent @1091:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaNoDuplicatePreservedSameContent @1091:11...
[  Info  ] Verified: 648 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || !contains[B](l2.t, l2.h) || {
[ Debug  ]             val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]             val tmp: Unit = {
[ Debug  ]               assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]               res
[ Debug  ]             }
[ Debug  ]             size[B](-[B](l2.t, l2.h)) >= size[B](l2.t) || size[B](-[B](l2, l2.h)) >= size[B](l2.t) || true
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 649 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || {
[ Debug  ]             val t: Unit = if (contains[B](l2.t, l2.h)) {
[ Debug  ]               val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]               val tmp: Unit = {
[ Debug  ]                 assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]                 res
[ Debug  ]               }
[ Debug  ]               assume(false)
[ Debug  ]               ()
[ Debug  ]             } else {
[ Debug  ]               ()
[ Debug  ]             }
[ Debug  ]             ListPrimitiveSize[B](l2.t) < ListPrimitiveSize[B](l2)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 650 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || l2.isInstanceOf[Nil] || !contains[B](l1, l2.h) || {
[ Debug  ]     val newL1: List[B] = -[B](l1, l2.h)
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(noDuplicate[B](-[B](l1, l2.h)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l1, l2.h)
[ Debug  ]     val tmp: Unit = {
[ Debug  ]       assume(isEmpty[B](l1) || size[B](-[B](l1, l2.h)) == size[B](l1) - BigInt("1"))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     size[B](l2) < size[B](l1) || {
[ Debug  ]       val res: Unit = lemmaForallContainsPreservedRemoveElmt[B](l1, l2, l2.h)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(forall[B](-[B](l1, l2.h), (b: B) => contains[B](l2, b)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]         val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2, newL1)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](newL1) <= size[B](l2))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l2) < size[B](newL1) || contains[B](newL1, l2.h) || !noDuplicate[B](newL1) || !forall[B](newL1, (b: B) => contains[B](l2, b)) || {
[ Debug  ]           val l2RemHd: List[B] = -[B](l2, l2.h)
[ Debug  ]           val res: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](newL1, l2, l2RemHd, l2.h)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (bb: B) => contains[B](l2RemHd, bb)))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(forall[B](newL1, (b: B) => contains[B](l2RemHd, b)))
[ Debug  ]             ()
[ Debug  ]           }
[ Debug  ]           val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](l2RemHd, newL1)
[ Debug  ]           val tmp: Unit = {
[ Debug  ]             assume(size[B](newL1) <= size[B](l2RemHd))
[ Debug  ]             res
[ Debug  ]           }
[ Debug  ]           size[B](-[B](l2, l2.h)) < size[B](newL1) || {
[ Debug  ]             val t: Unit = if (contains[B](l2.t, l2.h)) {
[ Debug  ]               val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l2.t, l2.h)
[ Debug  ]               val tmp: Unit = {
[ Debug  ]                 assume(size[B](-[B](l2.t, l2.h)) < size[B](l2.t))
[ Debug  ]                 res
[ Debug  ]               }
[ Debug  ]               assume(false)
[ Debug  ]               ()
[ Debug  ]             } else {
[ Debug  ]               ()
[ Debug  ]             }
[ Debug  ]             val res: Unit = lemmaNoDuplicatePreservedSameContent[B](newL1, l2.t)
[ Debug  ]             noDuplicate[B](l2)
[ Debug  ]           }
[ Debug  ]         }
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 651 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[ Debug  ] !noDuplicate[B](l1) || size[B](l1) != size[B](l2) || content[B](l1) != content[B](l2) || {
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l1, l2)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l1, (b: B) => contains[B](l2, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val res: Unit = lemmaSubsetContentThenForallContains[B](l2, l1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(forall[B](l2, (b: B) => contains[B](l1, b)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !forall[B](l1, (b: B) => contains[B](l2, b)) || !forall[B](l2, (b: B) => contains[B](l1, b)) || true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 652 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 653 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContainsSubset[B](lIn, l))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @822:9...
[ Debug  ] Cache hit: 'precond. (call forallContainsSubset[B](lIn, l))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @822:9...
[  Info  ] Verified: 654 / 982
[ Debug  ]  - Checking cache: 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[ Debug  ] Cache miss: 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[ Debug  ]  - Now solving 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || content[B](lIn.t).subsetOf(content[B](newList))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 655 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       !forall[B](lIn.t, (e: B) => contains[B](newList, e)) || !noDuplicate[B](lIn.t) || forall[B](lIn.t, (e: B) => contains[B](newList, e))
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 656 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       !forall[B](lIn.t, (e: B) => contains[B](newList, e)) || !noDuplicate[B](lIn.t) || !forall[B](lIn.t, (e: B) => contains[B](newList, e)) || noDuplicate[B](lIn.t)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 657 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) > size[B](newList) || size[B](lIn.t) + BigInt("1") != size[B](lIn) || !contains[B](l, lIn.h) || content[B](newList) != content[B](l) \\ Set(lIn.h) || contains[B](l, lIn.h)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 658 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @823:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @823:16...
[  Info  ] Verified: 659 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @824:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @824:16...
[  Info  ] Verified: 660 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || content[B](-[B](l, lIn.h)) == content[B](l) \\ Set(lIn.h)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 661 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) <= size[B](newList)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 662 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) > size[B](newList) || size[B](lIn.t) + BigInt("1") == size[B](lIn)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 663 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) > size[B](newList) || size[B](lIn.t) + BigInt("1") != size[B](lIn) || contains[B](l, lIn.h)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 664 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) > size[B](newList) || size[B](lIn.t) + BigInt("1") != size[B](lIn) || !contains[B](l, lIn.h) || content[B](newList) == content[B](l) \\ Set(lIn.h)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 665 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) > size[B](newList) || size[B](lIn.t) + BigInt("1") != size[B](lIn) || !contains[B](l, lIn.h) || content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]         val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l, lIn.h)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](-[B](l, lIn.h)) < size[B](l))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l) > size[B](newList)
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 666 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || size[B](lIn) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 667 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       forall[B](lIn.t, (e: B) => contains[B](newList, e))
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 668 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       !forall[B](lIn.t, (e: B) => contains[B](newList, e)) || noDuplicate[B](lIn.t)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 669 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       !forall[B](lIn.t, (e: B) => contains[B](newList, e)) || !noDuplicate[B](lIn.t) || size[B](lIn.t) < size[B](lIn)
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 670 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @833:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @833:9...
[  Info  ] Verified: 671 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || !lIn.isInstanceOf[Cons] || {
[ Debug  ]   val tmp: Unit = forallContainsSubset[B](lIn, l)
[ Debug  ]   !content[B](lIn).subsetOf(content[B](l)) || contains[B](lIn.t, lIn.h) || {
[ Debug  ]     val newList: List[B] = -[B](l, lIn.h)
[ Debug  ]     content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]       val tmp: Unit = subsetContains[B](lIn.t, newList)
[ Debug  ]       val res: Unit = lemmaForallContainsAndNoDuplicateThenSmallerList[B](newList, lIn.t)
[ Debug  ]       val tmp: Unit = {
[ Debug  ]         assume(size[B](lIn.t) <= size[B](newList))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       size[B](lIn.t) > size[B](newList) || size[B](lIn.t) + BigInt("1") != size[B](lIn) || !contains[B](l, lIn.h) || content[B](newList) != content[B](l) \\ Set(lIn.h) || {
[ Debug  ]         val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l, lIn.h)
[ Debug  ]         val tmp: Unit = {
[ Debug  ]           assume(size[B](-[B](l, lIn.h)) < size[B](l))
[ Debug  ]           res
[ Debug  ]         }
[ Debug  ]         size[B](l) <= size[B](newList) || size[B](lIn) <= size[B](l)
[ Debug  ]       }
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 672 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[ Debug  ] !forall[B](lIn, (e: B) => contains[B](l, e)) || !noDuplicate[B](lIn) || lIn.isInstanceOf[Cons] || size[B](lIn) <= size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 673 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[  Info  ] Verified: 674 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[  Info  ] Verified: 675 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || !l.isInstanceOf[Cons] || forall[B](l.t, (bb: B) => contains[B](lRef, bb))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 676 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || !l.isInstanceOf[Cons] || !forall[B](l.t, (bb: B) => contains[B](lRef, bb)) || !contains[B](l.t, b)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 677 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || !l.isInstanceOf[Cons] || !forall[B](l.t, (bb: B) => contains[B](lRef, bb)) || contains[B](l.t, b) || newLRef == -[B](lRef, b)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 678 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66:
[ Debug  ]  => VALID
[  Info  ] Verified: 679 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || !l.isInstanceOf[Cons] || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 680 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaForallContainsPreservedRemoveElmtInRefList[B](l.t, lRef, newLRef, b)
[ Debug  ]   forall[B](l, (bb: B) => contains[B](newLRef, bb))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 681 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || l.isInstanceOf[Cons] || forall[B](l, (bb: B) => contains[B](newLRef, bb))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 682 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] !forall[B](l, (bb: B) => contains[B](lRef, bb)) || contains[B](l, b) || newLRef != -[B](lRef, b) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 683 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 684 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 685 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubsetContentThenForallContains @1119:55...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubsetContentThenForallContains @1119:55...
[  Info  ] Verified: 686 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 687 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 688 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 689 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 690 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 691 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] !contains[B](l, e) || !l.isInstanceOf[Cons] || l.h != e || -[B](l, e) != -[B](l.t, e) || !contains[B](l.t, e) || contains[B](l.t, e)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 692 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 693 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[ Debug  ] !contains[B](l, e) || !l.isInstanceOf[Cons] || l.h != e || -[B](l, e) == -[B](l.t, e)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 694 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveElmtContainedSizeSmaller @999:30...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveElmtContainedSizeSmaller @999:30...
[  Info  ] Verified: 695 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[  Info  ] Verified: 696 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] !contains[B](l, e) || !l.isInstanceOf[Cons] || l.h != e || -[B](l, e) != -[B](l.t, e) || !contains[B](l.t, e) || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 697 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] !contains[B](l, e) || !l.isInstanceOf[Cons] || l.h != e || -[B](l, e) != -[B](l.t, e) || !contains[B](l.t, e) || {
[ Debug  ]   val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l.t, e)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(size[B](-[B](l.t, e)) < size[B](l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   size[B](-[B](l, e)) < size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 698 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[ Debug  ] !contains[B](l, e) || !l.isInstanceOf[Cons] || l.h != e || -[B](l, e) != -[B](l.t, e) || contains[B](l.t, e) || size[B](-[B](l, e)) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10:
[ Debug  ]  => VALID
[  Info  ] Verified: 699 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[  Info  ] Verified: 700 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 701 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] !contains[B](l, e) || l.isInstanceOf[Cons] && l.h == e || !l.isInstanceOf[Cons] || !contains[B](l.t, e) || {
[ Debug  ]   val res: Unit = lemmaRemoveElmtContainedSizeSmaller[B](l.t, e)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(size[B](-[B](l.t, e)) < size[B](l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   size[B](-[B](l, e)) < size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 702 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[  Info  ] Verified: 703 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] !contains[B](l, e) || l.isInstanceOf[Cons] && l.h == e || l.isInstanceOf[Cons] || {
[ Debug  ]   val prop: Boolean = false
[ Debug  ]   !prop || {
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(prop)
[ Debug  ]       ()
[ Debug  ]     }
[ Debug  ]     size[B](-[B](l, e)) < size[B](l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 704 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[  Info  ] Verified: 705 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[  Info  ] Verified: 706 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 707 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 708 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 709 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1014:44...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1014:44...
[  Info  ] Verified: 710 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[ Debug  ] !noDuplicate[B](l) || !contains[B](l, b) || !l.isInstanceOf[Nil] || isEmpty[B](l) || size[B](-[B](l, b)) == size[B](l) - BigInt("1")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39:
[ Debug  ]  => VALID
[  Info  ] Verified: 711 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[  Info  ] Verified: 712 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] !noDuplicate[B](l) || !contains[B](l, b) || l.isInstanceOf[Nil] || l.h != b || contains[B](l.t, b) || {
[ Debug  ]   val res: Unit = lemmaRemoveOneElmtNotContainedSameList[B](l.t, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(-[B](l.t, b) == l.t)
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](l) || size[B](-[B](l, b)) == size[B](l) - BigInt("1")
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39:
[ Debug  ]  => VALID
[  Info  ] Verified: 713 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 714 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 715 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 716 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] !noDuplicate[B](l) || !contains[B](l, b) || l.isInstanceOf[Nil] || l.h == b || !noDuplicate[B](l.t) || !contains[B](l.t, b) || {
[ Debug  ]   val res: Unit = lemmaRemoveOneElmtNoDuplicateSizeMinusOne[B](l.t, b)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](l.t) || size[B](-[B](l.t, b)) == size[B](l.t) - BigInt("1"))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](l) || size[B](-[B](l, b)) == size[B](l) - BigInt("1")
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39:
[ Debug  ]  => VALID
[  Info  ] Verified: 717 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[  Info  ] Verified: 718 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[  Info  ] Verified: 719 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 720 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtNotContainedSameList @1105:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtNotContainedSameList @1105:57...
[  Info  ] Verified: 721 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 722 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] contains[B](l, b) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaRemoveOneElmtNotContainedSameList[B](l.t, b)
[ Debug  ]   -[B](l, b) == l
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 723 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] contains[B](l, b) || l.isInstanceOf[Cons] || -[B](l, b) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 724 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 725 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 726 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 727 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1112:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1112:57...
[  Info  ] Verified: 728 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 729 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] !noDuplicate[B](l) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaRemoveOneElmtPreservesNoDuplicate[B](l.t, b)
[ Debug  ]   noDuplicate[B](-[B](l, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 730 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] !noDuplicate[B](l) || l.isInstanceOf[Cons] || noDuplicate[B](-[B](l, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 731 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 732 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 733 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaContainsAndNotHdThenTlContains @182:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaContainsAndNotHdThenTlContains @182:13...
[  Info  ] Verified: 734 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaContainsAndNotHdThenTlContains @184:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaContainsAndNotHdThenTlContains @184:15...
[  Info  ] Verified: 735 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaContainsAndNotHdThenTlContains @180:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaContainsAndNotHdThenTlContains @180:7...
[  Info  ] Verified: 736 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 737 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 738 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 739 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @651:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfListBis @651:28...
[  Info  ] Verified: 740 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @652:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfListBis @652:28...
[  Info  ] Verified: 741 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfListBis @650:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfListBis @650:5...
[  Info  ] Verified: 742 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @650:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfListBis @650:5...
[  Info  ] Verified: 743 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[ Debug  ] Cache miss: 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[ Debug  ]  - Now solving 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[ Debug  ] l.isInstanceOf[Nil] || l.h != elmt || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l, l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !isEmpty[B](l) && subseq[B](l, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 744 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[ Debug  ] Cache miss: 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[ Debug  ]  - Now solving 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[ Debug  ] l.isInstanceOf[Nil] || l.h != elmt || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l, l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val tmp: Unit = subseqTail[B](l, l)
[ Debug  ]   subseq[B](l.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion' VC for lemmaTailIsSubseqOfList @641:16:
[ Debug  ]  => VALID
[  Info  ] Verified: 745 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @637:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @637:21...
[  Info  ] Verified: 746 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[ Debug  ] l.isInstanceOf[Nil] || l.h != elmt || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(subseq[B](l, l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   val tmp: Unit = subseqTail[B](l, l)
[ Debug  ]   !subseq[B](l.t, l) || subseq[B](l, Cons[B](elmt, l))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaTailIsSubseqOfList @641:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 747 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[ Debug  ] l.isInstanceOf[Nil] || l.h == elmt || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l, l))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l, Cons[B](elmt, l))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaTailIsSubseqOfList @643:42:
[ Debug  ]  => VALID
[  Info  ] Verified: 748 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfList @636:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfList @636:5...
[  Info  ] Verified: 749 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @636:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfList @636:5...
[  Info  ] Verified: 750 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for consecutiveSubseq @61:49...
[ Debug  ] Cache hit: 'non-negative measure' VC for consecutiveSubseq @61:49...
[  Info  ] Verified: 751 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for consecutiveSubseq @60:46...
[ Debug  ] Cache hit: 'measure decreases' VC for consecutiveSubseq @60:46...
[  Info  ] Verified: 752 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for consecutiveSubseq @58:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for consecutiveSubseq @58:5...
[  Info  ] Verified: 753 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for consecutiveSubseqAtHead @67:6...
[ Debug  ] Cache hit: 'non-negative measure' VC for consecutiveSubseqAtHead @67:6...
[  Info  ] Verified: 754 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for consecutiveSubseqAtHead @70:9...
[ Debug  ] Cache hit: 'measure decreases' VC for consecutiveSubseqAtHead @70:9...
[  Info  ] Verified: 755 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[ Debug  ] !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54:
[ Debug  ]  => VALID
[  Info  ] Verified: 756 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || isPrefix[B](p.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 757 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @403:27...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @403:27...
[  Info  ] Verified: 758 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || isPrefix[B](p.t, tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 759 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 760 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p.t, l) || {
[ Debug  ]     val res: Unit = lemmaPrefixStaysPrefixWhenAddingToSuffix[B](p.t, l, suffix)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](p.t, ++[B](l, suffix)))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     isPrefix[B](p, ++[B](l, suffix))
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 761 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[ Debug  ] !isPrefix[B](p, l) || p.isInstanceOf[Cons] || isPrefix[B](p, ++[B](l, suffix))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 762 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] !isPrefix[B](p, l) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 763 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[  Info  ] Verified: 764 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallThenDisjunction2[B]((scrut...)' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallThenDisjunction2[B]((scrut...)' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 765 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallThenDisjunction2 @785:46...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallThenDisjunction2 @785:46...
[  Info  ] Verified: 766 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 767 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 768 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 769 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 770 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 771 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @242:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @242:13...
[  Info  ] Verified: 772 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:13...
[  Info  ] Verified: 773 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:31...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:31...
[  Info  ] Verified: 774 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @245:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @245:15...
[  Info  ] Verified: 775 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @235:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @235:7...
[  Info  ] Verified: 776 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B]((scrut.t): @DropVCs , e))' VC for getIndex @51:43...
[ Debug  ] Cache hit: 'precond. (call getIndex[B]((scrut.t): @DropVCs , e))' VC for getIndex @51:43...
[  Info  ] Verified: 777 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for getIndex @49:5...
[  Info  ] Verified: 778 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @50:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @50:39...
[  Info  ] Verified: 779 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getIndex @51:43...
[ Debug  ] Cache hit: 'measure decreases' VC for getIndex @51:43...
[  Info  ] Verified: 780 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @51:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @51:39...
[  Info  ] Verified: 781 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @52:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @52:39...
[  Info  ] Verified: 782 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getIndex @49:5...
[  Info  ] Verified: 783 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @49:5...
[  Info  ] Verified: 784 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))' VC for lemmaIsSuffixThenSubseq @?:?...
[  Info  ] Verified: 785 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[ Debug  ] !isSuffix[B](l1, l2) || size[B](l1) + size[B](l2) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 786 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenSubseq' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenSubseq' VC for lemmaIsSuffixThenSubseq @101:56...
[  Info  ] Verified: 787 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] !isSuffix[B](l1, l2) || !l2.isInstanceOf[Cons] || size[B](l1) >= size[B](l2) || !isSuffix[B](l1, l2.t) || size[B](l1) + size[B](l2.t) < size[B](l1) + size[B](l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 788 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] !isSuffix[B](l1, l2) || !l2.isInstanceOf[Cons] || size[B](l1) >= size[B](l2) || !isSuffix[B](l1, l2.t) || {
[ Debug  ]   val res: Unit = lemmaIsSuffixThenSubseq[B](l1, l2.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l2.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56:
[ Debug  ]  => VALID
[  Info  ] Verified: 789 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[ Debug  ] !isSuffix[B](l1, l2) || l2.isInstanceOf[Cons] && size[B](l1) < size[B](l2) || l1 != l2 || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l1)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l1, l1))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l1, l2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56:
[ Debug  ]  => VALID
[  Info  ] Verified: 790 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[ Debug  ] !isSuffix[B](l1, l2) || l2.isInstanceOf[Cons] && size[B](l1) < size[B](l2) || l1 == l2 || subseq[B](l1, l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56:
[ Debug  ]  => VALID
[  Info  ] Verified: 791 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || !l.isInstanceOf[Cons] || forall[B](l.t, (b: B) => !contains[B](l12, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 792 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || !l.isInstanceOf[Cons] || !forall[B](l.t, (b: B) => !contains[B](l12, b)) || l12 == ++[B](l1, l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 793 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50:
[ Debug  ]  => VALID
[  Info  ] Verified: 794 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || !l.isInstanceOf[Cons] || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 795 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaForallNotContainsForConcat[B](l.t, l12, l1, l2)
[ Debug  ]   forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 796 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || l.isInstanceOf[Cons] || forall[B](l, (b: B) => !contains[B](++[B](l1, l2), b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 797 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] !forall[B](l, (b: B) => !contains[B](l12, b)) || l12 != ++[B](l1, l2) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 798 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 799 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 800 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 801 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 802 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreserves @1037:35...
[ Debug  ] Cache hit: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreserves @1037:35...
[  Info  ] Verified: 803 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 804 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 805 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 806 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 807 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache miss: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ]  - Now solving 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || !lB.isInstanceOf[Cons] || !noDuplicate[B](lB.t) || !forall[B](lB.t, (b: B) => !contains[B](l, b)) || {
[ Debug  ]   val res: Unit = noDuplicateConcatListNotContainedPreserves[B](l, lB.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(noDuplicate[B](++[B](lB.t, l)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   noDuplicate[B](++[B](lB, l))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 808 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[ Debug  ] Cache miss: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[ Debug  ]  - Now solving 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[ Debug  ] !noDuplicate[B](l) || !noDuplicate[B](lB) || !forall[B](lB, (b: B) => !contains[B](l, b)) || lB.isInstanceOf[Cons] || noDuplicate[B](++[B](lB, l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 809 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[  Info  ] Verified: 810 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[  Info  ] Verified: 811 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[ Debug  ] Cache miss: 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[ Debug  ]  - Now solving 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || !l.isInstanceOf[Cons] || tot != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64:
[ Debug  ]  => VALID
[  Info  ] Verified: 812 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   !isPrefix[B](++[B](l.t, Cons[B](elmt, Nil[B]())), tot) || isPrefix[B](++[B](l.t, Cons[B](elmt, Nil[B]())), tot)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 813 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24:
[ Debug  ]  => VALID
[  Info  ] Verified: 814 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || !l.isInstanceOf[Cons] || isPrefix[B](++[B](l.t, Cons[B](elmt, Nil[B]())), tail[B](tot))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 815 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || !l.isInstanceOf[Cons] || !isPrefix[B](++[B](l.t, Cons[B](elmt, Nil[B]())), tail[B](tot)) || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 816 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val tot: List[B] = tail[B](tot)
[ Debug  ]   !isPrefix[B](++[B](l.t, Cons[B](elmt, Nil[B]())), tot) || {
[ Debug  ]     val res: Unit = lemmaRemoveLastConcatenatedPrefixStillPrefix[B](l.t, elmt, tot)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](l.t, tot))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     isPrefix[B](l, tot)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 817 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || l.isInstanceOf[Cons] || isPrefix[B](l, tot)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 818 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] !isPrefix[B](++[B](l, Cons[B](elmt, Nil[B]())), tot) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 819 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[  Info  ] Verified: 820 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 821 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmt @894:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmt @894:57...
[  Info  ] Verified: 822 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 823 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] !forall[B](l, (b: B) => contains[B](lRef, b)) || !l.isInstanceOf[Cons] || {
[ Debug  ]   val inductVal: Unit = lemmaForallContainsPreservedRemoveElmt[B](l.t, lRef, b)
[ Debug  ]   forall[B](-[B](l, b), (b: B) => contains[B](lRef, b))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 824 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] !forall[B](l, (b: B) => contains[B](lRef, b)) || l.isInstanceOf[Cons] || forall[B](-[B](l, b), (b: B) => contains[B](lRef, b))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 825 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 826 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 827 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubseqRefl @619:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubseqRefl @619:15...
[  Info  ] Verified: 828 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @621:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqRefl @621:28...
[  Info  ] Verified: 829 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubseqRefl @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaSubseqRefl @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaSubseqRefl @?:?...
[ Debug  ] l.isInstanceOf[Nil] || size[B](l.t) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaSubseqRefl @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 830 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @622:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubseqRefl @622:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaSubseqRefl @622:28...
[ Debug  ] l.isInstanceOf[Nil] || {
[ Debug  ]   val res: Unit = lemmaSubseqRefl[B](l.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(subseq[B](l.t, l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   subseq[B](l, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaSubseqRefl @622:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 831 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubseqRefl @620:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaSubseqRefl @620:5...
[  Info  ] Verified: 832 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @620:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubseqRefl @620:5...
[  Info  ] Verified: 833 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 834 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[  Info  ] Verified: 835 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ]  - Now solving 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] isEmpty[B](l) || l.isInstanceOf[Cons] && l.t.isInstanceOf[Nil] || !l.isInstanceOf[Cons] || isEmpty[B](l.t) || {
[ Debug  ]   val res: Unit = lemmaRemoveLastFromLMakesItPrefix[B](l.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isPrefix[B](removeLast[B](l.t), l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24:
[ Debug  ]  => VALID
[  Info  ] Verified: 836 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 837 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastFromLMakesItPrefix @459:39...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastFromLMakesItPrefix @459:39...
[  Info  ] Verified: 838 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[ Debug  ] isEmpty[B](l) || !l.isInstanceOf[Cons] || !l.t.isInstanceOf[Nil] || isPrefix[B](removeLast[B](l), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 839 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[  Info  ] Verified: 840 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[  Info  ] Verified: 841 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] isEmpty[B](l) || l.isInstanceOf[Cons] && l.t.isInstanceOf[Nil] || !l.isInstanceOf[Cons] || isEmpty[B](l.t) || {
[ Debug  ]   val res: Unit = lemmaRemoveLastFromLMakesItPrefix[B](l.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isPrefix[B](removeLast[B](l.t), l.t))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isPrefix[B](removeLast[B](l), l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 842 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[  Info  ] Verified: 843 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] isEmpty[B](l) || l.isInstanceOf[Cons] && l.t.isInstanceOf[Nil] || l.isInstanceOf[Cons] || isPrefix[B](removeLast[B](l), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 844 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 845 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B]((scrut.t): @DropVCs ))' VC for removeLast @23:40...
[ Debug  ] Cache hit: 'precond. (call removeLast[B]((scrut.t): @DropVCs ))' VC for removeLast @23:40...
[  Info  ] Verified: 846 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ]  - Now solving 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] isEmpty[B](l) || l.isInstanceOf[Cons] && l.t.isInstanceOf[Nil] || !l.isInstanceOf[Cons] || {
[ Debug  ]   val res: List[B] = Cons[B](l.h, removeLast[B](l.t))
[ Debug  ]   true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call last[B](l))' VC for removeLast @26:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 847 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 848 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for removeLast @26:45...
[ Debug  ] Cache hit: 'non-negative measure' VC for removeLast @26:45...
[  Info  ] Verified: 849 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @22:31...
[ Debug  ] Cache miss: 'postcondition' VC for removeLast @22:31...
[ Debug  ]  - Now solving 'postcondition' VC for removeLast @22:31...
[ Debug  ] isEmpty[B](l) || !l.isInstanceOf[Cons] || !l.t.isInstanceOf[Nil] || ++[B](Nil[B](), Cons[B](last[B](l), Nil[B]())) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for removeLast @22:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 850 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeLast @23:40...
[ Debug  ] Cache hit: 'measure decreases' VC for removeLast @23:40...
[  Info  ] Verified: 851 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @23:31...
[ Debug  ] Cache miss: 'postcondition' VC for removeLast @23:31...
[ Debug  ]  - Now solving 'postcondition' VC for removeLast @23:31...
[ Debug  ] isEmpty[B](l) || l.isInstanceOf[Cons] && l.t.isInstanceOf[Nil] || !l.isInstanceOf[Cons] || ++[B](Cons[B](l.h, removeLast[B](l.t)), Cons[B](last[B](l), Nil[B]())) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for removeLast @23:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 852 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for removeLast @21:24...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for removeLast @21:24...
[  Info  ] Verified: 853 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @21:24...
[ Debug  ] Cache miss: 'postcondition' VC for removeLast @21:24...
[ Debug  ]  - Now solving 'postcondition' VC for removeLast @21:24...
[ Debug  ] isEmpty[B](l) || l.isInstanceOf[Cons] && l.t.isInstanceOf[Nil] || l.isInstanceOf[Cons] || ++[B](stainless.lang.error[List[B]]("match exhaustiveness"), Cons[B](last[B](l), Nil[B]())) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for removeLast @21:24:
[ Debug  ]  => VALID
[  Info  ] Verified: 854 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallThenDisjunction1[B]((scrut...)' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallThenDisjunction1[B]((scrut...)' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 855 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallThenDisjunction1 @791:46...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallThenDisjunction1 @791:46...
[  Info  ] Verified: 856 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 857 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 858 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 859 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 860 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 861 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[  Info  ] Verified: 862 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] !l.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaGetSuffixOnListWithItSelfIsEmpty[B](l.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](getSuffix[B](l.t, l.t)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   size[B](l) >= size[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 863 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] !l.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaGetSuffixOnListWithItSelfIsEmpty[B](l.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](getSuffix[B](l.t, l.t)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   size[B](l) < size[B](l) || isPrefix[B](l, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 864 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] l.isInstanceOf[Cons] || size[B](l) >= size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 865 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] l.isInstanceOf[Cons] || size[B](l) < size[B](l) || isPrefix[B](l, l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 866 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 867 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 868 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:28...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:28...
[  Info  ] Verified: 869 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @514:5...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @514:5...
[  Info  ] Verified: 870 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] !l.isInstanceOf[Cons] || ListPrimitiveSize[B](l.t) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 871 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] !l.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaGetSuffixOnListWithItSelfIsEmpty[B](l.t)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](getSuffix[B](l.t, l.t)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](getSuffix[B](l, l))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 872 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[ Debug  ] val res: Unit = lemmaIsPrefixRefl[B](l, l)
[ Debug  ] val tmp: Unit = {
[ Debug  ]   assume(isPrefix[B](l, l))
[ Debug  ]   res
[ Debug  ] }
[ Debug  ] l.isInstanceOf[Cons] || isEmpty[B](getSuffix[B](l, l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 873 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[  Info  ] Verified: 874 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[  Info  ] Verified: 875 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaIsPrefixRefl @265:50...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaIsPrefixRefl @265:50...
[  Info  ] Verified: 876 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 877 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 878 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaIsPrefixRefl @265:28...
[  Info  ] Verified: 879 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 880 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] l1 != l2 || !l1.isInstanceOf[Cons] || {
[ Debug  ]   val l2: List[B] = tail[B](l2)
[ Debug  ]   l1.t != l2 || {
[ Debug  ]     val res: Unit = lemmaIsPrefixRefl[B](l1.t, l2)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(isPrefix[B](l1.t, l2))
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     isPrefix[B](l1, l2)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixRefl @265:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 881 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[ Debug  ] l1 != l2 || l1.isInstanceOf[Cons] || isPrefix[B](l1, l2)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixRefl @266:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 882 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixRefl @264:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixRefl @264:5...
[  Info  ] Verified: 883 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @264:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixRefl @264:5...
[  Info  ] Verified: 884 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for getSuffix @41:38:
[ Debug  ]  => VALID
[  Info  ] Verified: 885 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || size[B](tail[B](l)) >= size[B](p.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 886 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[ Debug  ] Cache miss: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[ Debug  ]  - Now solving 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   size[B](l) < size[B](p.t) || isPrefix[B](p.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 887 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getSuffix @44:34...
[ Debug  ] Cache miss: 'non-negative measure' VC for getSuffix @44:34...
[ Debug  ]  - Now solving 'non-negative measure' VC for getSuffix @44:34...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for getSuffix @44:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 888 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getSuffix @41:28...
[ Debug  ] Cache miss: 'measure decreases' VC for getSuffix @41:28...
[ Debug  ]  - Now solving 'measure decreases' VC for getSuffix @41:28...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || ListPrimitiveSize[B](tail[B](l)) < ListPrimitiveSize[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for getSuffix @41:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 889 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @41:28...
[ Debug  ] Cache miss: 'postcondition' VC for getSuffix @41:28...
[ Debug  ]  - Now solving 'postcondition' VC for getSuffix @41:28...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || !p.isInstanceOf[Cons] || ++[B](p, getSuffix[B](tail[B](l), p.t)) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for getSuffix @41:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 890 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @44:34...
[ Debug  ] Cache miss: 'postcondition' VC for getSuffix @44:34...
[ Debug  ]  - Now solving 'postcondition' VC for getSuffix @44:34...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || p.isInstanceOf[Cons] || ++[B](p, l) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for getSuffix @44:34:
[ Debug  ]  => VALID
[  Info  ] Verified: 891 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[ Debug  ] size[B](l) < size[B](p) || !isPrefix[B](p, l) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for getSuffix @40:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 892 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @40:5...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @40:5...
[  Info  ] Verified: 893 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[ Debug  ] Cache miss: 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[ Debug  ]  - Now solving 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || p2 != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 894 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 895 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || isPrefix[B](p2, l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 896 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || ++[B](p1.t, s1) == l
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 897 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || true
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 898 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || size[B](p1.t) < size[B](p2)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 899 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache miss: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ]  - Now solving 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || {
[ Debug  ]       val res: Unit = lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref[B](p1.t, s1, p2, l)
[ Debug  ]       val res: Unit = {
[ Debug  ]         assume(contains[B](p2, head[B](s1)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       s1 != Nil[B]()
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 900 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache miss: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ]  - Now solving 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   p1.isInstanceOf[Cons] || s1 != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 901 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache miss: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ]  - Now solving 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27:
[ Debug  ]  => VALID
[  Info  ] Verified: 902 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11:
[ Debug  ]  => VALID
[  Info  ] Verified: 903 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || isPrefix[B](tail[B](p2), tail[B](l))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 904 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](tail[B](p2), l) || ++[B](p1.t, s1) == l
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 905 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](tail[B](p2), l) || ++[B](p1.t, s1) != l || true
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 906 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) < size[B](p2)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 907 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 908 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   !p1.isInstanceOf[Cons] || {
[ Debug  ]     val p2: List[B] = tail[B](p2)
[ Debug  ]     val l: List[B] = tail[B](l)
[ Debug  ]     !isPrefix[B](p2, l) || ++[B](p1.t, s1) != l || size[B](p1.t) >= size[B](p2) || {
[ Debug  ]       val res: Unit = lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref[B](p1.t, s1, p2, l)
[ Debug  ]       val res: Unit = {
[ Debug  ]         assume(contains[B](p2, head[B](s1)))
[ Debug  ]         res
[ Debug  ]       }
[ Debug  ]       contains[B](p2, head[B](s1))
[ Debug  ]     }
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 909 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[ Debug  ] !isPrefix[B](p2, l) || ++[B](p1, s1) != l || isEmpty[B](s1) || size[B](p1) >= size[B](p2) || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](p1, s1)
[ Debug  ]   val tmp: Unit = {
[ Debug  ]     assume(isPrefix[B](p1, ++[B](p1, s1)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   p1.isInstanceOf[Cons] || contains[B](p2, head[B](s1))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 910 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[  Info  ] Verified: 911 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[  Info  ] Verified: 912 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatTwoListThenFirstIsPrefix @278:28...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatTwoListThenFirstIsPrefix @278:28...
[  Info  ] Verified: 913 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatTwoListThenFirstIsPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatTwoListThenFirstIsPrefix @?:?...
[  Info  ] Verified: 914 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[ Debug  ] !l1.isInstanceOf[Cons] || {
[ Debug  ]   val res: Unit = lemmaConcatTwoListThenFirstIsPrefix[B](l1.t, l2)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isPrefix[B](l1.t, ++[B](l1.t, l2)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isPrefix[B](l1, ++[B](l1, l2))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 915 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[ Debug  ] l1.isInstanceOf[Cons] || isPrefix[B](l1, ++[B](l1, l2))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28:
[ Debug  ]  => VALID
[  Info  ] Verified: 916 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[  Info  ] Verified: 917 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[  Info  ] Verified: 918 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[ Debug  ] Cache miss: 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[ Debug  ]  - Now solving 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || p2 != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49:
[ Debug  ]  => VALID
[  Info  ] Verified: 919 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ]  - Now solving 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || l != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58:
[ Debug  ]  => VALID
[  Info  ] Verified: 920 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || size[B](p1.t) != size[B](p2) || isPrefix[B](p1.t, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 921 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || size[B](p1.t) != size[B](p2) || isPrefix[B](p2, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 922 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || size[B](p1.t) != size[B](p2) || size[B](p1.t) == size[B](p2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 923 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || ListPrimitiveSize[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58:
[ Debug  ]  => VALID
[  Info  ] Verified: 924 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || isPrefix[B](p1.t, tail[B](l))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 925 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || isPrefix[B](tail[B](p2), l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 926 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || size[B](p1.t) == size[B](p2)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 927 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || size[B](p1.t) != size[B](p2) || ListPrimitiveSize[B](l) < ListPrimitiveSize[B](l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 928 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || !p1.isInstanceOf[Cons] || {
[ Debug  ]   val p2: List[B] = tail[B](p2)
[ Debug  ]   val l: List[B] = tail[B](l)
[ Debug  ]   !isPrefix[B](p1.t, l) || !isPrefix[B](p2, l) || size[B](p1.t) != size[B](p2) || {
[ Debug  ]     val res: Unit = lemmaIsPrefixSameLengthThenSameList[B](p1.t, p2, l)
[ Debug  ]     val res: Unit = {
[ Debug  ]       assume(p1.t == p2)
[ Debug  ]       res
[ Debug  ]     }
[ Debug  ]     p1 == p2
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 929 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || p1.isInstanceOf[Cons] || p1 == p2
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 930 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ]  - Now solving 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] !isPrefix[B](p1, l) || !isPrefix[B](p2, l) || size[B](p1) != size[B](p2) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5:
[ Debug  ]  => VALID
[  Info  ] Verified: 931 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[  Info  ] Verified: 932 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](scrut._1))' VC for isPrefix @14:13...
[ Debug  ] Cache hit: 'precond. (call head[B](scrut._1))' VC for isPrefix @14:13...
[  Info  ] Verified: 933 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](scrut._2))' VC for isPrefix @14:24...
[ Debug  ] Cache hit: 'precond. (call head[B](scrut._2))' VC for isPrefix @14:24...
[  Info  ] Verified: 934 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._1))' VC for isPrefix @14:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._1))' VC for isPrefix @14:42...
[  Info  ] Verified: 935 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._2))' VC for isPrefix @14:51...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._2))' VC for isPrefix @14:51...
[  Info  ] Verified: 936 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for isPrefix @9:7...
[ Debug  ] Cache hit: 'non-negative measure' VC for isPrefix @9:7...
[  Info  ] Verified: 937 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:31...
[ Debug  ]  - Now solving 'postcondition' VC for isPrefix @16:31...
[ Debug  ] !prefix.isInstanceOf[Nil] || !true || size[B](l) >= size[B](prefix)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for isPrefix @16:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 938 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 939 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:31...
[ Debug  ]  - Now solving 'postcondition' VC for isPrefix @16:31...
[ Debug  ] prefix.isInstanceOf[Nil] || !l.isInstanceOf[Nil] || !false || size[B](l) >= size[B](prefix)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for isPrefix @16:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 940 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 941 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for isPrefix @14:33...
[ Debug  ] Cache hit: 'measure decreases' VC for isPrefix @14:33...
[  Info  ] Verified: 942 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:31...
[ Debug  ]  - Now solving 'postcondition' VC for isPrefix @16:31...
[ Debug  ] prefix.isInstanceOf[Nil] || l.isInstanceOf[Nil] || head[B](prefix) != head[B](l) || !isPrefix[B](tail[B](prefix), tail[B](l)) || size[B](l) >= size[B](prefix)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for isPrefix @16:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 943 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[ Debug  ]  - Now solving 'postcondition' VC for isPrefix @16:58...
[ Debug  ] prefix.isInstanceOf[Nil] || l.isInstanceOf[Nil] || head[B](prefix) != head[B](l) || {
[ Debug  ]   val res: Boolean = isPrefix[B](tail[B](prefix), tail[B](l))
[ Debug  ]   true
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for isPrefix @16:58:
[ Debug  ]  => VALID
[  Info  ] Verified: 944 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:31...
[ Debug  ]  - Now solving 'postcondition' VC for isPrefix @16:31...
[ Debug  ] prefix.isInstanceOf[Nil] || l.isInstanceOf[Nil] || head[B](prefix) == head[B](l) || !false || size[B](l) >= size[B](prefix)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for isPrefix @16:31:
[ Debug  ]  => VALID
[  Info  ] Verified: 945 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 946 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenForEqualLists @797:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenForEqualLists @797:7...
[  Info  ] Verified: 947 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](l) != size[B](suffix) || isEmpty[B](suffix) || isSuffix[B](suffix, l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33:
[ Debug  ]  => VALID
[  Info  ] Verified: 948 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache miss: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ]  - Now solving 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](l) != size[B](suffix) || isEmpty[B](suffix) || {
[ Debug  ]   val thiss: List[B] = getPrefix[B](l, suffix)
[ Debug  ]   suffix != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 949 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](l) != size[B](suffix) || isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91:
[ Debug  ]  => VALID
[  Info  ] Verified: 950 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](l) != size[B](suffix) || isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78:
[ Debug  ]  => VALID
[  Info  ] Verified: 951 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ]  - Now solving 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || isSuffix[B](suffix, l.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 952 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || ++[B](getPrefix[B](l.t, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l.t, tail[B](suffix)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || isSuffix[B](suffix, l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33:
[ Debug  ]  => VALID
[  Info  ] Verified: 953 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache miss: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ]  - Now solving 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || ++[B](getPrefix[B](l.t, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l.t, tail[B](suffix)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || {
[ Debug  ]     val thiss: List[B] = getPrefix[B](l, suffix)
[ Debug  ]     suffix != Nil[B]()
[ Debug  ]   }
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 954 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || ++[B](getPrefix[B](l.t, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l.t, tail[B](suffix)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91:
[ Debug  ]  => VALID
[  Info  ] Verified: 955 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || ++[B](getPrefix[B](l.t, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l.t, tail[B](suffix)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78:
[ Debug  ]  => VALID
[  Info  ] Verified: 956 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || l.isInstanceOf[Cons] || isEmpty[B](suffix) || isSuffix[B](suffix, l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33:
[ Debug  ]  => VALID
[  Info  ] Verified: 957 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache miss: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ]  - Now solving 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || l.isInstanceOf[Cons] || isEmpty[B](suffix) || {
[ Debug  ]   val thiss: List[B] = getPrefix[B](l, suffix)
[ Debug  ]   suffix != Nil[B]()
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 958 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache miss: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ]  - Now solving 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || l.isInstanceOf[Cons] || isEmpty[B](suffix) || suffix != Nil[B]()
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91:
[ Debug  ]  => VALID
[  Info  ] Verified: 959 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || l.isInstanceOf[Cons] || isEmpty[B](suffix) || isSuffix[B](tail[B](suffix), l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78:
[ Debug  ]  => VALID
[  Info  ] Verified: 960 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache miss: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ]  - Now solving 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || true
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33:
[ Debug  ]  => VALID
[  Info  ] Verified: 961 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 962 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 963 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 964 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[ Debug  ] Cache miss: 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[ Debug  ]  - Now solving 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[ Debug  ] !isSuffix[B](suffix, l) || size[B](l) >= BigInt("0")
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15:
[ Debug  ]  => VALID
[  Info  ] Verified: 965 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](l) != size[B](suffix) || isEmpty[B](suffix) || ++[B](getPrefix[B](l, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l, tail[B](suffix))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55:
[ Debug  ]  => VALID
[  Info  ] Verified: 966 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ]  - Now solving 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || isSuffix[B](suffix, l.t)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 967 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] Cache miss: 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ]  - Now solving 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || size[B](l.t) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?:
[ Debug  ]  => VALID
[  Info  ] Verified: 968 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || !isSuffix[B](suffix, l.t) || {
[ Debug  ]   val res: Unit = lemmaRemovingHeadOfSuffixThenGetPrefixLonger[B](l.t, suffix)
[ Debug  ]   val res: Unit = {
[ Debug  ]     assume(isEmpty[B](suffix) || ++[B](getPrefix[B](l.t, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l.t, tail[B](suffix)))
[ Debug  ]     res
[ Debug  ]   }
[ Debug  ]   isEmpty[B](suffix) || ++[B](getPrefix[B](l, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l, tail[B](suffix))
[ Debug  ] }
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9:
[ Debug  ]  => VALID
[  Info  ] Verified: 969 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[ Debug  ]  - Now solving 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || l.isInstanceOf[Cons] || isEmpty[B](suffix) || ++[B](getPrefix[B](l, suffix), Cons[B](head[B](suffix), Nil[B]())) == getPrefix[B](l, tail[B](suffix))
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21:
[ Debug  ]  => VALID
[  Info  ] Verified: 970 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[  Info  ] Verified: 971 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[  Info  ] Verified: 972 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)' VC for getPrefix @90:64...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)' VC for getPrefix @90:64...
[  Info  ] Verified: 973 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getPrefix @87:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for getPrefix @87:15...
[  Info  ] Verified: 974 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @89:55...
[ Debug  ] Cache miss: 'postcondition' VC for getPrefix @89:55...
[ Debug  ]  - Now solving 'postcondition' VC for getPrefix @89:55...
[ Debug  ] !isSuffix[B](suffix, l) || !l.isInstanceOf[Cons] || size[B](l) != size[B](suffix) || ++[B](Nil[B](), suffix) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for getPrefix @89:55:
[ Debug  ]  => VALID
[  Info  ] Verified: 975 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getPrefix @90:64...
[ Debug  ] Cache miss: 'measure decreases' VC for getPrefix @90:64...
[ Debug  ]  - Now solving 'measure decreases' VC for getPrefix @90:64...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || size[B](l.t) < size[B](l)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for getPrefix @90:64:
[ Debug  ]  => VALID
[  Info  ] Verified: 976 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @90:55...
[ Debug  ] Cache miss: 'postcondition' VC for getPrefix @90:55...
[ Debug  ]  - Now solving 'postcondition' VC for getPrefix @90:55...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || !l.isInstanceOf[Cons] || ++[B](Cons[B](l.h, getPrefix[B](l.t, suffix)), suffix) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for getPrefix @90:55:
[ Debug  ]  => VALID
[  Info  ] Verified: 977 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @91:55...
[ Debug  ] Cache miss: 'postcondition' VC for getPrefix @91:55...
[ Debug  ]  - Now solving 'postcondition' VC for getPrefix @91:55...
[ Debug  ] !isSuffix[B](suffix, l) || l.isInstanceOf[Cons] && size[B](l) == size[B](suffix) || l.isInstanceOf[Cons] || ++[B](Nil[B](), suffix) == l
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'postcondition' VC for getPrefix @91:55:
[ Debug  ]  => VALID
[  Info  ] Verified: 978 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getPrefix @88:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getPrefix @88:5...
[  Info  ] Verified: 979 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @88:5...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @88:5...
[  Info  ] Verified: 980 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for isSuffix @76:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for isSuffix @76:15...
[  Info  ] Verified: 981 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for isSuffix @78:62...
[ Debug  ] Cache miss: 'measure decreases' VC for isSuffix @78:62...
[ Debug  ]  - Now solving 'measure decreases' VC for isSuffix @78:62...
[ Debug  ] !lTot.isInstanceOf[Cons] || size[B](l1) >= size[B](lTot) || size[B](lTot.t) < size[B](lTot)
[ Debug  ] Solving with: Pfolio
[ Debug  ]  - Result for 'measure decreases' VC for isSuffix @78:62:
[ Debug  ]  => VALID
[  Info  ] Verified: 982 / 982
[  Info  ] Done in 107.16s
[  Info  ]   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
[  Info  ] ‚ïî‚ïê‚ï° stainless summary ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
[  Info  ] ‚ïë ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                                                                                                                                                                                                          ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           measure decreases                                                                                               valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           precond. (call concatWithoutDuplicates[B](baseList, ...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           precond. (call concatWithoutDuplicates[B](baseList, ...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:571:15:    concatWithoutDuplicates                                           non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:573:5:     concatWithoutDuplicates                                           body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:573:5:     concatWithoutDuplicates                                           postcondition                                                                                                   valid             U:smt-cvc4  0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:575:9:     concatWithoutDuplicates                                           body assertion: Inlined precondition of concatWithoutDuplicates                                                 valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:575:9:     concatWithoutDuplicates                                           postcondition                                                                                                   valid             U:smt-z3    0.7 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:577:9:     concatWithoutDuplicates                                           body assertion: Inlined precondition of concatWithoutDuplicates                                                 valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:577:9:     concatWithoutDuplicates                                           postcondition                                                                                                   valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:580:51:    concatWithoutDuplicates                                           postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:58:5:      consecutiveSubseq                                                 body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:60:46:     consecutiveSubseq                                                 measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:61:49:     consecutiveSubseq                                                 non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:67:6:      consecutiveSubseqAtHead                                           non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:70:9:      consecutiveSubseqAtHead                                           measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:50:39:     getIndex                                                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:39:     getIndex                                                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:43:     getIndex                                                          measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:43:     getIndex                                                          precond. (call getIndex[B]((scrut.t): @DropVCs , e))                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:52:39:     getIndex                                                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:87:15:     getPrefix                                                         non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:88:5:      getPrefix                                                         body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:88:5:      getPrefix                                                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:89:55:     getPrefix                                                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:55:     getPrefix                                                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:64:     getPrefix                                                         measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:64:     getPrefix                                                         precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:91:55:     getPrefix                                                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:40:5:      getSuffix                                                         body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:40:5:      getSuffix                                                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:38:     getSuffix                                                         precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:44:34:     getSuffix                                                         non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:44:34:     getSuffix                                                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:9:7:       isPrefix                                                          non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:13:     isPrefix                                                          precond. (call head[B](scrut._1))                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:24:     isPrefix                                                          precond. (call head[B](scrut._2))                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:33:     isPrefix                                                          measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:42:     isPrefix                                                          precond. (call tail[B](scrut._1))                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:51:     isPrefix                                                          precond. (call tail[B](scrut._2))                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid             U:smt-z3    0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid             U:smt-z3    0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:76:15:     isSuffix                                                          non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:78:62:     isSuffix                                                          measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:504:5:     lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:504:5:     lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:70:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:506:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:57:    lemmaAddHeadSuffixToPrefixStillPrefix                             non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:5:     lemmaChangeCutStillConcatTotal                                    postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:47:    lemmaChangeCutStillConcatTotal                                    precond. (call head[B](l2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:57:    lemmaChangeCutStillConcatTotal                                    precond. (call tail[B](l2))                                                                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:355:27:    lemmaChangeCutStillConcatTotal                                    precond. (call head[B](l2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:355:40:    lemmaChangeCutStillConcatTotal                                    precond. (call tail[B](l2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatAssociativity                                          measure decreases                                                                                               valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatAssociativity                                          precond. (call lemmaConcatAssociativity[B](l1, elmt,...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:319:12:    lemmaConcatAssociativity                                          body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:320:5:     lemmaConcatAssociativity                                          body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:320:5:     lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:28:    lemmaConcatAssociativity                                          body assertion: Inlined precondition of lemmaConcatAssociativity                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:28:    lemmaConcatAssociativity                                          postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:67:    lemmaConcatAssociativity                                          precond. (call tail[B](tot))                                                                                    valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:322:28:    lemmaConcatAssociativity                                          postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:324:15:    lemmaConcatAssociativity                                          non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatThenFirstSubseqOfTot                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:729:15:    lemmaConcatThenFirstSubseqOfTot                                   non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:730:5:     lemmaConcatThenFirstSubseqOfTot                                   body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:730:5:     lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:731:28:    lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:732:28:    lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatThenSecondSubseqOfTot                                  measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:739:15:    lemmaConcatThenSecondSubseqOfTot                                  non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:740:5:     lemmaConcatThenSecondSubseqOfTot                                  body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:740:5:     lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:741:28:    lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:742:28:    lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListThenFirstIsPrefix                               measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:274:5:     lemmaConcatTwoListThenFirstIsPrefix                               body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:274:5:     lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:275:28:    lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:276:28:    lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:278:28:    lemmaConcatTwoListThenFirstIsPrefix                               non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:757:5:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:757:5:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:758:39:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition of check                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:758:39:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:761:21:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:763:17:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:167:15:    lemmaConsecutiveSubseqThenSubseq                                  non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:170:9:     lemmaConsecutiveSubseqThenSubseq                                  body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:170:9:     lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:172:9:     lemmaConsecutiveSubseqThenSubseq                                  body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:172:9:     lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:173:17:    lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:180:7:     lemmaContainsAndNotHdThenTlContains                               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:182:13:    lemmaContainsAndNotHdThenTlContains                               precond. (call head[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:184:15:    lemmaContainsAndNotHdThenTlContains                               precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:869:5:     lemmaForallContainsAddingElmtInPreserves                          body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:869:5:     lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:872:21:    lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:875:23:    lemmaForallContainsAddingElmtInPreserves                          non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingInSndListPreserves                       measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingInSndListPreserves                       precond. (call lemmaForallContainsAddingInSndListPre...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:850:5:     lemmaForallContainsAddingInSndListPreserves                       body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:850:5:     lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:852:9:     lemmaForallContainsAddingInSndListPreserves                       body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:852:9:     lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:853:21:    lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:856:15:    lemmaForallContainsAddingInSndListPreserves                       non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:817:15:    lemmaForallContainsAndNoDuplicateThenSmallerList                  non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:819:5:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:819:5:     lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:822:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call forallContainsSubset[B](lIn, l))                                                                 valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:823:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:824:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:826:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:827:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call subsetContains[B]((scrut.t): @DropVCs...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:828:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:828:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:829:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:830:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:831:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:832:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:833:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:834:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:834:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:836:21:    lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:884:5:     lemmaForallContainsConcatPreserves                                body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:884:5:     lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:885:21:    lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:890:16:    lemmaForallContainsConcatPreserves                                non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:915:5:     lemmaForallContainsPreservedIfSameContent                         body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:915:5:     lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:916:21:    lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:918:9:     lemmaForallContainsPreservedIfSameContent                         precond. (call forallContained[B](l1, (b: B) => cont...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:922:15:    lemmaForallContainsPreservedIfSameContent                         non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            precond. (call lemmaForallContainsPreservedRemoveElm...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:894:57:    lemmaForallContainsPreservedRemoveElmt                            non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:901:66:    lemmaForallContainsPreservedRemoveElmtInRefList                   non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:797:7:     lemmaForallContainsThenForEqualLists                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:777:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:779:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:976:62:    lemmaForallNotContainedNoDupThenConcatNoDup                       non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:949:54:    lemmaForallNotContainsCannotContain                               non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:933:50:    lemmaForallNotContainsForConcat                                   non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:941:50:    lemmaForallNotContainsForConcat                                   non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   precond. (call lemmaForallNotContainsForSubseq[B]((s...)                                                        valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:926:50:    lemmaForallNotContainsForSubseq                                   non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:51:    lemmaForallNotContainsNilRefList                                  non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:964:69:    lemmaForallNotContainsPreservedAddNewElmtInRefList                non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       precond. (call lemmaForallThenDisjunction1[B]((scrut...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:791:46:    lemmaForallThenDisjunction1                                       non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       precond. (call lemmaForallThenDisjunction2[B]((scrut...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:785:46:    lemmaForallThenDisjunction2                                       non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:235:7:     lemmaGetIndexBiggerAndHeadEqThenTailContains                      postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:242:13:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call head[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:243:13:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call getIndex[B](l, e1))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:243:31:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call getIndex[B](l, e2))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:245:15:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:195:13:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call getIndex[B](l, e1))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:195:31:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call getIndex[B](l, e2))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:198:5:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:202:16:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:204:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:204:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:205:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:205:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:206:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:206:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:210:21:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition of check                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:5:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:12:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:12:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:214:15:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:214:15:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetSuffixOnListWithItSelfIsEmpty                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call lemmaIsPrefixRefl[B](l1, l2))                                                                    trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:514:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             body assertion: Inlined precondition of lemmaIsPrefixRefl                                                       trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:516:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:516:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:517:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:518:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 precond. (call lemmaIsPrefixRefl[B](l1, l2))                                                                    valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:264:5:     lemmaIsPrefixRefl                                                 body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:264:5:     lemmaIsPrefixRefl                                                 postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:28:    lemmaIsPrefixRefl                                                 body assertion: Inlined precondition of lemmaIsPrefixRefl                                                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:28:    lemmaIsPrefixRefl                                                 postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:50:    lemmaIsPrefixRefl                                                 precond. (call tail[B](l2))                                                                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:266:28:    lemmaIsPrefixRefl                                                 postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:423:5:     lemmaIsPrefixSameLengthThenSameList                               body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:423:5:     lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:49:    lemmaIsPrefixSameLengthThenSameList                               precond. (call tail[B](p2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:58:    lemmaIsPrefixSameLengthThenSameList                               non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:58:    lemmaIsPrefixSameLengthThenSameList                               precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:426:21:    lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixThenSmallerEqSize                                    measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixThenSmallerEqSize                                    precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))                                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:491:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:492:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:26:    lemmaIsPrefixThenSmallerEqSize                                    body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:57:    lemmaIsPrefixThenSmallerEqSize                                    precond. (call tail[B](scrut._1))                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:66:    lemmaIsPrefixThenSmallerEqSize                                    precond. (call tail[B](scrut._2))                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:495:25:    lemmaIsPrefixThenSmallerEqSize                                    non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenSubseq                                           measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenSubseq                                           precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:99:15:     lemmaIsSuffixThenSubseq                                           non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:101:56:    lemmaIsSuffixThenSubseq                                           body assertion: Inlined precondition of lemmaIsSuffixThenSubseq                                                 valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:101:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:102:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:103:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenTailIsSuffix                                     measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenTailIsSuffix                                     precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:113:15:    lemmaIsSuffixThenTailIsSuffix                                     non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:114:5:     lemmaIsSuffixThenTailIsSuffix                                     body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:114:5:     lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:115:59:    lemmaIsSuffixThenTailIsSuffix                                     body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:115:59:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:117:16:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:119:11:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:119:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:11:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:18:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call head[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:33:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call head[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:18:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:33:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:124:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:124:27:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1151:15:   lemmaListContainsThenFilterContainsNotEmpty                       non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1152:5:    lemmaListContainsThenFilterContainsNotEmpty                       body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1152:5:    lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1156:10:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1158:21:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition of check                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1158:21:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1167:15:   lemmaListNotContainsThenFilterContainsEmpty                       non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1168:5:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1168:5:    lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1172:21:   lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                measure decreases                                                                                               valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:296:5:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:296:5:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:301:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call tail[B](p2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:302:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:302:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:304:21:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaMoveElementToOtherListKeepsConcatEq                          measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaMoveElementToOtherListKeepsConcatEq                          precond. (call lemmaMoveElementToOtherListKeepsConca...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:533:5:     lemmaMoveElementToOtherListKeepsConcatEq                          body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:533:5:     lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:9:     lemmaMoveElementToOtherListKeepsConcatEq                          body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:9:     lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:65:    lemmaMoveElementToOtherListKeepsConcatEq                          precond. (call tail[B](tot))                                                                                    valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:536:21:    lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:539:43:    lemmaMoveElementToOtherListKeepsConcatEq                          non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       body assertion: match exhaustiveness                                                                            valid             U:smt-cvc4  0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       precond. (call lemmaNoDuplicateConcatThenForallNotCo...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:957:62:    lemmaNoDuplicateConcatThenForallNotContains                       non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1065:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaSubsetContentThenForallContains                                    valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1066:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaSubsetContentThenForallContains                                    valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1067:12:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1068:12:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1069:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1072:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1074:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1075:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1075:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1077:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1078:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1079:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1080:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1080:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1081:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1082:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1083:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1084:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1087:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of check                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1088:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1088:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1089:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1091:11:   lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1092:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1093:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1094:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1095:11:   lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of check                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              measure decreases                                                                                               valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))                                          valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))                                          valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:37:   lemmaNoDuplicatePreservedSameContent                              non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:251:13:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call head[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:254:9:     lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call head[B](tail[B](l)))                                                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:254:9:     lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:44:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:256:6:     lemmaNotHeadSoGetIndexTailIsMinusOne                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:15:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](l, e))                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:15:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](l, e))                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:33:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](tail[B](l), e))                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:33:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](tail[B](l), e))                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:553:5:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:553:5:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:556:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call tail[B](s1))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:558:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:558:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:560:18:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixStaysPrefixWhenAddingToSuffix                          measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixStaysPrefixWhenAddingToSuffix                          precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:398:5:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:398:5:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:9:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:9:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:54:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:401:21:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:403:27:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:989:5:     lemmaRemoveElmtContainedSizeSmaller                               body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:989:5:     lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:991:16:    lemmaRemoveElmtContainedSizeSmaller                               body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:993:11:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:993:11:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:994:10:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:996:28:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:996:28:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:997:28:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of check                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:997:28:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:999:30:    lemmaRemoveElmtContainedSizeSmaller                               non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastConcatenatedPrefixStillPrefix                      measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastConcatenatedPrefixStillPrefix                      precond. (call lemmaRemoveLastConcatenatedPrefixStil...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:366:5:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:366:5:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:9:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:9:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:64:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      precond. (call tail[B](tot))                                                                                    valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:369:21:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:371:24:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:442:5:     lemmaRemoveLastFromBothSidePreservesEq                            body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:442:5:     lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:74:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:444:28:    lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:48:    lemmaRemoveLastFromBothSidePreservesEq                            non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromLMakesItPrefix                                 measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromLMakesItPrefix                                 precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))                                                         trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:454:5:     lemmaRemoveLastFromLMakesItPrefix                                 body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:454:5:     lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:455:31:    lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:456:31:    lemmaRemoveLastFromLMakesItPrefix                                 body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix                                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:456:31:    lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:39:    lemmaRemoveLastFromLMakesItPrefix                                 non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:407:7:     lemmaRemoveLastPrefixDecreasesSize                                postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:409:15:    lemmaRemoveLastPrefixDecreasesSize                                precond. (call removeLast[B](l))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:381:5:     lemmaRemoveLastPrefixStillPrefix                                  body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:381:5:     lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:65:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:383:28:    lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:38:    lemmaRemoveLastPrefixStillPrefix                                  non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNotContainedSameLis...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1008:5:    lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1008:5:    lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1009:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1010:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1010:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1014:44:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            precond. (call lemmaRemoveOneElmtNotContainedSameLis...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1105:57:   lemmaRemoveOneElmtNotContainedSameList                            non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1112:57:   lemmaRemoveOneElmtPreservesNoDuplicate                            non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:135:15:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:137:5:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:137:5:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:138:55:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:140:9:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:140:9:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:142:21:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1182:15:   lemmaSameContentSameSizeSmallerEqOneSameList                      non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1184:5:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1184:5:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1186:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1186:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1189:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1189:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call head[B](l2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1190:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:58:   lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call tail[B](l2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:221:13:    lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e1))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:221:32:    lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e2))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:224:9:     lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e1))                                                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:7:     lemmaSameIndexThenSameElement                                     postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:14:    lemmaSameIndexThenSameElement                                     precond. (call head[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:226:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:226:14:    lemmaSameIndexThenSameElement                                     precond. (call head[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:227:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement                                     valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:37:    lemmaSameIndexThenSameElement                                     non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:37:    lemmaSameIndexThenSameElement                                     precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:477:5:     lemmaSamePrefixThenSameSuffix                                     body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:477:5:     lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix                                     valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:47:    lemmaSamePrefixThenSameSuffix                                     precond. (call tail[B](p2))                                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:60:    lemmaSamePrefixThenSameSuffix                                     non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:60:    lemmaSamePrefixThenSameSuffix                                     precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:480:21:    lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:711:15:    lemmaSubSeqAddSameElmtPreserves                                   non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:712:5:     lemmaSubSeqAddSameElmtPreserves                                   body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:712:5:     lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:713:39:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:714:39:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:714:39:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:717:11:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:717:11:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:719:18:    lemmaSubSeqAddSameElmtPreserves                                   body assertion                                                                                                  valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:720:11:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:720:11:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             non-negative measure                                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:702:17:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:628:44:    lemmaSubseqOfEmptyIsEmpty                                         non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqRefl                                                   measure decreases                                                                                               valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:619:15:    lemmaSubseqRefl                                                   non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:620:5:     lemmaSubseqRefl                                                   body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:620:5:     lemmaSubseqRefl                                                   postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:621:28:    lemmaSubseqRefl                                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:622:28:    lemmaSubseqRefl                                                   postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1119:55:   lemmaSubsetContentThenForallContains                              non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTailIsSubseqOfBiggerList                                     precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTailIsSubseqOfBiggerList                                     precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:29:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:664:6:     lemmaTailIsSubseqOfBiggerList                                     postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:665:45:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:665:45:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:636:5:     lemmaTailIsSubseqOfList                                           body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:636:5:     lemmaTailIsSubseqOfList                                           postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:637:21:    lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:640:9:     lemmaTailIsSubseqOfList                                           precond. (call subseqTail[B](l, l))                                                                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:641:9:     lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:641:16:    lemmaTailIsSubseqOfList                                           body assertion                                                                                                  valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:643:42:    lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:650:5:     lemmaTailIsSubseqOfListBis                                        body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:650:5:     lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:651:28:    lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:652:28:    lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTwoListsConcatAssociativity                                  measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:333:15:    lemmaTwoListsConcatAssociativity                                  non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:334:5:     lemmaTwoListsConcatAssociativity                                  body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:334:5:     lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:336:9:     lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:338:21:    lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1032:5:    noDuplicateConcatListNotContainedPreserves                        body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1032:5:    noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1034:28:   noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1037:35:   noDuplicateConcatListNotContainedPreserves                        non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     measure decreases                                                                                               valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForSubseq[B](l,...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1048:5:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1048:5:    noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1050:16:   noDuplicateConcatListNotContainedPreservesBis                     body assertion                                                                                                  valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1051:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1051:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1052:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition of lemmaForallNotContainsForSubseq                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1055:21:   noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1057:35:   noDuplicateConcatListNotContainedPreservesBis                     non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1018:7:    noDuplicateConcatNotContainedPreserves                            postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   precond. (call notContainsAThenTailNotContains[B]((s...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1139:15:   notContainsAThenTailNotContains                                   non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))                                          valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1127:15:   notContainsAddNotEqThenNotContains                                non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:585:35:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:589:5:     removeDuplicates                                                  body assertion: match exhaustiveness                                                                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:589:5:     removeDuplicates                                                  postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:591:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:592:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:593:41:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:36:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:62:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  measure decreases                                                                                               valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  postcondition                                                                                                   valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))                                          valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))                                          valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))                                          valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:599:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:600:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:601:41:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:36:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:62:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:604:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:604:46:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:607:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:607:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList                valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.7 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.5 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis                     valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  measure decreases                                                                                               valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  postcondition                                                                                                   valid             U:smt-z3    0.5 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))                                          valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))                                          valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))                                          valid             U:smt-z3    0.3 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))                                          valid             U:smt-z3    0.5 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:614:100:   removeDuplicates                                                  non-negative measure                                                                                            valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:614:108:   removeDuplicates                                                  postcondition                                                                                                   valid             U:smt-z3    0.2 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:582:24:    removeDuplicates$default$3                                        postcondition                                                                                                   trivial                       0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:21:24:     removeLast                                                        body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:21:24:     removeLast                                                        postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:22:31:     removeLast                                                        postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:31:     removeLast                                                        postcondition                                                                                                   valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:40:     removeLast                                                        measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:40:     removeLast                                                        precond. (call removeLast[B]((scrut.t): @DropVCs ))                                                             valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      valid             U:smt-z3    0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:45:     removeLast                                                        non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:30:5:      reverseList                                                       body assertion: match exhaustiveness                                                                            trivial                       0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:30:5:      reverseList                                                       non-negative measure                                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:31:28:     reverseList                                                       measure decreases                                                                                               valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      measure decreases                                                                                               valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call subseqForall[B](l, lSub, p) (require 1/2))                                                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call subseqForall[B](l, lSub, p) (require 2/2))                                                       valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:152:15:    subseqForall                                                      non-negative measure                                                                                            valid             U:smt-z3    0.4 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:153:5:     subseqForall                                                      body assertion: match exhaustiveness                                                                            valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:153:5:     subseqForall                                                      postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:155:9:     subseqForall                                                      body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList                                           valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:156:9:     subseqForall                                                      precond. (call subseqContains[B](lSub, l, (scrut.h):...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:157:9:     subseqForall                                                      precond. (call forallContained[B](l, p, (scrut.h): @...)                                                        valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      body assertion: Inlined precondition (1/2) of subseqForall                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      body assertion: Inlined precondition (2/2) of subseqForall                                                      valid from cache              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      postcondition                                                                                                   valid             U:smt-z3    0.5 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:160:21:    subseqForall                                                      postcondition                                                                                                   valid from cache              0.0 ‚ïë
[  Info  ] ‚ïü‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ï¢
[  Info  ] ‚ïë total: 982  valid: 982  (447 from cache, 32 trivial) invalid: 0    unknown: 0    time:   58.92                                                                                                                                                 ‚ïë
[  Info  ] ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
[  Info  ] Verification pipeline summary:
[  Info  ]   cache, anti-aliasing, imperative elimination, 
[  Info  ]   no-inc:smt-z3:z3, smt-cvc4, smt-z3, batched
[  Info  ] 
[  Info  ] 
[  Info  ] Waiting for source changes... (or press Enter to reload)
[  Info  ] 
[  Info  ] 
^C[  Info  ] 
[Warning ] Interrupted...
[  Info  ] Shutting down executor service.













‚ùØ cp temp_cache.bin .stainless-cache/vccache.bin stainless-dotty ListUtils.scala --config-file=stainless.conf --watch
cp: --watch is not a directory
‚ùØ cp temp_cache.bin .stainless-cache/vccache.bin && stainless-dotty ListUtils.scala --config-file=stainless.conf --watch
[  Info  ] Finished compiling                                       
[  Info  ] Preprocessing finished                                   
[  Info  ] Finished lowering the symbols                            
[  Info  ] Generating VCs for functions: isPrefix$0, removeLast$0, reverseList$0, getSuffix$0, getIndex$0, consecutiveSubseq$0, consecutiveSubseqAtHead$0, isSuffix$0, getPrefix$0, lemmaIsSuffixThenSubseq$0, lemmaIsSuffixThenTailIsSuffix$0, lemmaRemovingHeadOfSuffixThenGetPrefixLonger$0, subseqForall$0, lemmaConsecutiveSubseqThenSubseq$0, lemmaContainsAndNotHdThenTlContains$0, lemmaGetIndexBiggerAndHeadNotEqThenTailContains$0, lemmaSameIndexThenSameElement$0, lemmaGetIndexBiggerAndHeadEqThenTailContains$0, lemmaNotHeadSoGetIndexTailIsMinusOne$0, lemmaIsPrefixRefl$0, lemmaConcatTwoListThenFirstIsPrefix$0, lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref$0, lemmaConcatAssociativity$0, lemmaTwoListsConcatAssociativity$0, lemmaChangeCutStillConcatTotal$0, lemmaRemoveLastConcatenatedPrefixStillPrefix$0, lemmaRemoveLastPrefixStillPrefix$0, lemmaPrefixStaysPrefixWhenAddingToSuffix$0, lemmaRemoveLastPrefixDecreasesSize$0, lemmaIsPrefixSameLengthThenSameList$0, lemmaRemoveLastFromBothSidePreservesEq$0, lemmaRemoveLastFromLMakesItPrefix$0, lemmaSamePrefixThenSameSuffix$0, lemmaIsPrefixThenSmallerEqSize$0, lemmaAddHeadSuffixToPrefixStillPrefix$0, lemmaGetSuffixOnListWithItSelfIsEmpty$0, lemmaMoveElementToOtherListKeepsConcatEq$0, lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther$0, concatWithoutDuplicates$0, removeDuplicates$0, removeDuplicates$default$3$0, lemmaSubseqRefl$0, lemmaSubseqOfEmptyIsEmpty$0, lemmaTailIsSubseqOfList$0, lemmaTailIsSubseqOfListBis$0, lemmaTailIsSubseqOfBiggerList$0, lemmaSubSeqTransitive$0, lemmaSubSeqAddSameElmtPreserves$0, lemmaConcatThenFirstSubseqOfTot$0, lemmaConcatThenSecondSubseqOfTot$0, lemmaConcatTwoListsWhichNotContainThenTotNotContain$0, lemmaForallContainsThenInOtherList$0, lemmaForallThenDisjunction2$0, lemmaForallThenDisjunction1$0, lemmaForallContainsThenForEqualLists$0, lemmaForallContainsAndNoDuplicateThenSmallerList$0, lemmaForallContainsAddingInSndListPreserves$0, lemmaForallContainsAddingElmtInPreserves$0, lemmaForallContainsConcatPreserves$0, lemmaForallContainsPreservedRemoveElmt$0, lemmaForallContainsPreservedRemoveElmtInRefList$0, lemmaForallContainsPreservedIfSameContent$0, lemmaForallNotContainsForSubseq$0, lemmaForallNotContainsForConcat$0, lemmaForallNotContainsForConcat$1, lemmaForallNotContainsCannotContain$0, lemmaNoDuplicateConcatThenForallNotContains$0, lemmaForallNotContainsPreservedAddNewElmtInRefList$0, lemmaForallNotContainsNilRefList$0, lemmaForallNotContainedNoDupThenConcatNoDup$0, lemmaRemoveElmtContainedSizeSmaller$0, lemmaRemoveOneElmtNoDuplicateSizeMinusOne$0, noDuplicateConcatNotContainedPreserves$0, noDuplicateConcatListNotContainedPreserves$0, noDuplicateConcatListNotContainedPreservesBis$0, lemmaNoDuplicatePreservedSameContent$0, lemmaRemoveOneElmtNotContainedSameList$0, lemmaRemoveOneElmtPreservesNoDuplicate$0, lemmaSubsetContentThenForallContains$0, notContainsAddNotEqThenNotContains$0, notContainsAThenTailNotContains$0, lemmaListContainsThenFilterContainsNotEmpty$0,[  Info  ] Finished generating VCs                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
[  Info  ] Starting verification...
[  Info  ] Verified: 0 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates$default$3 @582:24...
[ Debug  ] Cache miss: 'postcondition' VC for removeDuplicates$default$3 @582:24...
[  Info  ] Verified: 1 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 2 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 3 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAddingElmtInPreserves @875:23...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAddingElmtInPreserves @875:23...
[  Info  ] Verified: 4 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 5 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 6 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 7 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 8 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @872:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @872:21...
[  Info  ] Verified: 9 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[  Info  ] Verified: 10 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[  Info  ] Verified: 11 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:13...
[  Info  ] Verified: 12 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:31...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:31...
[  Info  ] Verified: 13 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 14 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 15 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 16 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 17 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 18 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 19 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 20 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 21 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 22 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 23 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 24 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 25 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 26 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[  Info  ] Verified: 27 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[  Info  ] Verified: 28 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @202:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @202:16...
[  Info  ] Verified: 29 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[  Info  ] Verified: 30 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[  Info  ] Verified: 31 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 32 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 33 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 34 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 35 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[  Info  ] Verified: 36 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[  Info  ] Verified: 37 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[  Info  ] Verified: 38 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[  Info  ] Verified: 39 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[  Info  ] Verified: 40 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[  Info  ] Verified: 41 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 42 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 43 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 44 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 45 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @210:21...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @210:21...
[  Info  ] Verified: 46 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @198:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @198:5...
[  Info  ] Verified: 47 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:5...
[  Info  ] Verified: 48 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @251:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @251:13...
[  Info  ] Verified: 49 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[  Info  ] Verified: 50 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](tail[B](l)))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[ Debug  ] Cache hit: 'precond. (call head[B](tail[B](l)))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[  Info  ] Verified: 51 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:44...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:44...
[  Info  ] Verified: 52 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 53 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 54 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[  Info  ] Verified: 55 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 56 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[  Info  ] Verified: 57 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[  Info  ] Verified: 58 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 59 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[  Info  ] Verified: 60 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 61 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 62 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 63 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 64 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 65 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @256:6...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @256:6...
[  Info  ] Verified: 66 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingInSndListPre...)' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingInSndListPre...)' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[  Info  ] Verified: 67 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAddingInSndListPreserves @856:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAddingInSndListPreserves @856:15...
[  Info  ] Verified: 68 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[  Info  ] Verified: 69 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[  Info  ] Verified: 70 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[  Info  ] Verified: 71 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @853:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @853:21...
[  Info  ] Verified: 72 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[  Info  ] Verified: 73 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[  Info  ] Verified: 74 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)' VC for subseqForall @?:?...
[  Info  ] Verified: 75 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqContains[B](lSub, l, (scrut.h):...)' VC for subseqForall @156:9...
[ Debug  ] Cache hit: 'precond. (call subseqContains[B](lSub, l, (scrut.h):...)' VC for subseqForall @156:9...
[  Info  ] Verified: 76 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContained[B](l, p, (scrut.h): @...)' VC for subseqForall @157:9...
[ Debug  ] Cache hit: 'precond. (call forallContained[B](l, p, (scrut.h): @...)' VC for subseqForall @157:9...
[  Info  ] Verified: 77 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqForall[B](l, lSub, p) (require 1/2))' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call subseqForall[B](l, lSub, p) (require 1/2))' VC for subseqForall @?:?...
[  Info  ] Verified: 78 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqForall[B](l, lSub, p) (require 2/2))' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call subseqForall[B](l, lSub, p) (require 2/2))' VC for subseqForall @?:?...
[  Info  ] Verified: 79 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for subseqForall @152:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for subseqForall @152:15...
[  Info  ] Verified: 80 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList' VC for subseqForall @155:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList' VC for subseqForall @155:9...
[  Info  ] Verified: 81 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of subseqForall' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of subseqForall' VC for subseqForall @158:9...
[  Info  ] Verified: 82 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of subseqForall' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of subseqForall' VC for subseqForall @158:9...
[  Info  ] Verified: 83 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for subseqForall @?:?...
[  Info  ] Verified: 84 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @158:9...
[  Info  ] Verified: 85 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @160:21...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @160:21...
[  Info  ] Verified: 86 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for subseqForall @153:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for subseqForall @153:5...
[  Info  ] Verified: 87 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @153:5...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @153:5...
[  Info  ] Verified: 88 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @662:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @662:29...
[  Info  ] Verified: 89 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[  Info  ] Verified: 90 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[  Info  ] Verified: 91 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[  Info  ] Verified: 92 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[  Info  ] Verified: 93 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 94 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 95 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 96 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @664:6...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @664:6...
[  Info  ] Verified: 97 / 982
[ Debug  ]  - Checking cache: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 98 / 982
[ Debug  ]  - Checking cache: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 99 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[  Info  ] Verified: 100 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @575:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @575:9...
[  Info  ] Verified: 101 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 102 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @575:9...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @575:9...
[  Info  ] Verified: 103 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @577:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @577:9...
[  Info  ] Verified: 104 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 105 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @577:9...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @577:9...
[  Info  ] Verified: 106 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @580:51...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @580:51...
[  Info  ] Verified: 107 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for concatWithoutDuplicates @573:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for concatWithoutDuplicates @573:5...
[  Info  ] Verified: 108 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @573:5...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @573:5...
[  Info  ] Verified: 109 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[  Info  ] Verified: 110 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[  Info  ] Verified: 111 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[  Info  ] Verified: 112 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 113 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 114 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 115 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 116 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 117 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 118 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 119 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 120 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 121 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[  Info  ] Verified: 122 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[  Info  ] Verified: 123 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[  Info  ] Verified: 124 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[  Info  ] Verified: 125 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[  Info  ] Verified: 126 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[  Info  ] Verified: 127 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[  Info  ] Verified: 128 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[  Info  ] Verified: 129 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 130 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 131 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsConcatPreserves @890:16...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsConcatPreserves @890:16...
[  Info  ] Verified: 132 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[  Info  ] Verified: 133 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 134 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 135 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 136 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 137 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsConcatPreserves @884:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsConcatPreserves @884:5...
[  Info  ] Verified: 138 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @884:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @884:5...
[  Info  ] Verified: 139 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatNotContainedPreserves @1018:7...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatNotContainedPreserves @1018:7...
[  Info  ] Verified: 140 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 141 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 142 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[  Info  ] Verified: 143 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 144 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 145 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 146 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 147 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[  Info  ] Verified: 148 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[  Info  ] Verified: 149 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[  Info  ] Verified: 150 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[ Debug  ] Cache hit: 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[  Info  ] Verified: 151 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[  Info  ] Verified: 152 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaConcatAssociativity @319:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaConcatAssociativity @319:12...
[  Info  ] Verified: 153 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[  Info  ] Verified: 154 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[  Info  ] Verified: 155 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[  Info  ] Verified: 156 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @321:28...
[  Info  ] Verified: 157 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @322:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @322:28...
[  Info  ] Verified: 158 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[  Info  ] Verified: 159 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @320:5...
[  Info  ] Verified: 160 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 161 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 162 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[  Info  ] Verified: 163 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[  Info  ] Verified: 164 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 165 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[  Info  ] Verified: 166 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[  Info  ] Verified: 167 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 168 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[  Info  ] Verified: 169 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @173:17...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @173:17...
[  Info  ] Verified: 170 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 171 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 172 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for notContainsAddNotEqThenNotContains @1127:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for notContainsAddNotEqThenNotContains @1127:15...
[  Info  ] Verified: 173 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 174 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 175 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 176 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 177 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 178 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[ Debug  ] Cache hit: 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[  Info  ] Verified: 179 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[  Info  ] Verified: 180 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 181 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 182 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 183 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 184 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 185 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[  Info  ] Verified: 186 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 187 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 188 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 189 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 190 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 191 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 192 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 193 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[  Info  ] Verified: 194 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[  Info  ] Verified: 195 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @477:5...
[  Info  ] Verified: 196 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 197 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 198 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 199 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainedNoDupThenConcatNoDup @976:62...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainedNoDupThenConcatNoDup @976:62...
[  Info  ] Verified: 200 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 201 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 202 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 203 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 204 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 205 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @221:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @221:13...
[  Info  ] Verified: 206 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaSameIndexThenSameElement @221:32...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaSameIndexThenSameElement @221:32...
[  Info  ] Verified: 207 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @224:9...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @224:9...
[  Info  ] Verified: 208 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @225:14...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @225:14...
[  Info  ] Verified: 209 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @226:14...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @226:14...
[  Info  ] Verified: 210 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaSameIndexThenSameElement @229:37...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaSameIndexThenSameElement @229:37...
[  Info  ] Verified: 211 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 212 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 213 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 214 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @225:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @225:14...
[  Info  ] Verified: 215 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @226:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @226:14...
[  Info  ] Verified: 216 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @227:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @227:14...
[  Info  ] Verified: 217 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSameIndexThenSameElement @229:37...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSameIndexThenSameElement @229:37...
[  Info  ] Verified: 218 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameIndexThenSameElement @225:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameIndexThenSameElement @225:7...
[  Info  ] Verified: 219 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 220 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 221 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 222 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 223 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 224 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[  Info  ] Verified: 225 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[  Info  ] Verified: 226 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[ Debug  ] Cache hit: 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[  Info  ] Verified: 227 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[  Info  ] Verified: 228 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[  Info  ] Verified: 229 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[  Info  ] Verified: 230 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[  Info  ] Verified: 231 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[  Info  ] Verified: 232 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[  Info  ] Verified: 233 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[  Info  ] Verified: 234 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[  Info  ] Verified: 235 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[  Info  ] Verified: 236 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 237 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 238 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[  Info  ] Verified: 239 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[  Info  ] Verified: 240 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[  Info  ] Verified: 241 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 242 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 243 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 244 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 245 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 246 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 247 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 248 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 249 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[  Info  ] Verified: 250 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[  Info  ] Verified: 251 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[  Info  ] Verified: 252 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 253 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 254 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[  Info  ] Verified: 255 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 256 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 257 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 258 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 259 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 260 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 261 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 262 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 263 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 264 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 265 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 266 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for removeDuplicates @614:100...
[ Debug  ] Cache hit: 'non-negative measure' VC for removeDuplicates @614:100...
[  Info  ] Verified: 267 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @591:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @591:9...
[  Info  ] Verified: 268 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[  Info  ] Verified: 269 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[  Info  ] Verified: 270 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[  Info  ] Verified: 271 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'measure decreases' VC for removeDuplicates @596:9...
[  Info  ] Verified: 272 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @596:9...
[  Info  ] Verified: 273 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @599:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @599:9...
[  Info  ] Verified: 274 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[  Info  ] Verified: 275 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[  Info  ] Verified: 276 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[  Info  ] Verified: 277 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[  Info  ] Verified: 278 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[  Info  ] Verified: 279 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[  Info  ] Verified: 280 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 281 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 282 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 283 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 284 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'measure decreases' VC for removeDuplicates @610:9...
[  Info  ] Verified: 285 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @610:9...
[  Info  ] Verified: 286 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @614:108...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @614:108...
[  Info  ] Verified: 287 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[  Info  ] Verified: 288 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @589:5...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @589:5...
[  Info  ] Verified: 289 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsNilRefList @972:51...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsNilRefList @972:51...
[  Info  ] Verified: 290 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 291 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 292 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 293 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 294 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 295 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 296 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 297 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 298 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 299 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 300 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 301 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 302 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 303 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 304 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 305 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 306 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 307 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 308 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 309 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 310 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 311 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 312 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 313 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 314 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 315 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 316 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 317 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 318 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 319 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 320 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 321 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 322 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 323 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 324 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 325 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 326 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 327 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 328 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 329 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 330 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 331 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 332 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 333 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 334 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 335 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 336 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 337 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 338 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @702:17...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @702:17...
[  Info  ] Verified: 339 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 340 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 341 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 342 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 343 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 344 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 345 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 346 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[ Debug  ] Cache hit: 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[  Info  ] Verified: 347 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreservesBis @1057:35...
[ Debug  ] Cache hit: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreservesBis @1057:35...
[  Info  ] Verified: 348 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[  Info  ] Verified: 349 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[  Info  ] Verified: 350 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[  Info  ] Verified: 351 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 352 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 353 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 354 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 355 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 356 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 357 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[  Info  ] Verified: 358 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[  Info  ] Verified: 359 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[  Info  ] Verified: 360 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 361 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[  Info  ] Verified: 362 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 363 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 364 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 365 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 366 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 367 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 368 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 369 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @964:69...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @964:69...
[  Info  ] Verified: 370 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 371 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 372 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 373 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 374 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 375 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 376 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 377 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @763:17...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @763:17...
[  Info  ] Verified: 378 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[  Info  ] Verified: 379 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[  Info  ] Verified: 380 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 381 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 382 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 383 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 384 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[  Info  ] Verified: 385 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[  Info  ] Verified: 386 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[  Info  ] Verified: 387 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAThenTailNotContains[B]((s...)' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAThenTailNotContains[B]((s...)' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 388 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 389 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 390 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 391 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for notContainsAThenTailNotContains @1139:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for notContainsAThenTailNotContains @1139:15...
[  Info  ] Verified: 392 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 393 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 394 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 395 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 396 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 397 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContained[B](l1, (b: B) => cont...)' VC for lemmaForallContainsPreservedIfSameContent @918:9...
[ Debug  ] Cache hit: 'precond. (call forallContained[B](l1, (b: B) => cont...)' VC for lemmaForallContainsPreservedIfSameContent @918:9...
[  Info  ] Verified: 398 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 399 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 400 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedIfSameContent @922:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedIfSameContent @922:15...
[  Info  ] Verified: 401 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @916:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @916:21...
[  Info  ] Verified: 402 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 403 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 404 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 405 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 406 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[  Info  ] Verified: 407 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[  Info  ] Verified: 408 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[  Info  ] Verified: 409 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[  Info  ] Verified: 410 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 411 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 412 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 413 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[  Info  ] Verified: 414 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 415 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 416 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 417 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 418 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 419 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[  Info  ] Verified: 420 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[  Info  ] Verified: 421 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[  Info  ] Verified: 422 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 423 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[  Info  ] Verified: 424 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 425 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 426 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 427 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 428 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 429 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[  Info  ] Verified: 430 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[  Info  ] Verified: 431 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[  Info  ] Verified: 432 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 433 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 434 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 435 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 436 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 437 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 438 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[  Info  ] Verified: 439 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 440 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 441 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[  Info  ] Verified: 442 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 443 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[  Info  ] Verified: 444 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[  Info  ] Verified: 445 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[  Info  ] Verified: 446 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[  Info  ] Verified: 447 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 448 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 449 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[  Info  ] Verified: 450 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[  Info  ] Verified: 451 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[  Info  ] Verified: 452 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[  Info  ] Verified: 453 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[  Info  ] Verified: 454 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 455 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 456 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[  Info  ] Verified: 457 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[  Info  ] Verified: 458 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[  Info  ] Verified: 459 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[  Info  ] Verified: 460 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[  Info  ] Verified: 461 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[  Info  ] Verified: 462 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[  Info  ] Verified: 463 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[  Info  ] Verified: 464 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[  Info  ] Verified: 465 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[  Info  ] Verified: 466 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[  Info  ] Verified: 467 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[  Info  ] Verified: 468 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[  Info  ] Verified: 469 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 470 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 471 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 472 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSubSeqAddSameElmtPreserves @719:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSubSeqAddSameElmtPreserves @719:18...
[  Info  ] Verified: 473 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[  Info  ] Verified: 474 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[  Info  ] Verified: 475 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[  Info  ] Verified: 476 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 477 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[  Info  ] Verified: 478 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[  Info  ] Verified: 479 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 480 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[  Info  ] Verified: 481 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[  Info  ] Verified: 482 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 483 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[  Info  ] Verified: 484 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[  Info  ] Verified: 485 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[  Info  ] Verified: 486 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[  Info  ] Verified: 487 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[  Info  ] Verified: 488 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[  Info  ] Verified: 489 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[  Info  ] Verified: 490 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[  Info  ] Verified: 491 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[  Info  ] Verified: 492 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 493 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 494 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForConcat @941:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForConcat @941:50...
[  Info  ] Verified: 495 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 496 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 497 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 498 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 499 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 500 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 501 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 502 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[  Info  ] Verified: 503 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 504 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 505 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 506 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 507 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[  Info  ] Verified: 508 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[  Info  ] Verified: 509 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[  Info  ] Verified: 510 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[  Info  ] Verified: 511 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[  Info  ] Verified: 512 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatThenSecondSubseqOfTot @739:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatThenSecondSubseqOfTot @739:15...
[  Info  ] Verified: 513 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatThenSecondSubseqOfTot @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatThenSecondSubseqOfTot @?:?...
[  Info  ] Verified: 514 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[  Info  ] Verified: 515 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[  Info  ] Verified: 516 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[  Info  ] Verified: 517 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[  Info  ] Verified: 518 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 519 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 520 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsCannotContain @949:54...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsCannotContain @949:54...
[  Info  ] Verified: 521 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 522 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 523 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 524 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 525 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 526 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[  Info  ] Verified: 527 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 528 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 529 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 530 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 531 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 532 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 533 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[  Info  ] Verified: 534 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 535 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 536 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 537 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 538 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 539 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[  Info  ] Verified: 540 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[  Info  ] Verified: 541 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[  Info  ] Verified: 542 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 543 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 544 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 545 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @777:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @777:39...
[  Info  ] Verified: 546 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 547 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 548 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 549 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 550 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @779:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @779:39...
[  Info  ] Verified: 551 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 552 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 553 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[ Debug  ] Cache hit: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[  Info  ] Verified: 554 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:57...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:57...
[  Info  ] Verified: 555 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[ Debug  ] Cache hit: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[  Info  ] Verified: 556 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[  Info  ] Verified: 557 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[  Info  ] Verified: 558 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaTwoListsConcatAssociativity @333:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaTwoListsConcatAssociativity @333:15...
[  Info  ] Verified: 559 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaTwoListsConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaTwoListsConcatAssociativity @?:?...
[  Info  ] Verified: 560 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[  Info  ] Verified: 561 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[  Info  ] Verified: 562 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTwoListsConcatAssociativity @334:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTwoListsConcatAssociativity @334:5...
[  Info  ] Verified: 563 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @334:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTwoListsConcatAssociativity @334:5...
[  Info  ] Verified: 564 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for reverseList @30:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for reverseList @30:5...
[  Info  ] Verified: 565 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for reverseList @31:28...
[ Debug  ] Cache hit: 'measure decreases' VC for reverseList @31:28...
[  Info  ] Verified: 566 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for reverseList @30:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for reverseList @30:5...
[  Info  ] Verified: 567 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[  Info  ] Verified: 568 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[  Info  ] Verified: 569 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[  Info  ] Verified: 570 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[  Info  ] Verified: 571 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[  Info  ] Verified: 572 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[  Info  ] Verified: 573 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[  Info  ] Verified: 574 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[  Info  ] Verified: 575 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[  Info  ] Verified: 576 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] Cache hit: 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[  Info  ] Verified: 577 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[  Info  ] Verified: 578 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 579 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 580 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 581 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[  Info  ] Verified: 582 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[  Info  ] Verified: 583 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[  Info  ] Verified: 584 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[  Info  ] Verified: 585 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[  Info  ] Verified: 586 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 587 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 588 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 589 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 590 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 591 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[  Info  ] Verified: 592 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[  Info  ] Verified: 593 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 594 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 595 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubseqOfEmptyIsEmpty @628:44...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubseqOfEmptyIsEmpty @628:44...
[  Info  ] Verified: 596 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 597 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 598 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 599 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 600 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 601 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 602 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 603 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 604 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 605 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 606 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 607 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 608 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 609 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 610 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 611 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 612 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 613 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 614 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 615 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 616 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 617 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 618 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[  Info  ] Verified: 619 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[  Info  ] Verified: 620 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[  Info  ] Verified: 621 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[  Info  ] Verified: 622 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[  Info  ] Verified: 623 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[  Info  ] Verified: 624 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[  Info  ] Verified: 625 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[  Info  ] Verified: 626 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[  Info  ] Verified: 627 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[  Info  ] Verified: 628 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[  Info  ] Verified: 629 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[  Info  ] Verified: 630 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[  Info  ] Verified: 631 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[  Info  ] Verified: 632 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[  Info  ] Verified: 633 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[  Info  ] Verified: 634 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 635 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[  Info  ] Verified: 636 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[  Info  ] Verified: 637 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[  Info  ] Verified: 638 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[  Info  ] Verified: 639 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[  Info  ] Verified: 640 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[  Info  ] Verified: 641 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[  Info  ] Verified: 642 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[  Info  ] Verified: 643 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[  Info  ] Verified: 644 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[  Info  ] Verified: 645 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[  Info  ] Verified: 646 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[  Info  ] Verified: 647 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaNoDuplicatePreservedSameContent @1091:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaNoDuplicatePreservedSameContent @1091:11...
[  Info  ] Verified: 648 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[  Info  ] Verified: 649 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 650 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 651 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[  Info  ] Verified: 652 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 653 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContainsSubset[B](lIn, l))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @822:9...
[ Debug  ] Cache hit: 'precond. (call forallContainsSubset[B](lIn, l))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @822:9...
[  Info  ] Verified: 654 / 982
[ Debug  ]  - Checking cache: 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[ Debug  ] Cache hit: 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[  Info  ] Verified: 655 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 656 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 657 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 658 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @823:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @823:16...
[  Info  ] Verified: 659 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @824:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @824:16...
[  Info  ] Verified: 660 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[  Info  ] Verified: 661 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[  Info  ] Verified: 662 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[  Info  ] Verified: 663 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[  Info  ] Verified: 664 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[  Info  ] Verified: 665 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[  Info  ] Verified: 666 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[  Info  ] Verified: 667 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[  Info  ] Verified: 668 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[  Info  ] Verified: 669 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 670 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @833:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @833:9...
[  Info  ] Verified: 671 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[  Info  ] Verified: 672 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[  Info  ] Verified: 673 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[  Info  ] Verified: 674 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[  Info  ] Verified: 675 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 676 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 677 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 678 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[  Info  ] Verified: 679 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 680 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 681 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 682 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 683 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 684 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 685 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubsetContentThenForallContains @1119:55...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubsetContentThenForallContains @1119:55...
[  Info  ] Verified: 686 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 687 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 688 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 689 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 690 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 691 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 692 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 693 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[  Info  ] Verified: 694 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveElmtContainedSizeSmaller @999:30...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveElmtContainedSizeSmaller @999:30...
[  Info  ] Verified: 695 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[  Info  ] Verified: 696 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 697 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[  Info  ] Verified: 698 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[  Info  ] Verified: 699 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[  Info  ] Verified: 700 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 701 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[  Info  ] Verified: 702 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[  Info  ] Verified: 703 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[  Info  ] Verified: 704 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[  Info  ] Verified: 705 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[  Info  ] Verified: 706 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 707 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 708 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 709 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1014:44...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1014:44...
[  Info  ] Verified: 710 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[  Info  ] Verified: 711 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[  Info  ] Verified: 712 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[  Info  ] Verified: 713 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 714 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 715 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 716 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 717 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[  Info  ] Verified: 718 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[  Info  ] Verified: 719 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 720 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtNotContainedSameList @1105:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtNotContainedSameList @1105:57...
[  Info  ] Verified: 721 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 722 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 723 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 724 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 725 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 726 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 727 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1112:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1112:57...
[  Info  ] Verified: 728 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 729 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 730 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 731 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 732 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 733 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaContainsAndNotHdThenTlContains @182:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaContainsAndNotHdThenTlContains @182:13...
[  Info  ] Verified: 734 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaContainsAndNotHdThenTlContains @184:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaContainsAndNotHdThenTlContains @184:15...
[  Info  ] Verified: 735 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaContainsAndNotHdThenTlContains @180:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaContainsAndNotHdThenTlContains @180:7...
[  Info  ] Verified: 736 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 737 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 738 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 739 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @651:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfListBis @651:28...
[  Info  ] Verified: 740 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @652:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfListBis @652:28...
[  Info  ] Verified: 741 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfListBis @650:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfListBis @650:5...
[  Info  ] Verified: 742 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @650:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfListBis @650:5...
[  Info  ] Verified: 743 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[ Debug  ] Cache hit: 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[  Info  ] Verified: 744 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[  Info  ] Verified: 745 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @637:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @637:21...
[  Info  ] Verified: 746 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[  Info  ] Verified: 747 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[  Info  ] Verified: 748 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfList @636:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfList @636:5...
[  Info  ] Verified: 749 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @636:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfList @636:5...
[  Info  ] Verified: 750 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for consecutiveSubseq @61:49...
[ Debug  ] Cache hit: 'non-negative measure' VC for consecutiveSubseq @61:49...
[  Info  ] Verified: 751 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for consecutiveSubseq @60:46...
[ Debug  ] Cache hit: 'measure decreases' VC for consecutiveSubseq @60:46...
[  Info  ] Verified: 752 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for consecutiveSubseq @58:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for consecutiveSubseq @58:5...
[  Info  ] Verified: 753 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for consecutiveSubseqAtHead @67:6...
[ Debug  ] Cache hit: 'non-negative measure' VC for consecutiveSubseqAtHead @67:6...
[  Info  ] Verified: 754 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for consecutiveSubseqAtHead @70:9...
[ Debug  ] Cache hit: 'measure decreases' VC for consecutiveSubseqAtHead @70:9...
[  Info  ] Verified: 755 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[  Info  ] Verified: 756 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[  Info  ] Verified: 757 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @403:27...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @403:27...
[  Info  ] Verified: 758 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[  Info  ] Verified: 759 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[  Info  ] Verified: 760 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[  Info  ] Verified: 761 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[  Info  ] Verified: 762 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[  Info  ] Verified: 763 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[  Info  ] Verified: 764 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallThenDisjunction2[B]((scrut...)' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallThenDisjunction2[B]((scrut...)' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 765 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallThenDisjunction2 @785:46...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallThenDisjunction2 @785:46...
[  Info  ] Verified: 766 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 767 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 768 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 769 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 770 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 771 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @242:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @242:13...
[  Info  ] Verified: 772 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:13...
[  Info  ] Verified: 773 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:31...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:31...
[  Info  ] Verified: 774 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @245:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @245:15...
[  Info  ] Verified: 775 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @235:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @235:7...
[  Info  ] Verified: 776 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B]((scrut.t): @DropVCs , e))' VC for getIndex @51:43...
[ Debug  ] Cache hit: 'precond. (call getIndex[B]((scrut.t): @DropVCs , e))' VC for getIndex @51:43...
[  Info  ] Verified: 777 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for getIndex @49:5...
[  Info  ] Verified: 778 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @50:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @50:39...
[  Info  ] Verified: 779 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getIndex @51:43...
[ Debug  ] Cache hit: 'measure decreases' VC for getIndex @51:43...
[  Info  ] Verified: 780 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @51:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @51:39...
[  Info  ] Verified: 781 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @52:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @52:39...
[  Info  ] Verified: 782 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getIndex @49:5...
[  Info  ] Verified: 783 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @49:5...
[  Info  ] Verified: 784 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))' VC for lemmaIsSuffixThenSubseq @?:?...
[  Info  ] Verified: 785 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[  Info  ] Verified: 786 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenSubseq' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenSubseq' VC for lemmaIsSuffixThenSubseq @101:56...
[  Info  ] Verified: 787 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[  Info  ] Verified: 788 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[  Info  ] Verified: 789 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[  Info  ] Verified: 790 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[  Info  ] Verified: 791 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 792 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 793 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[  Info  ] Verified: 794 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 795 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 796 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 797 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 798 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 799 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 800 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 801 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 802 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreserves @1037:35...
[ Debug  ] Cache hit: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreserves @1037:35...
[  Info  ] Verified: 803 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 804 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 805 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 806 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 807 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 808 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[  Info  ] Verified: 809 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[  Info  ] Verified: 810 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[  Info  ] Verified: 811 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[ Debug  ] Cache hit: 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[  Info  ] Verified: 812 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[  Info  ] Verified: 813 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[  Info  ] Verified: 814 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[  Info  ] Verified: 815 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[  Info  ] Verified: 816 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[  Info  ] Verified: 817 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[  Info  ] Verified: 818 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[  Info  ] Verified: 819 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[  Info  ] Verified: 820 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 821 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmt @894:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmt @894:57...
[  Info  ] Verified: 822 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 823 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 824 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 825 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 826 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 827 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubseqRefl @619:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubseqRefl @619:15...
[  Info  ] Verified: 828 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @621:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqRefl @621:28...
[  Info  ] Verified: 829 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubseqRefl @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubseqRefl @?:?...
[  Info  ] Verified: 830 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @622:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqRefl @622:28...
[  Info  ] Verified: 831 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubseqRefl @620:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaSubseqRefl @620:5...
[  Info  ] Verified: 832 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @620:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubseqRefl @620:5...
[  Info  ] Verified: 833 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 834 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[  Info  ] Verified: 835 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 836 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 837 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastFromLMakesItPrefix @459:39...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastFromLMakesItPrefix @459:39...
[  Info  ] Verified: 838 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[  Info  ] Verified: 839 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[  Info  ] Verified: 840 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[  Info  ] Verified: 841 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[  Info  ] Verified: 842 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[  Info  ] Verified: 843 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[  Info  ] Verified: 844 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 845 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B]((scrut.t): @DropVCs ))' VC for removeLast @23:40...
[ Debug  ] Cache hit: 'precond. (call removeLast[B]((scrut.t): @DropVCs ))' VC for removeLast @23:40...
[  Info  ] Verified: 846 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache hit: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 847 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 848 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for removeLast @26:45...
[ Debug  ] Cache hit: 'non-negative measure' VC for removeLast @26:45...
[  Info  ] Verified: 849 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @22:31...
[ Debug  ] Cache hit: 'postcondition' VC for removeLast @22:31...
[  Info  ] Verified: 850 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeLast @23:40...
[ Debug  ] Cache hit: 'measure decreases' VC for removeLast @23:40...
[  Info  ] Verified: 851 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @23:31...
[ Debug  ] Cache hit: 'postcondition' VC for removeLast @23:31...
[  Info  ] Verified: 852 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for removeLast @21:24...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for removeLast @21:24...
[  Info  ] Verified: 853 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @21:24...
[ Debug  ] Cache hit: 'postcondition' VC for removeLast @21:24...
[  Info  ] Verified: 854 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallThenDisjunction1[B]((scrut...)' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallThenDisjunction1[B]((scrut...)' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 855 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallThenDisjunction1 @791:46...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallThenDisjunction1 @791:46...
[  Info  ] Verified: 856 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 857 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 858 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 859 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 860 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 861 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[  Info  ] Verified: 862 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 863 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 864 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 865 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 866 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 867 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 868 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:28...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:28...
[  Info  ] Verified: 869 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @514:5...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @514:5...
[  Info  ] Verified: 870 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[  Info  ] Verified: 871 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[  Info  ] Verified: 872 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[  Info  ] Verified: 873 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[  Info  ] Verified: 874 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[  Info  ] Verified: 875 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaIsPrefixRefl @265:50...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaIsPrefixRefl @265:50...
[  Info  ] Verified: 876 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 877 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 878 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaIsPrefixRefl @265:28...
[  Info  ] Verified: 879 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 880 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[  Info  ] Verified: 881 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[  Info  ] Verified: 882 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixRefl @264:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixRefl @264:5...
[  Info  ] Verified: 883 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @264:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixRefl @264:5...
[  Info  ] Verified: 884 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[  Info  ] Verified: 885 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[  Info  ] Verified: 886 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[  Info  ] Verified: 887 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getSuffix @44:34...
[ Debug  ] Cache hit: 'non-negative measure' VC for getSuffix @44:34...
[  Info  ] Verified: 888 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'measure decreases' VC for getSuffix @41:28...
[  Info  ] Verified: 889 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @41:28...
[  Info  ] Verified: 890 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @44:34...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @44:34...
[  Info  ] Verified: 891 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[  Info  ] Verified: 892 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @40:5...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @40:5...
[  Info  ] Verified: 893 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[  Info  ] Verified: 894 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[  Info  ] Verified: 895 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 896 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 897 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 898 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 899 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache hit: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[  Info  ] Verified: 900 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache hit: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[  Info  ] Verified: 901 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache hit: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[  Info  ] Verified: 902 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[  Info  ] Verified: 903 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 904 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 905 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 906 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 907 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 908 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 909 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[  Info  ] Verified: 910 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[  Info  ] Verified: 911 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[  Info  ] Verified: 912 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatTwoListThenFirstIsPrefix @278:28...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatTwoListThenFirstIsPrefix @278:28...
[  Info  ] Verified: 913 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatTwoListThenFirstIsPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatTwoListThenFirstIsPrefix @?:?...
[  Info  ] Verified: 914 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[  Info  ] Verified: 915 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[  Info  ] Verified: 916 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[  Info  ] Verified: 917 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[  Info  ] Verified: 918 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[ Debug  ] Cache hit: 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[  Info  ] Verified: 919 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[  Info  ] Verified: 920 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 921 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 922 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 923 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[  Info  ] Verified: 924 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 925 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 926 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 927 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 928 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 929 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[  Info  ] Verified: 930 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[  Info  ] Verified: 931 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[  Info  ] Verified: 932 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](scrut._1))' VC for isPrefix @14:13...
[ Debug  ] Cache hit: 'precond. (call head[B](scrut._1))' VC for isPrefix @14:13...
[  Info  ] Verified: 933 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](scrut._2))' VC for isPrefix @14:24...
[ Debug  ] Cache hit: 'precond. (call head[B](scrut._2))' VC for isPrefix @14:24...
[  Info  ] Verified: 934 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._1))' VC for isPrefix @14:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._1))' VC for isPrefix @14:42...
[  Info  ] Verified: 935 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._2))' VC for isPrefix @14:51...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._2))' VC for isPrefix @14:51...
[  Info  ] Verified: 936 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for isPrefix @9:7...
[ Debug  ] Cache hit: 'non-negative measure' VC for isPrefix @9:7...
[  Info  ] Verified: 937 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 938 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 939 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 940 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 941 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for isPrefix @14:33...
[ Debug  ] Cache hit: 'measure decreases' VC for isPrefix @14:33...
[  Info  ] Verified: 942 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 943 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 944 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 945 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 946 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenForEqualLists @797:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenForEqualLists @797:7...
[  Info  ] Verified: 947 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 948 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 949 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 950 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 951 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[  Info  ] Verified: 952 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 953 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 954 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 955 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 956 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 957 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 958 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 959 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 960 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 961 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 962 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 963 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 964 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[  Info  ] Verified: 965 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[  Info  ] Verified: 966 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[  Info  ] Verified: 967 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[  Info  ] Verified: 968 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[  Info  ] Verified: 969 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[  Info  ] Verified: 970 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[  Info  ] Verified: 971 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[  Info  ] Verified: 972 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)' VC for getPrefix @90:64...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)' VC for getPrefix @90:64...
[  Info  ] Verified: 973 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getPrefix @87:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for getPrefix @87:15...
[  Info  ] Verified: 974 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @89:55...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @89:55...
[  Info  ] Verified: 975 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getPrefix @90:64...
[ Debug  ] Cache hit: 'measure decreases' VC for getPrefix @90:64...
[  Info  ] Verified: 976 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @90:55...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @90:55...
[  Info  ] Verified: 977 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @91:55...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @91:55...
[  Info  ] Verified: 978 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getPrefix @88:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getPrefix @88:5...
[  Info  ] Verified: 979 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @88:5...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @88:5...
[  Info  ] Verified: 980 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for isSuffix @76:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for isSuffix @76:15...
[  Info  ] Verified: 981 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for isSuffix @78:62...
[ Debug  ] Cache hit: 'measure decreases' VC for isSuffix @78:62...
[  Info  ] Verified: 982 / 982
[  Info  ] Done in 47.55s
[  Info  ]   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
[  Info  ] ‚ïî‚ïê‚ï° stainless summary ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
[  Info  ] ‚ïë ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                                                                                                                                                                                                 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           precond. (call concatWithoutDuplicates[B](baseList, ...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           precond. (call concatWithoutDuplicates[B](baseList, ...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:571:15:    concatWithoutDuplicates                                           non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:573:5:     concatWithoutDuplicates                                           body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:573:5:     concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:575:9:     concatWithoutDuplicates                                           body assertion: Inlined precondition of concatWithoutDuplicates                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:575:9:     concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:577:9:     concatWithoutDuplicates                                           body assertion: Inlined precondition of concatWithoutDuplicates                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:577:9:     concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:580:51:    concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:58:5:      consecutiveSubseq                                                 body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:60:46:     consecutiveSubseq                                                 measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:61:49:     consecutiveSubseq                                                 non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:67:6:      consecutiveSubseqAtHead                                           non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:70:9:      consecutiveSubseqAtHead                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:50:39:     getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:39:     getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:43:     getIndex                                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:43:     getIndex                                                          precond. (call getIndex[B]((scrut.t): @DropVCs , e))                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:52:39:     getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:87:15:     getPrefix                                                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:88:5:      getPrefix                                                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:88:5:      getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:89:55:     getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:55:     getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:64:     getPrefix                                                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:64:     getPrefix                                                         precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:91:55:     getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:40:5:      getSuffix                                                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:40:5:      getSuffix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:38:     getSuffix                                                         precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:44:34:     getSuffix                                                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:44:34:     getSuffix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:9:7:       isPrefix                                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:13:     isPrefix                                                          precond. (call head[B](scrut._1))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:24:     isPrefix                                                          precond. (call head[B](scrut._2))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:33:     isPrefix                                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:42:     isPrefix                                                          precond. (call tail[B](scrut._1))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:51:     isPrefix                                                          precond. (call tail[B](scrut._2))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:76:15:     isSuffix                                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:78:62:     isSuffix                                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:504:5:     lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:504:5:     lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:70:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:506:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:57:    lemmaAddHeadSuffixToPrefixStillPrefix                             non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:5:     lemmaChangeCutStillConcatTotal                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:47:    lemmaChangeCutStillConcatTotal                                    precond. (call head[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:57:    lemmaChangeCutStillConcatTotal                                    precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:355:27:    lemmaChangeCutStillConcatTotal                                    precond. (call head[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:355:40:    lemmaChangeCutStillConcatTotal                                    precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatAssociativity                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatAssociativity                                          precond. (call lemmaConcatAssociativity[B](l1, elmt,...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:319:12:    lemmaConcatAssociativity                                          body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:320:5:     lemmaConcatAssociativity                                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:320:5:     lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:28:    lemmaConcatAssociativity                                          body assertion: Inlined precondition of lemmaConcatAssociativity                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:28:    lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:67:    lemmaConcatAssociativity                                          precond. (call tail[B](tot))                                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:322:28:    lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:324:15:    lemmaConcatAssociativity                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatThenFirstSubseqOfTot                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:729:15:    lemmaConcatThenFirstSubseqOfTot                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:730:5:     lemmaConcatThenFirstSubseqOfTot                                   body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:730:5:     lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:731:28:    lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:732:28:    lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatThenSecondSubseqOfTot                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:739:15:    lemmaConcatThenSecondSubseqOfTot                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:740:5:     lemmaConcatThenSecondSubseqOfTot                                  body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:740:5:     lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:741:28:    lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:742:28:    lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListThenFirstIsPrefix                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:274:5:     lemmaConcatTwoListThenFirstIsPrefix                               body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:274:5:     lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:275:28:    lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:276:28:    lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:278:28:    lemmaConcatTwoListThenFirstIsPrefix                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:757:5:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:757:5:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:758:39:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:758:39:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:761:21:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:763:17:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:167:15:    lemmaConsecutiveSubseqThenSubseq                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:170:9:     lemmaConsecutiveSubseqThenSubseq                                  body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:170:9:     lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:172:9:     lemmaConsecutiveSubseqThenSubseq                                  body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:172:9:     lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:173:17:    lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:180:7:     lemmaContainsAndNotHdThenTlContains                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:182:13:    lemmaContainsAndNotHdThenTlContains                               precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:184:15:    lemmaContainsAndNotHdThenTlContains                               precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:869:5:     lemmaForallContainsAddingElmtInPreserves                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:869:5:     lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:872:21:    lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:875:23:    lemmaForallContainsAddingElmtInPreserves                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingInSndListPreserves                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingInSndListPreserves                       precond. (call lemmaForallContainsAddingInSndListPre...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:850:5:     lemmaForallContainsAddingInSndListPreserves                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:850:5:     lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:852:9:     lemmaForallContainsAddingInSndListPreserves                       body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:852:9:     lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:853:21:    lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:856:15:    lemmaForallContainsAddingInSndListPreserves                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:817:15:    lemmaForallContainsAndNoDuplicateThenSmallerList                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:819:5:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:819:5:     lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:822:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call forallContainsSubset[B](lIn, l))                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:823:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:824:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:826:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:827:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call subsetContains[B]((scrut.t): @DropVCs...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:828:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:828:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:829:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:830:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:831:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:832:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:833:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:834:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:834:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:836:21:    lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:884:5:     lemmaForallContainsConcatPreserves                                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:884:5:     lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:885:21:    lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:890:16:    lemmaForallContainsConcatPreserves                                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:915:5:     lemmaForallContainsPreservedIfSameContent                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:915:5:     lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:916:21:    lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:918:9:     lemmaForallContainsPreservedIfSameContent                         precond. (call forallContained[B](l1, (b: B) => cont...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:922:15:    lemmaForallContainsPreservedIfSameContent                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            precond. (call lemmaForallContainsPreservedRemoveElm...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:894:57:    lemmaForallContainsPreservedRemoveElmt                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:901:66:    lemmaForallContainsPreservedRemoveElmtInRefList                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:797:7:     lemmaForallContainsThenForEqualLists                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:777:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:779:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:976:62:    lemmaForallNotContainedNoDupThenConcatNoDup                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:949:54:    lemmaForallNotContainsCannotContain                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:933:50:    lemmaForallNotContainsForConcat                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:941:50:    lemmaForallNotContainsForConcat                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   precond. (call lemmaForallNotContainsForSubseq[B]((s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:926:50:    lemmaForallNotContainsForSubseq                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:51:    lemmaForallNotContainsNilRefList                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:964:69:    lemmaForallNotContainsPreservedAddNewElmtInRefList                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       precond. (call lemmaForallThenDisjunction1[B]((scrut...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:791:46:    lemmaForallThenDisjunction1                                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       precond. (call lemmaForallThenDisjunction2[B]((scrut...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:785:46:    lemmaForallThenDisjunction2                                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:235:7:     lemmaGetIndexBiggerAndHeadEqThenTailContains                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:242:13:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:243:13:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:243:31:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call getIndex[B](l, e2))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:245:15:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:195:13:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:195:31:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call getIndex[B](l, e2))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:198:5:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:202:16:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:204:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:204:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:205:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:205:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:206:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:206:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:210:21:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:5:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:12:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:12:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:214:15:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:214:15:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetSuffixOnListWithItSelfIsEmpty                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call lemmaIsPrefixRefl[B](l1, l2))                                                                    trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:514:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             body assertion: Inlined precondition of lemmaIsPrefixRefl                                                       trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:516:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:516:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:517:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:518:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 precond. (call lemmaIsPrefixRefl[B](l1, l2))                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:264:5:     lemmaIsPrefixRefl                                                 body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:264:5:     lemmaIsPrefixRefl                                                 postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:28:    lemmaIsPrefixRefl                                                 body assertion: Inlined precondition of lemmaIsPrefixRefl                                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:28:    lemmaIsPrefixRefl                                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:50:    lemmaIsPrefixRefl                                                 precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:266:28:    lemmaIsPrefixRefl                                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:423:5:     lemmaIsPrefixSameLengthThenSameList                               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:423:5:     lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:49:    lemmaIsPrefixSameLengthThenSameList                               precond. (call tail[B](p2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:58:    lemmaIsPrefixSameLengthThenSameList                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:58:    lemmaIsPrefixSameLengthThenSameList                               precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:426:21:    lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixThenSmallerEqSize                                    measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixThenSmallerEqSize                                    precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:491:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:492:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:26:    lemmaIsPrefixThenSmallerEqSize                                    body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:57:    lemmaIsPrefixThenSmallerEqSize                                    precond. (call tail[B](scrut._1))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:66:    lemmaIsPrefixThenSmallerEqSize                                    precond. (call tail[B](scrut._2))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:495:25:    lemmaIsPrefixThenSmallerEqSize                                    non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenSubseq                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenSubseq                                           precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:99:15:     lemmaIsSuffixThenSubseq                                           non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:101:56:    lemmaIsSuffixThenSubseq                                           body assertion: Inlined precondition of lemmaIsSuffixThenSubseq                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:101:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:102:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:103:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenTailIsSuffix                                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenTailIsSuffix                                     precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:113:15:    lemmaIsSuffixThenTailIsSuffix                                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:114:5:     lemmaIsSuffixThenTailIsSuffix                                     body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:114:5:     lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:115:59:    lemmaIsSuffixThenTailIsSuffix                                     body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:115:59:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:117:16:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:119:11:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:119:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:11:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:18:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:33:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:18:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:33:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:124:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:124:27:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1151:15:   lemmaListContainsThenFilterContainsNotEmpty                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1152:5:    lemmaListContainsThenFilterContainsNotEmpty                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1152:5:    lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1156:10:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1158:21:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1158:21:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1167:15:   lemmaListNotContainsThenFilterContainsEmpty                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1168:5:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1168:5:    lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1172:21:   lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:296:5:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:296:5:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:301:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call tail[B](p2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:302:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:302:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:304:21:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaMoveElementToOtherListKeepsConcatEq                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaMoveElementToOtherListKeepsConcatEq                          precond. (call lemmaMoveElementToOtherListKeepsConca...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:533:5:     lemmaMoveElementToOtherListKeepsConcatEq                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:533:5:     lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:9:     lemmaMoveElementToOtherListKeepsConcatEq                          body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:9:     lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:65:    lemmaMoveElementToOtherListKeepsConcatEq                          precond. (call tail[B](tot))                                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:536:21:    lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:539:43:    lemmaMoveElementToOtherListKeepsConcatEq                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       precond. (call lemmaNoDuplicateConcatThenForallNotCo...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:957:62:    lemmaNoDuplicateConcatThenForallNotContains                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1065:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaSubsetContentThenForallContains                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1066:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaSubsetContentThenForallContains                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1067:12:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1068:12:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1069:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1072:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1074:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1075:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1075:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1077:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1078:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1079:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1080:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1080:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1081:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1082:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1083:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1084:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1087:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1088:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1088:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1089:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1091:11:   lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1092:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1093:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1094:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1095:11:   lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:37:   lemmaNoDuplicatePreservedSameContent                              non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:251:13:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:254:9:     lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call head[B](tail[B](l)))                                                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:254:9:     lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:44:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:256:6:     lemmaNotHeadSoGetIndexTailIsMinusOne                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:15:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](l, e))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:15:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](l, e))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:33:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](tail[B](l), e))                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:33:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](tail[B](l), e))                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:553:5:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:553:5:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:556:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call tail[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:558:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:558:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:560:18:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixStaysPrefixWhenAddingToSuffix                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixStaysPrefixWhenAddingToSuffix                          precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:398:5:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:398:5:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:9:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:9:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:54:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:401:21:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:403:27:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:989:5:     lemmaRemoveElmtContainedSizeSmaller                               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:989:5:     lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:991:16:    lemmaRemoveElmtContainedSizeSmaller                               body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:993:11:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:993:11:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:994:10:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:996:28:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:996:28:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:997:28:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:997:28:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:999:30:    lemmaRemoveElmtContainedSizeSmaller                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastConcatenatedPrefixStillPrefix                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastConcatenatedPrefixStillPrefix                      precond. (call lemmaRemoveLastConcatenatedPrefixStil...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:366:5:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:366:5:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:9:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:9:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:64:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      precond. (call tail[B](tot))                                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:369:21:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:371:24:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:442:5:     lemmaRemoveLastFromBothSidePreservesEq                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:442:5:     lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:74:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:444:28:    lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:48:    lemmaRemoveLastFromBothSidePreservesEq                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromLMakesItPrefix                                 measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromLMakesItPrefix                                 precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))                                                         trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:454:5:     lemmaRemoveLastFromLMakesItPrefix                                 body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:454:5:     lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:455:31:    lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:456:31:    lemmaRemoveLastFromLMakesItPrefix                                 body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:456:31:    lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:39:    lemmaRemoveLastFromLMakesItPrefix                                 non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:407:7:     lemmaRemoveLastPrefixDecreasesSize                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:409:15:    lemmaRemoveLastPrefixDecreasesSize                                precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:381:5:     lemmaRemoveLastPrefixStillPrefix                                  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:381:5:     lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:65:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:383:28:    lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:38:    lemmaRemoveLastPrefixStillPrefix                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNotContainedSameLis...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1008:5:    lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1008:5:    lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1009:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1010:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1010:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1014:44:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            precond. (call lemmaRemoveOneElmtNotContainedSameLis...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1105:57:   lemmaRemoveOneElmtNotContainedSameList                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1112:57:   lemmaRemoveOneElmtPreservesNoDuplicate                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:135:15:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:137:5:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:137:5:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:138:55:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:140:9:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:140:9:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:142:21:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1182:15:   lemmaSameContentSameSizeSmallerEqOneSameList                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1184:5:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1184:5:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1186:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1186:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1189:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1189:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call head[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1190:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:58:   lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:221:13:    lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:221:32:    lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e2))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:224:9:     lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:7:     lemmaSameIndexThenSameElement                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:14:    lemmaSameIndexThenSameElement                                     precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:226:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:226:14:    lemmaSameIndexThenSameElement                                     precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:227:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:37:    lemmaSameIndexThenSameElement                                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:37:    lemmaSameIndexThenSameElement                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:477:5:     lemmaSamePrefixThenSameSuffix                                     body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:477:5:     lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:47:    lemmaSamePrefixThenSameSuffix                                     precond. (call tail[B](p2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:60:    lemmaSamePrefixThenSameSuffix                                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:60:    lemmaSamePrefixThenSameSuffix                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:480:21:    lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:711:15:    lemmaSubSeqAddSameElmtPreserves                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:712:5:     lemmaSubSeqAddSameElmtPreserves                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:712:5:     lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:713:39:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:714:39:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:714:39:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:717:11:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:717:11:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:719:18:    lemmaSubSeqAddSameElmtPreserves                                   body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:720:11:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:720:11:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:702:17:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:628:44:    lemmaSubseqOfEmptyIsEmpty                                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqRefl                                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:619:15:    lemmaSubseqRefl                                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:620:5:     lemmaSubseqRefl                                                   body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:620:5:     lemmaSubseqRefl                                                   postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:621:28:    lemmaSubseqRefl                                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:622:28:    lemmaSubseqRefl                                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1119:55:   lemmaSubsetContentThenForallContains                              non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTailIsSubseqOfBiggerList                                     precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTailIsSubseqOfBiggerList                                     precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:29:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:664:6:     lemmaTailIsSubseqOfBiggerList                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:665:45:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:665:45:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:636:5:     lemmaTailIsSubseqOfList                                           body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:636:5:     lemmaTailIsSubseqOfList                                           postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:637:21:    lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:640:9:     lemmaTailIsSubseqOfList                                           precond. (call subseqTail[B](l, l))                                                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:641:9:     lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:641:16:    lemmaTailIsSubseqOfList                                           body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:643:42:    lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:650:5:     lemmaTailIsSubseqOfListBis                                        body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:650:5:     lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:651:28:    lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:652:28:    lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTwoListsConcatAssociativity                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:333:15:    lemmaTwoListsConcatAssociativity                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:334:5:     lemmaTwoListsConcatAssociativity                                  body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:334:5:     lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:336:9:     lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:338:21:    lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1032:5:    noDuplicateConcatListNotContainedPreserves                        body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1032:5:    noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1034:28:   noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1037:35:   noDuplicateConcatListNotContainedPreserves                        non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForSubseq[B](l,...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1048:5:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1048:5:    noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1050:16:   noDuplicateConcatListNotContainedPreservesBis                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1051:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1051:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1052:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition of lemmaForallNotContainsForSubseq                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1055:21:   noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1057:35:   noDuplicateConcatListNotContainedPreservesBis                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1018:7:    noDuplicateConcatNotContainedPreserves                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   precond. (call notContainsAThenTailNotContains[B]((s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1139:15:   notContainsAThenTailNotContains                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1127:15:   notContainsAddNotEqThenNotContains                                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:585:35:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:589:5:     removeDuplicates                                                  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:589:5:     removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:591:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:592:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:593:41:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:36:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:62:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:599:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:600:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:601:41:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:36:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:62:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:604:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:604:46:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:607:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:607:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:614:100:   removeDuplicates                                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:614:108:   removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:582:24:    removeDuplicates$default$3                                        postcondition                                                                                                   trivial              0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:21:24:     removeLast                                                        body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:21:24:     removeLast                                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:22:31:     removeLast                                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:31:     removeLast                                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:40:     removeLast                                                        measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:40:     removeLast                                                        precond. (call removeLast[B]((scrut.t): @DropVCs ))                                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:45:     removeLast                                                        non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:30:5:      reverseList                                                       body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:30:5:      reverseList                                                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:31:28:     reverseList                                                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call subseqForall[B](l, lSub, p) (require 1/2))                                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call subseqForall[B](l, lSub, p) (require 2/2))                                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:152:15:    subseqForall                                                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:153:5:     subseqForall                                                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:153:5:     subseqForall                                                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:155:9:     subseqForall                                                      body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:156:9:     subseqForall                                                      precond. (call subseqContains[B](lSub, l, (scrut.h):...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:157:9:     subseqForall                                                      precond. (call forallContained[B](l, p, (scrut.h): @...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      body assertion: Inlined precondition (1/2) of subseqForall                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      body assertion: Inlined precondition (2/2) of subseqForall                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:160:21:    subseqForall                                                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïü‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ï¢
[  Info  ] ‚ïë total: 982  valid: 982  (950 from cache, 32 trivial) invalid: 0    unknown: 0    time:    0.57                                                                                                                                        ‚ïë
[  Info  ] ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
[  Info  ] Verification pipeline summary:
[  Info  ]   cache, anti-aliasing, imperative elimination, 
[  Info  ]   no-inc:smt-z3:z3, smt-cvc4, smt-z3, batched
[  Info  ] 
[  Info  ] 
[  Info  ] Waiting for source changes... (or press Enter to reload)
[  Info  ] 
[  Info  ] 
^C[  Info  ] 
[Warning ] Interrupted...
[  Info  ] Shutting down executor service.
‚ùØ cp temp_cache.bin .stainless-cache/vccache.bin && stainless-dotty ListUtils.scala --config-file=stainless.conf --watch
[  Info  ] Finished compiling                                       
[  Info  ] Preprocessing finished                                   
[  Info  ] Finished lowering the symbols                            
[  Info  ] Generating VCs for functions: isPrefix$0, removeLast$0, reverseList$0, getSuffix$0, getIndex$0, consecutiveSubseq$0, consecutiveSubseqAtHead$0, isSuffix$0, getPrefix$0, lemmaIsSuffixThenSubseq$0, lemmaIsSuffixThenTailIsSuffix$0, lemmaRemovingHeadOfSuffixThenGetPrefixLonger$0, subseqForall$0, lemmaConsecutiveSubseqThenSubseq$0, lemmaContainsAndNotHdThenTlContains$0, lemmaGetIndexBiggerAndHeadNotEqThenTailContains$0, lemmaSameIndexThenSameElement$0, lemmaGetIndexBiggerAndHeadEqThenTailContains$0, lemmaNotHeadSoGetIndexTailIsMinusOne$0, lemmaIsPrefixRefl$0, lemmaConcatTwoListThenFirstIsPrefix$0, lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref$0, lemmaConcatAssociativity$0, lemmaTwoListsConcatAssociativity$0, lemmaChangeCutStillConcatTotal$0, lemmaRemoveLastConcatenatedPrefixStillPrefix$0, lemmaRemoveLastPrefixStillPrefix$0, lemmaPrefixStaysPrefixWhenAddingToSuffix$0, lemmaRemoveLastPrefixDecreasesSize$0, lemmaIsPrefixSameLengthThenSameList$0, lemmaRemoveLastFromBothSidePreservesEq$0, lemmaRemoveLastFromLMakesItPrefix$0, lemmaSamePrefixThenSameSuffix$0, lemmaIsPrefixThenSmallerEqSize$0, lemmaAddHeadSuffixToPrefixStillPrefix$0, lemmaGetSuffixOnListWithItSelfIsEmpty$0, lemmaMoveElementToOtherListKeepsConcatEq$0, lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther$0, concatWithoutDuplicates$0, removeDuplicates$0, removeDuplicates$default$3$0, lemmaSubseqRefl$0, lemmaSubseqOfEmptyIsEmpty$0, lemmaTailIsSubseqOfList$0, lemmaTailIsSubseqOfListBis$0, lemmaTailIsSubseqOfBiggerList$0, lemmaSubSeqTransitive$0, lemmaSubSeqAddSameElmtPreserves$0, lemmaConcatThenFirstSubseqOfTot$0, lemmaConcatThenSecondSubseqOfTot$0, lemmaConcatTwoListsWhichNotContainThenTotNotContain$0, lemmaForallContainsThenInOtherList$0, lemmaForallThenDisjunction2$0, lemmaForallThenDisjunction1$0, lemmaForallContainsThenForEqualLists$0, lemmaForallContainsAndNoDuplicateThenSmallerList$0, lemmaForallContainsAddingInSndListPreserves$0, lemmaForallContainsAddingElmtInPreserves$0, lemmaForallContainsConcatPreserves$0, lemmaForallContainsPreservedRemoveElmt$0, lemmaForallContainsPreservedRemoveElmtInRefList$0, lemmaForallContainsPreservedIfSameContent$0, lemmaForallNotContainsForSubseq$0, lemmaForallNotContainsForConcat$0, lemmaForallNotContainsForConcat$1, lemmaForallNotContainsCannotContain$0, lemmaNoDuplicateConcatThenForallNotContains$0, lemmaForallNotContainsPreservedAddNewElmtInRefList$0, lemmaForallNotContainsNilRefList$0, lemmaForallNotContainedNoDupThenConcatNoDup$0, lemmaRemoveElmtContainedSizeSmaller$0, lemmaRemoveOneElmtNoDuplicateSizeMinusOne$0, noDuplicateConcatNotContainedPreserves$0, noDuplicateConcatListNotContainedPreserves$0, noDuplicateConcatListNotContainedPreservesBis$0, lemmaNoDuplicatePreservedSameContent$0, lemmaRemoveOneElmtNotContainedSameList$0, lemmaRemoveOneElmtPreservesNoDuplicate$0, lemmaSubsetContentThenForallContains$0, notContainsAddNotEqThenNotContains$0, notContainsAThenTailNotContains$0, lemmaListContainsThenFilterContainsNotEmpty$0,[  Info  ] Finished generating VCs
[  Info  ] Starting verification...
[  Info  ] Verified: 0 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates$default$3 @582:24...
[ Debug  ] Cache miss: 'postcondition' VC for removeDuplicates$default$3 @582:24...
[  Info  ] Verified: 1 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 2 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 3 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAddingElmtInPreserves @875:23...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAddingElmtInPreserves @875:23...
[  Info  ] Verified: 4 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 5 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 6 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAddingElmtInPreserves @?:?...
[  Info  ] Verified: 7 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @871:9...
[  Info  ] Verified: 8 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @872:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @872:21...
[  Info  ] Verified: 9 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[  Info  ] Verified: 10 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingElmtInPreserves @869:5...
[  Info  ] Verified: 11 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:13...
[  Info  ] Verified: 12 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:31...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @195:31...
[  Info  ] Verified: 13 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 14 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 15 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 16 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 17 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 18 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 19 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 20 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 21 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 22 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 23 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 24 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 25 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 26 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[  Info  ] Verified: 27 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[  Info  ] Verified: 28 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @202:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @202:16...
[  Info  ] Verified: 29 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:12...
[  Info  ] Verified: 30 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @214:15...
[  Info  ] Verified: 31 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 32 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 33 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 34 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @200:9...
[  Info  ] Verified: 35 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[  Info  ] Verified: 36 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @204:9...
[  Info  ] Verified: 37 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[  Info  ] Verified: 38 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @205:9...
[  Info  ] Verified: 39 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[  Info  ] Verified: 40 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @206:9...
[  Info  ] Verified: 41 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 42 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 43 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @208:9...
[  Info  ] Verified: 44 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @?:?...
[  Info  ] Verified: 45 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @210:21...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @210:21...
[  Info  ] Verified: 46 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @198:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @198:5...
[  Info  ] Verified: 47 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetIndexBiggerAndHeadNotEqThenTailContains @212:5...
[  Info  ] Verified: 48 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @251:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @251:13...
[  Info  ] Verified: 49 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[  Info  ] Verified: 50 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](tail[B](l)))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[ Debug  ] Cache hit: 'precond. (call head[B](tail[B](l)))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @254:9...
[  Info  ] Verified: 51 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:44...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:44...
[  Info  ] Verified: 52 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 53 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 54 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[  Info  ] Verified: 55 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 56 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[  Info  ] Verified: 57 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:15...
[  Info  ] Verified: 58 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 59 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](tail[B](l), e))' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:33...
[  Info  ] Verified: 60 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @257:42...
[  Info  ] Verified: 61 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 62 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 63 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @?:?...
[  Info  ] Verified: 64 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @255:7...
[  Info  ] Verified: 65 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @256:6...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNotHeadSoGetIndexTailIsMinusOne @256:6...
[  Info  ] Verified: 66 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAddingInSndListPre...)' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAddingInSndListPre...)' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[  Info  ] Verified: 67 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAddingInSndListPreserves @856:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAddingInSndListPreserves @856:15...
[  Info  ] Verified: 68 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[  Info  ] Verified: 69 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAddingInSndListPreserves @?:?...
[  Info  ] Verified: 70 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @852:9...
[  Info  ] Verified: 71 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @853:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @853:21...
[  Info  ] Verified: 72 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[  Info  ] Verified: 73 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAddingInSndListPreserves @850:5...
[  Info  ] Verified: 74 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)' VC for subseqForall @?:?...
[  Info  ] Verified: 75 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqContains[B](lSub, l, (scrut.h):...)' VC for subseqForall @156:9...
[ Debug  ] Cache hit: 'precond. (call subseqContains[B](lSub, l, (scrut.h):...)' VC for subseqForall @156:9...
[  Info  ] Verified: 76 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContained[B](l, p, (scrut.h): @...)' VC for subseqForall @157:9...
[ Debug  ] Cache hit: 'precond. (call forallContained[B](l, p, (scrut.h): @...)' VC for subseqForall @157:9...
[  Info  ] Verified: 77 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqForall[B](l, lSub, p) (require 1/2))' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call subseqForall[B](l, lSub, p) (require 1/2))' VC for subseqForall @?:?...
[  Info  ] Verified: 78 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqForall[B](l, lSub, p) (require 2/2))' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'precond. (call subseqForall[B](l, lSub, p) (require 2/2))' VC for subseqForall @?:?...
[  Info  ] Verified: 79 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for subseqForall @152:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for subseqForall @152:15...
[  Info  ] Verified: 80 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList' VC for subseqForall @155:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList' VC for subseqForall @155:9...
[  Info  ] Verified: 81 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of subseqForall' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of subseqForall' VC for subseqForall @158:9...
[  Info  ] Verified: 82 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of subseqForall' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of subseqForall' VC for subseqForall @158:9...
[  Info  ] Verified: 83 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for subseqForall @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for subseqForall @?:?...
[  Info  ] Verified: 84 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @158:9...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @158:9...
[  Info  ] Verified: 85 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @160:21...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @160:21...
[  Info  ] Verified: 86 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for subseqForall @153:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for subseqForall @153:5...
[  Info  ] Verified: 87 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for subseqForall @153:5...
[ Debug  ] Cache hit: 'postcondition' VC for subseqForall @153:5...
[  Info  ] Verified: 88 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @662:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @662:29...
[  Info  ] Verified: 89 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[  Info  ] Verified: 90 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaTailIsSubseqOfBiggerList @?:?...
[  Info  ] Verified: 91 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[  Info  ] Verified: 92 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfBiggerList @665:45...
[  Info  ] Verified: 93 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 94 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 95 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @662:7...
[  Info  ] Verified: 96 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @664:6...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfBiggerList @664:6...
[  Info  ] Verified: 97 / 982
[ Debug  ]  - Checking cache: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 98 / 982
[ Debug  ]  - Checking cache: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call concatWithoutDuplicates[B](baseList, ...)' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 99 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for concatWithoutDuplicates @571:15...
[  Info  ] Verified: 100 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @575:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @575:9...
[  Info  ] Verified: 101 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 102 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @575:9...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @575:9...
[  Info  ] Verified: 103 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @577:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of concatWithoutDuplicates' VC for concatWithoutDuplicates @577:9...
[  Info  ] Verified: 104 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for concatWithoutDuplicates @?:?...
[  Info  ] Verified: 105 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @577:9...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @577:9...
[  Info  ] Verified: 106 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @580:51...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @580:51...
[  Info  ] Verified: 107 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for concatWithoutDuplicates @573:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for concatWithoutDuplicates @573:5...
[  Info  ] Verified: 108 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for concatWithoutDuplicates @573:5...
[ Debug  ] Cache hit: 'postcondition' VC for concatWithoutDuplicates @573:5...
[  Info  ] Verified: 109 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:70...
[  Info  ] Verified: 110 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[  Info  ] Verified: 111 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[  Info  ] Verified: 112 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 113 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 114 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 115 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 116 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 117 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 118 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 1/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 119 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, p) (require 2/2))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 120 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[ Debug  ] Cache hit: 'precond. (call head[B](getSuffix[B](l, p)))' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:34...
[  Info  ] Verified: 121 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaAddHeadSuffixToPrefixStillPrefix @508:57...
[  Info  ] Verified: 122 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[  Info  ] Verified: 123 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[  Info  ] Verified: 124 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaAddHeadSuffixToPrefixStillPrefix @?:?...
[  Info  ] Verified: 125 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @505:28...
[  Info  ] Verified: 126 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @506:28...
[  Info  ] Verified: 127 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[  Info  ] Verified: 128 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaAddHeadSuffixToPrefixStillPrefix @504:5...
[  Info  ] Verified: 129 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 130 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 131 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsConcatPreserves @890:16...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsConcatPreserves @890:16...
[  Info  ] Verified: 132 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @885:21...
[  Info  ] Verified: 133 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 134 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 135 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsConcatPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsConcatPreserves @?:?...
[  Info  ] Verified: 136 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @887:9...
[  Info  ] Verified: 137 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsConcatPreserves @884:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsConcatPreserves @884:5...
[  Info  ] Verified: 138 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsConcatPreserves @884:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsConcatPreserves @884:5...
[  Info  ] Verified: 139 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatNotContainedPreserves @1018:7...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatNotContainedPreserves @1018:7...
[  Info  ] Verified: 140 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 141 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 142 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaListNotContainsThenFilterContainsEmpty @1167:15...
[  Info  ] Verified: 143 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 144 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 145 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaListNotContainsThenFilterContainsEmpty @?:?...
[  Info  ] Verified: 146 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1170:9...
[  Info  ] Verified: 147 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1172:21...
[  Info  ] Verified: 148 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[  Info  ] Verified: 149 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListNotContainsThenFilterContainsEmpty @1168:5...
[  Info  ] Verified: 150 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[ Debug  ] Cache hit: 'precond. (call tail[B](tot))' VC for lemmaConcatAssociativity @321:67...
[  Info  ] Verified: 151 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatAssociativity[B](l1, elmt,...)' VC for lemmaConcatAssociativity @?:?...
[  Info  ] Verified: 152 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaConcatAssociativity @319:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaConcatAssociativity @319:12...
[  Info  ] Verified: 153 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatAssociativity @324:15...
[  Info  ] Verified: 154 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConcatAssociativity' VC for lemmaConcatAssociativity @321:28...
[  Info  ] Verified: 155 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatAssociativity @?:?...
[  Info  ] Verified: 156 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @321:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @321:28...
[  Info  ] Verified: 157 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @322:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @322:28...
[  Info  ] Verified: 158 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaConcatAssociativity @320:5...
[  Info  ] Verified: 159 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatAssociativity @320:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatAssociativity @320:5...
[  Info  ] Verified: 160 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 161 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 162 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConsecutiveSubseqThenSubseq @167:15...
[  Info  ] Verified: 163 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[  Info  ] Verified: 164 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 165 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @170:9...
[  Info  ] Verified: 166 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[  Info  ] Verified: 167 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConsecutiveSubseqThenSubseq @?:?...
[  Info  ] Verified: 168 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @172:9...
[  Info  ] Verified: 169 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @173:17...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConsecutiveSubseqThenSubseq @173:17...
[  Info  ] Verified: 170 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 171 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 172 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for notContainsAddNotEqThenNotContains @1127:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for notContainsAddNotEqThenNotContains @1127:15...
[  Info  ] Verified: 173 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 174 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 175 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 176 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 177 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAddNotEqThenNotContains @?:?...
[  Info  ] Verified: 178 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[ Debug  ] Cache hit: 'precond. (call tail[B](p2))' VC for lemmaSamePrefixThenSameSuffix @479:47...
[  Info  ] Verified: 179 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaSamePrefixThenSameSuffix @479:60...
[  Info  ] Verified: 180 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 181 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 182 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 183 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 184 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 185 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSamePrefixThenSameSuffix @479:60...
[  Info  ] Verified: 186 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 187 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 188 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 189 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 190 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 191 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSamePrefixThenSameSuffix @?:?...
[  Info  ] Verified: 192 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @479:9...
[  Info  ] Verified: 193 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @480:21...
[  Info  ] Verified: 194 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSamePrefixThenSameSuffix @477:5...
[  Info  ] Verified: 195 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @477:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSamePrefixThenSameSuffix @477:5...
[  Info  ] Verified: 196 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 197 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 198 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 199 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainedNoDupThenConcatNoDup @976:62...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainedNoDupThenConcatNoDup @976:62...
[  Info  ] Verified: 200 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 201 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 202 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 203 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainedNoDupThenConcatNoDup @?:?...
[  Info  ] Verified: 204 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainedNoDupThenConcatNoDup @981:15...
[  Info  ] Verified: 205 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @221:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @221:13...
[  Info  ] Verified: 206 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaSameIndexThenSameElement @221:32...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaSameIndexThenSameElement @221:32...
[  Info  ] Verified: 207 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @224:9...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaSameIndexThenSameElement @224:9...
[  Info  ] Verified: 208 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @225:14...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @225:14...
[  Info  ] Verified: 209 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @226:14...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaSameIndexThenSameElement @226:14...
[  Info  ] Verified: 210 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaSameIndexThenSameElement @229:37...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaSameIndexThenSameElement @229:37...
[  Info  ] Verified: 211 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 212 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 213 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 214 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @225:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @225:14...
[  Info  ] Verified: 215 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @226:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @226:14...
[  Info  ] Verified: 216 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameIndexThenSameElement @227:14...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameIndexThenSameElement @227:14...
[  Info  ] Verified: 217 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSameIndexThenSameElement @229:37...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSameIndexThenSameElement @229:37...
[  Info  ] Verified: 218 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameIndexThenSameElement @225:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameIndexThenSameElement @225:7...
[  Info  ] Verified: 219 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 220 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 221 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 222 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSameIndexThenSameElement @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSameIndexThenSameElement @?:?...
[  Info  ] Verified: 223 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameIndexThenSameElement @229:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameIndexThenSameElement @229:7...
[  Info  ] Verified: 224 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixDecreasesSize @409:15...
[  Info  ] Verified: 225 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixDecreasesSize @407:7...
[  Info  ] Verified: 226 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[ Debug  ] Cache hit: 'precond. (call tail[B](tot))' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:65...
[  Info  ] Verified: 227 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaMoveElementToOtherListKeepsConca...)' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[  Info  ] Verified: 228 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaMoveElementToOtherListKeepsConcatEq @539:43...
[  Info  ] Verified: 229 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[  Info  ] Verified: 230 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaMoveElementToOtherListKeepsConcatEq @?:?...
[  Info  ] Verified: 231 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @535:9...
[  Info  ] Verified: 232 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @536:21...
[  Info  ] Verified: 233 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[  Info  ] Verified: 234 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaMoveElementToOtherListKeepsConcatEq @533:5...
[  Info  ] Verified: 235 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @585:35...
[  Info  ] Verified: 236 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 237 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 238 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @593:41...
[  Info  ] Verified: 239 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:36...
[  Info  ] Verified: 240 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @594:62...
[  Info  ] Verified: 241 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 242 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 243 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 244 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 245 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 246 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @596:9...
[  Info  ] Verified: 247 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 248 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 249 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @601:41...
[  Info  ] Verified: 250 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:36...
[  Info  ] Verified: 251 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @602:62...
[  Info  ] Verified: 252 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 253 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 254 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](totList, list))' VC for removeDuplicates @604:46...
[  Info  ] Verified: 255 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for removeDuplicates @?:?...
[  Info  ] Verified: 256 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 257 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 258 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 259 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 260 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 261 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for removeDuplicates @?:?...
[  Info  ] Verified: 262 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 263 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 264 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 265 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))' VC for removeDuplicates @610:9...
[  Info  ] Verified: 266 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for removeDuplicates @614:100...
[ Debug  ] Cache hit: 'non-negative measure' VC for removeDuplicates @614:100...
[  Info  ] Verified: 267 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @591:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @591:9...
[  Info  ] Verified: 268 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @592:9...
[  Info  ] Verified: 269 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[  Info  ] Verified: 270 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @594:9...
[  Info  ] Verified: 271 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'measure decreases' VC for removeDuplicates @596:9...
[  Info  ] Verified: 272 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @596:9...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @596:9...
[  Info  ] Verified: 273 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @599:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for removeDuplicates @599:9...
[  Info  ] Verified: 274 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for removeDuplicates @600:9...
[  Info  ] Verified: 275 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[  Info  ] Verified: 276 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for removeDuplicates @602:9...
[  Info  ] Verified: 277 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for removeDuplicates @604:9...
[  Info  ] Verified: 278 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[  Info  ] Verified: 279 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList' VC for removeDuplicates @607:9...
[  Info  ] Verified: 280 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 281 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 282 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 283 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for removeDuplicates @608:9...
[  Info  ] Verified: 284 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'measure decreases' VC for removeDuplicates @610:9...
[  Info  ] Verified: 285 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @610:9...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @610:9...
[  Info  ] Verified: 286 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @614:108...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @614:108...
[  Info  ] Verified: 287 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for removeDuplicates @589:5...
[  Info  ] Verified: 288 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeDuplicates @589:5...
[ Debug  ] Cache hit: 'postcondition' VC for removeDuplicates @589:5...
[  Info  ] Verified: 289 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsNilRefList @972:51...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsNilRefList @972:51...
[  Info  ] Verified: 290 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 291 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 292 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 293 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 294 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaForallNotContainsNilRefList @972:71...
[  Info  ] Verified: 295 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 296 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 297 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 298 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 299 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 300 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 301 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 302 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 303 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 304 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 305 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 306 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 307 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 308 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 309 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 310 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 311 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 312 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 313 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @676:9...
[  Info  ] Verified: 314 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 315 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 316 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 317 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @682:15...
[  Info  ] Verified: 318 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 319 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 320 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 321 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @684:15...
[  Info  ] Verified: 322 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 323 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 324 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 325 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @687:13...
[  Info  ] Verified: 326 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 327 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 328 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 329 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @692:15...
[  Info  ] Verified: 330 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 331 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 332 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 333 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @694:15...
[  Info  ] Verified: 334 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 335 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 336 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqTransitive @?:?...
[  Info  ] Verified: 337 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @697:13...
[  Info  ] Verified: 338 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqTransitive @702:17...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqTransitive @702:17...
[  Info  ] Verified: 339 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 340 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 341 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForSubseq[B](l,...)' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 342 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 343 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 344 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 345 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 346 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[ Debug  ] Cache hit: 'body assertion' VC for noDuplicateConcatListNotContainedPreservesBis @1050:16...
[  Info  ] Verified: 347 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreservesBis @1057:35...
[ Debug  ] Cache hit: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreservesBis @1057:35...
[  Info  ] Verified: 348 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[  Info  ] Verified: 349 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat' VC for noDuplicateConcatListNotContainedPreservesBis @1051:9...
[  Info  ] Verified: 350 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallNotContainsForSubseq' VC for noDuplicateConcatListNotContainedPreservesBis @1052:9...
[  Info  ] Verified: 351 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 352 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 353 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 354 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 355 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for noDuplicateConcatListNotContainedPreservesBis @?:?...
[  Info  ] Verified: 356 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1053:9...
[  Info  ] Verified: 357 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1055:21...
[  Info  ] Verified: 358 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[  Info  ] Verified: 359 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreservesBis @1048:5...
[  Info  ] Verified: 360 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForSubseq[B]((s...)' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 361 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForSubseq @926:50...
[  Info  ] Verified: 362 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 363 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 364 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 365 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 366 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForSubseq @?:?...
[  Info  ] Verified: 367 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 368 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 369 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @964:69...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @964:69...
[  Info  ] Verified: 370 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 371 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 372 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 373 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 374 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsPreservedAddNewElmtInRefList @?:?...
[  Info  ] Verified: 375 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 376 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 377 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @763:17...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @763:17...
[  Info  ] Verified: 378 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[  Info  ] Verified: 379 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @758:39...
[  Info  ] Verified: 380 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 381 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 382 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @?:?...
[  Info  ] Verified: 383 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @760:9...
[  Info  ] Verified: 384 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @761:21...
[  Info  ] Verified: 385 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[  Info  ] Verified: 386 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListsWhichNotContainThenTotNotContain @757:5...
[  Info  ] Verified: 387 / 982
[ Debug  ]  - Checking cache: 'precond. (call notContainsAThenTailNotContains[B]((s...)' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call notContainsAThenTailNotContains[B]((s...)' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 388 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 389 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 390 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for notContainsAThenTailNotContains @1144:29...
[  Info  ] Verified: 391 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for notContainsAThenTailNotContains @1139:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for notContainsAThenTailNotContains @1139:15...
[  Info  ] Verified: 392 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 393 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 394 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 395 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 396 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for notContainsAThenTailNotContains @?:?...
[  Info  ] Verified: 397 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContained[B](l1, (b: B) => cont...)' VC for lemmaForallContainsPreservedIfSameContent @918:9...
[ Debug  ] Cache hit: 'precond. (call forallContained[B](l1, (b: B) => cont...)' VC for lemmaForallContainsPreservedIfSameContent @918:9...
[  Info  ] Verified: 398 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 399 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 400 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedIfSameContent @922:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedIfSameContent @922:15...
[  Info  ] Verified: 401 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @916:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @916:21...
[  Info  ] Verified: 402 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 403 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 404 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedIfSameContent @?:?...
[  Info  ] Verified: 405 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @919:9...
[  Info  ] Verified: 406 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[  Info  ] Verified: 407 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedIfSameContent @915:5...
[  Info  ] Verified: 408 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](s1))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @556:11...
[  Info  ] Verified: 409 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[  Info  ] Verified: 410 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 411 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 412 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 413 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @558:11...
[  Info  ] Verified: 414 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 415 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 416 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 417 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @?:?...
[  Info  ] Verified: 418 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @555:9...
[  Info  ] Verified: 419 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @560:18...
[  Info  ] Verified: 420 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[  Info  ] Verified: 421 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther @553:5...
[  Info  ] Verified: 422 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicateConcatThenForallNotCo...)' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 423 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNoDuplicateConcatThenForallNotContains @957:62...
[  Info  ] Verified: 424 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 425 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 426 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 427 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 428 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicateConcatThenForallNotContains @?:?...
[  Info  ] Verified: 429 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @443:74...
[  Info  ] Verified: 430 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[  Info  ] Verified: 431 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[  Info  ] Verified: 432 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 433 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 434 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 435 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 436 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](s))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:20...
[  Info  ] Verified: 437 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromBothSidePreservesEq @446:37...
[  Info  ] Verified: 438 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastFromBothSidePreservesEq @446:48...
[  Info  ] Verified: 439 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 440 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 441 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastFromBothSidePreservesEq @?:?...
[  Info  ] Verified: 442 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @443:28...
[  Info  ] Verified: 443 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @444:28...
[  Info  ] Verified: 444 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[  Info  ] Verified: 445 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromBothSidePreservesEq @442:5...
[  Info  ] Verified: 446 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[  Info  ] Verified: 447 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 448 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 449 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[  Info  ] Verified: 450 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @122:33...
[  Info  ] Verified: 451 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[  Info  ] Verified: 452 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaIsSuffixThenTailIsSuffix @123:33...
[  Info  ] Verified: 453 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @124:27...
[  Info  ] Verified: 454 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 455 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaIsSuffixThenTailIsSuffix @130:42...
[  Info  ] Verified: 456 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @117:16...
[  Info  ] Verified: 457 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @119:18...
[  Info  ] Verified: 458 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @122:18...
[  Info  ] Verified: 459 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @123:18...
[  Info  ] Verified: 460 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaIsSuffixThenTailIsSuffix @124:18...
[  Info  ] Verified: 461 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsSuffixThenTailIsSuffix @113:15...
[  Info  ] Verified: 462 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[  Info  ] Verified: 463 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsSuffixThenTailIsSuffix @?:?...
[  Info  ] Verified: 464 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @115:59...
[  Info  ] Verified: 465 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @119:11...
[  Info  ] Verified: 466 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @122:11...
[  Info  ] Verified: 467 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[  Info  ] Verified: 468 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenTailIsSuffix @114:5...
[  Info  ] Verified: 469 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 470 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 471 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 472 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSubSeqAddSameElmtPreserves @719:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSubSeqAddSameElmtPreserves @719:18...
[  Info  ] Verified: 473 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubSeqAddSameElmtPreserves @711:15...
[  Info  ] Verified: 474 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @713:39...
[  Info  ] Verified: 475 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[  Info  ] Verified: 476 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 477 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @714:39...
[  Info  ] Verified: 478 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[  Info  ] Verified: 479 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 480 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @717:11...
[  Info  ] Verified: 481 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[  Info  ] Verified: 482 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubSeqAddSameElmtPreserves @?:?...
[  Info  ] Verified: 483 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @720:11...
[  Info  ] Verified: 484 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[  Info  ] Verified: 485 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubSeqAddSameElmtPreserves @712:5...
[  Info  ] Verified: 486 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatThenFirstSubseqOfTot @729:15...
[  Info  ] Verified: 487 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatThenFirstSubseqOfTot @?:?...
[  Info  ] Verified: 488 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @731:28...
[  Info  ] Verified: 489 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @732:28...
[  Info  ] Verified: 490 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[  Info  ] Verified: 491 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenFirstSubseqOfTot @730:5...
[  Info  ] Verified: 492 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 493 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 494 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForConcat @941:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForConcat @941:50...
[  Info  ] Verified: 495 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 496 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 497 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 498 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 499 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 500 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 501 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 502 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaListContainsThenFilterContainsNotEmpty @1151:15...
[  Info  ] Verified: 503 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 504 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 505 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaListContainsThenFilterContainsNotEmpty @?:?...
[  Info  ] Verified: 506 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1155:11...
[  Info  ] Verified: 507 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1156:10...
[  Info  ] Verified: 508 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[  Info  ] Verified: 509 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1158:21...
[  Info  ] Verified: 510 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[  Info  ] Verified: 511 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaListContainsThenFilterContainsNotEmpty @1152:5...
[  Info  ] Verified: 512 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatThenSecondSubseqOfTot @739:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatThenSecondSubseqOfTot @739:15...
[  Info  ] Verified: 513 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatThenSecondSubseqOfTot @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatThenSecondSubseqOfTot @?:?...
[  Info  ] Verified: 514 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @741:28...
[  Info  ] Verified: 515 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @742:28...
[  Info  ] Verified: 516 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[  Info  ] Verified: 517 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatThenSecondSubseqOfTot @740:5...
[  Info  ] Verified: 518 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 519 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 520 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsCannotContain @949:54...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsCannotContain @949:54...
[  Info  ] Verified: 521 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 522 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 523 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 524 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 525 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsCannotContain @?:?...
[  Info  ] Verified: 526 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @382:65...
[  Info  ] Verified: 527 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 528 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 529 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 530 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 531 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 532 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastPrefixStillPrefix @386:27...
[  Info  ] Verified: 533 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastPrefixStillPrefix @386:38...
[  Info  ] Verified: 534 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 535 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 536 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 537 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastPrefixStillPrefix @?:?...
[  Info  ] Verified: 538 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @382:28...
[  Info  ] Verified: 539 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @383:28...
[  Info  ] Verified: 540 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[  Info  ] Verified: 541 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastPrefixStillPrefix @381:5...
[  Info  ] Verified: 542 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 543 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 544 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 545 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @777:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @777:39...
[  Info  ] Verified: 546 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 547 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 548 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsThenInOtherList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsThenInOtherList @?:?...
[  Info  ] Verified: 549 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @778:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @778:39...
[  Info  ] Verified: 550 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @779:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @779:39...
[  Info  ] Verified: 551 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 552 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenInOtherList @776:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenInOtherList @776:5...
[  Info  ] Verified: 553 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[ Debug  ] Cache hit: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:47...
[  Info  ] Verified: 554 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:57...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @353:57...
[  Info  ] Verified: 555 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[ Debug  ] Cache hit: 'precond. (call head[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:27...
[  Info  ] Verified: 556 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaChangeCutStillConcatTotal @355:40...
[  Info  ] Verified: 557 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaChangeCutStillConcatTotal @353:5...
[  Info  ] Verified: 558 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaTwoListsConcatAssociativity @333:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaTwoListsConcatAssociativity @333:15...
[  Info  ] Verified: 559 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaTwoListsConcatAssociativity @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaTwoListsConcatAssociativity @?:?...
[  Info  ] Verified: 560 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTwoListsConcatAssociativity @336:9...
[  Info  ] Verified: 561 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTwoListsConcatAssociativity @338:21...
[  Info  ] Verified: 562 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTwoListsConcatAssociativity @334:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTwoListsConcatAssociativity @334:5...
[  Info  ] Verified: 563 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTwoListsConcatAssociativity @334:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTwoListsConcatAssociativity @334:5...
[  Info  ] Verified: 564 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for reverseList @30:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for reverseList @30:5...
[  Info  ] Verified: 565 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for reverseList @31:28...
[ Debug  ] Cache hit: 'measure decreases' VC for reverseList @31:28...
[  Info  ] Verified: 566 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for reverseList @30:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for reverseList @30:5...
[  Info  ] Verified: 567 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._1))' VC for lemmaIsPrefixThenSmallerEqSize @493:57...
[  Info  ] Verified: 568 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._2))' VC for lemmaIsPrefixThenSmallerEqSize @493:66...
[  Info  ] Verified: 569 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[  Info  ] Verified: 570 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixThenSmallerEqSize @495:25...
[  Info  ] Verified: 571 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @491:26...
[  Info  ] Verified: 572 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @492:26...
[  Info  ] Verified: 573 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[  Info  ] Verified: 574 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixThenSmallerEqSize @?:?...
[  Info  ] Verified: 575 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixThenSmallerEqSize @493:26...
[  Info  ] Verified: 576 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] Cache hit: 'precond. (call head[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[  Info  ] Verified: 577 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:58...
[  Info  ] Verified: 578 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 579 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 580 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 581 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:16...
[  Info  ] Verified: 582 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1189:16...
[  Info  ] Verified: 583 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1190:16...
[  Info  ] Verified: 584 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1182:15...
[  Info  ] Verified: 585 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1186:9...
[  Info  ] Verified: 586 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 587 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 588 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 589 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSameContentSameSizeSmallerEqOneSameList @?:?...
[  Info  ] Verified: 590 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1191:9...
[  Info  ] Verified: 591 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[  Info  ] Verified: 592 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSameContentSameSizeSmallerEqOneSameList @1184:5...
[  Info  ] Verified: 593 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 594 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 595 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubseqOfEmptyIsEmpty @628:44...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubseqOfEmptyIsEmpty @628:44...
[  Info  ] Verified: 596 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 597 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 598 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 599 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 600 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqOfEmptyIsEmpty @?:?...
[  Info  ] Verified: 601 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 602 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 603 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 604 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 605 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 606 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 607 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 608 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 609 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 610 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 611 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 612 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 613 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 614 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaNoDuplicatePreservedSameContent @?:?...
[  Info  ] Verified: 615 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 616 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 617 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 618 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1067:12...
[  Info  ] Verified: 619 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1068:12...
[  Info  ] Verified: 620 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1072:16...
[  Info  ] Verified: 621 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1077:16...
[  Info  ] Verified: 622 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1079:16...
[  Info  ] Verified: 623 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1081:16...
[  Info  ] Verified: 624 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1082:16...
[  Info  ] Verified: 625 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1083:16...
[  Info  ] Verified: 626 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1084:16...
[  Info  ] Verified: 627 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1089:16...
[  Info  ] Verified: 628 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1092:18...
[  Info  ] Verified: 629 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1093:18...
[  Info  ] Verified: 630 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaNoDuplicatePreservedSameContent @1094:18...
[  Info  ] Verified: 631 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaNoDuplicatePreservedSameContent @1101:37...
[  Info  ] Verified: 632 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1065:5...
[  Info  ] Verified: 633 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaSubsetContentThenForallContains' VC for lemmaNoDuplicatePreservedSameContent @1066:5...
[  Info  ] Verified: 634 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 635 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate' VC for lemmaNoDuplicatePreservedSameContent @1074:9...
[  Info  ] Verified: 636 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[  Info  ] Verified: 637 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaNoDuplicatePreservedSameContent @1075:9...
[  Info  ] Verified: 638 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt' VC for lemmaNoDuplicatePreservedSameContent @1078:9...
[  Info  ] Verified: 639 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[  Info  ] Verified: 640 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1080:9...
[  Info  ] Verified: 641 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[  Info  ] Verified: 642 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[  Info  ] Verified: 643 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList' VC for lemmaNoDuplicatePreservedSameContent @1086:9...
[  Info  ] Verified: 644 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1087:9...
[  Info  ] Verified: 645 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[  Info  ] Verified: 646 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaNoDuplicatePreservedSameContent @1088:9...
[  Info  ] Verified: 647 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaNoDuplicatePreservedSameContent @1091:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaNoDuplicatePreservedSameContent @1091:11...
[  Info  ] Verified: 648 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaNoDuplicatePreservedSameContent @1095:11...
[  Info  ] Verified: 649 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaNoDuplicatePreservedSameContent @1098:9...
[  Info  ] Verified: 650 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 651 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaNoDuplicatePreservedSameContent @1069:5...
[  Info  ] Verified: 652 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaNoDuplicatePreservedSameContent @1101:15...
[  Info  ] Verified: 653 / 982
[ Debug  ]  - Checking cache: 'precond. (call forallContainsSubset[B](lIn, l))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @822:9...
[ Debug  ] Cache hit: 'precond. (call forallContainsSubset[B](lIn, l))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @822:9...
[  Info  ] Verified: 654 / 982
[ Debug  ]  - Checking cache: 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[ Debug  ] Cache hit: 'precond. (call subsetContains[B]((scrut.t): @DropVCs...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @827:9...
[  Info  ] Verified: 655 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 656 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 657 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 658 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @823:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @823:16...
[  Info  ] Verified: 659 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @824:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @824:16...
[  Info  ] Verified: 660 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @826:16...
[  Info  ] Verified: 661 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @829:16...
[  Info  ] Verified: 662 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @830:16...
[  Info  ] Verified: 663 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @831:16...
[  Info  ] Verified: 664 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @832:16...
[  Info  ] Verified: 665 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:16...
[  Info  ] Verified: 666 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @817:15...
[  Info  ] Verified: 667 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[  Info  ] Verified: 668 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @828:9...
[  Info  ] Verified: 669 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @?:?...
[  Info  ] Verified: 670 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @833:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @833:9...
[  Info  ] Verified: 671 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @834:9...
[  Info  ] Verified: 672 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @836:21...
[  Info  ] Verified: 673 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[  Info  ] Verified: 674 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsAndNoDuplicateThenSmallerList @819:5...
[  Info  ] Verified: 675 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 676 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 677 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 678 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmtInRefList @901:66...
[  Info  ] Verified: 679 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 680 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 681 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 682 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 683 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmtInRefList @?:?...
[  Info  ] Verified: 684 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaSubsetContentThenForallContains[...)' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 685 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubsetContentThenForallContains @1119:55...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubsetContentThenForallContains @1119:55...
[  Info  ] Verified: 686 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 687 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 688 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 689 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 690 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubsetContentThenForallContains @?:?...
[  Info  ] Verified: 691 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 692 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 693 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaRemoveElmtContainedSizeSmaller @991:16...
[  Info  ] Verified: 694 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveElmtContainedSizeSmaller @999:30...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveElmtContainedSizeSmaller @999:30...
[  Info  ] Verified: 695 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[  Info  ] Verified: 696 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 697 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @993:11...
[  Info  ] Verified: 698 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @994:10...
[  Info  ] Verified: 699 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[  Info  ] Verified: 700 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveElmtContainedSizeSmaller @?:?...
[  Info  ] Verified: 701 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @996:28...
[  Info  ] Verified: 702 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of check' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of check' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[  Info  ] Verified: 703 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @997:28...
[  Info  ] Verified: 704 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[  Info  ] Verified: 705 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveElmtContainedSizeSmaller @989:5...
[  Info  ] Verified: 706 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 707 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 708 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 709 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1014:44...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1014:44...
[  Info  ] Verified: 710 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1009:39...
[  Info  ] Verified: 711 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[  Info  ] Verified: 712 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1010:39...
[  Info  ] Verified: 713 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 714 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 715 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @?:?...
[  Info  ] Verified: 716 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1011:39...
[  Info  ] Verified: 717 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[  Info  ] Verified: 718 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNoDuplicateSizeMinusOne @1008:5...
[  Info  ] Verified: 719 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtNotContainedSameLis...)' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 720 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtNotContainedSameList @1105:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtNotContainedSameList @1105:57...
[  Info  ] Verified: 721 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 722 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 723 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 724 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 725 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtNotContainedSameList @?:?...
[  Info  ] Verified: 726 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 727 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1112:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1112:57...
[  Info  ] Verified: 728 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 729 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 730 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 731 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveOneElmtPreservesNoDuplicate @?:?...
[  Info  ] Verified: 732 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveOneElmtPreservesNoDuplicate @1115:15...
[  Info  ] Verified: 733 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaContainsAndNotHdThenTlContains @182:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaContainsAndNotHdThenTlContains @182:13...
[  Info  ] Verified: 734 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaContainsAndNotHdThenTlContains @184:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaContainsAndNotHdThenTlContains @184:15...
[  Info  ] Verified: 735 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaContainsAndNotHdThenTlContains @180:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaContainsAndNotHdThenTlContains @180:7...
[  Info  ] Verified: 736 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 737 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 738 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[ Debug  ] Cache miss: 'precond. (call tail[B](l))' VC for lemmaTailIsSubseqOfListBis @654:45...
[  Info  ] Verified: 739 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @651:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfListBis @651:28...
[  Info  ] Verified: 740 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @652:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfListBis @652:28...
[  Info  ] Verified: 741 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfListBis @650:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfListBis @650:5...
[  Info  ] Verified: 742 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfListBis @650:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfListBis @650:5...
[  Info  ] Verified: 743 / 982
[ Debug  ]  - Checking cache: 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[ Debug  ] Cache hit: 'precond. (call subseqTail[B](l, l))' VC for lemmaTailIsSubseqOfList @640:9...
[  Info  ] Verified: 744 / 982
[ Debug  ]  - Checking cache: 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[ Debug  ] Cache hit: 'body assertion' VC for lemmaTailIsSubseqOfList @641:16...
[  Info  ] Verified: 745 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @637:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @637:21...
[  Info  ] Verified: 746 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @641:9...
[  Info  ] Verified: 747 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaTailIsSubseqOfList @643:42...
[  Info  ] Verified: 748 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfList @636:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaTailIsSubseqOfList @636:5...
[  Info  ] Verified: 749 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaTailIsSubseqOfList @636:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaTailIsSubseqOfList @636:5...
[  Info  ] Verified: 750 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for consecutiveSubseq @61:49...
[ Debug  ] Cache hit: 'non-negative measure' VC for consecutiveSubseq @61:49...
[  Info  ] Verified: 751 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for consecutiveSubseq @60:46...
[ Debug  ] Cache hit: 'measure decreases' VC for consecutiveSubseq @60:46...
[  Info  ] Verified: 752 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for consecutiveSubseq @58:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for consecutiveSubseq @58:5...
[  Info  ] Verified: 753 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for consecutiveSubseqAtHead @67:6...
[ Debug  ] Cache hit: 'non-negative measure' VC for consecutiveSubseqAtHead @67:6...
[  Info  ] Verified: 754 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for consecutiveSubseqAtHead @70:9...
[ Debug  ] Cache hit: 'measure decreases' VC for consecutiveSubseqAtHead @70:9...
[  Info  ] Verified: 755 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:54...
[  Info  ] Verified: 756 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[  Info  ] Verified: 757 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @403:27...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @403:27...
[  Info  ] Verified: 758 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[  Info  ] Verified: 759 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @?:?...
[  Info  ] Verified: 760 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @400:9...
[  Info  ] Verified: 761 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @401:21...
[  Info  ] Verified: 762 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[  Info  ] Verified: 763 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaPrefixStaysPrefixWhenAddingToSuffix @398:5...
[  Info  ] Verified: 764 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallThenDisjunction2[B]((scrut...)' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallThenDisjunction2[B]((scrut...)' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 765 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallThenDisjunction2 @785:46...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallThenDisjunction2 @785:46...
[  Info  ] Verified: 766 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 767 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 768 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 769 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 770 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction2 @?:?...
[  Info  ] Verified: 771 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @242:13...
[ Debug  ] Cache hit: 'precond. (call head[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @242:13...
[  Info  ] Verified: 772 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:13...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e1))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:13...
[  Info  ] Verified: 773 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:31...
[ Debug  ] Cache hit: 'precond. (call getIndex[B](l, e2))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @243:31...
[  Info  ] Verified: 774 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @245:15...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @245:15...
[  Info  ] Verified: 775 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @235:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetIndexBiggerAndHeadEqThenTailContains @235:7...
[  Info  ] Verified: 776 / 982
[ Debug  ]  - Checking cache: 'precond. (call getIndex[B]((scrut.t): @DropVCs , e))' VC for getIndex @51:43...
[ Debug  ] Cache hit: 'precond. (call getIndex[B]((scrut.t): @DropVCs , e))' VC for getIndex @51:43...
[  Info  ] Verified: 777 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'non-negative measure' VC for getIndex @49:5...
[  Info  ] Verified: 778 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @50:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @50:39...
[  Info  ] Verified: 779 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getIndex @51:43...
[ Debug  ] Cache hit: 'measure decreases' VC for getIndex @51:43...
[  Info  ] Verified: 780 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @51:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @51:39...
[  Info  ] Verified: 781 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @52:39...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @52:39...
[  Info  ] Verified: 782 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getIndex @49:5...
[  Info  ] Verified: 783 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getIndex @49:5...
[ Debug  ] Cache hit: 'postcondition' VC for getIndex @49:5...
[  Info  ] Verified: 784 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))' VC for lemmaIsSuffixThenSubseq @?:?...
[  Info  ] Verified: 785 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsSuffixThenSubseq @99:15...
[  Info  ] Verified: 786 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsSuffixThenSubseq' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsSuffixThenSubseq' VC for lemmaIsSuffixThenSubseq @101:56...
[  Info  ] Verified: 787 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsSuffixThenSubseq @?:?...
[  Info  ] Verified: 788 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenSubseq @101:56...
[  Info  ] Verified: 789 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenSubseq @102:56...
[  Info  ] Verified: 790 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsSuffixThenSubseq @103:56...
[  Info  ] Verified: 791 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 792 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 793 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallNotContainsForConcat @933:50...
[  Info  ] Verified: 794 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 795 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 796 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 797 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 798 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallNotContainsForConcat @?:?...
[  Info  ] Verified: 799 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 800 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 801 / 982
[ Debug  ]  - Checking cache: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 802 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreserves @1037:35...
[ Debug  ] Cache hit: 'non-negative measure' VC for noDuplicateConcatListNotContainedPreserves @1037:35...
[  Info  ] Verified: 803 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 804 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 805 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 806 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for noDuplicateConcatListNotContainedPreserves @?:?...
[  Info  ] Verified: 807 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1033:28...
[  Info  ] Verified: 808 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1034:28...
[  Info  ] Verified: 809 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[  Info  ] Verified: 810 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[ Debug  ] Cache hit: 'postcondition' VC for noDuplicateConcatListNotContainedPreserves @1032:5...
[  Info  ] Verified: 811 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[ Debug  ] Cache hit: 'precond. (call tail[B](tot))' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:64...
[  Info  ] Verified: 812 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemoveLastConcatenatedPrefixStil...)' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[  Info  ] Verified: 813 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @371:24...
[  Info  ] Verified: 814 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[  Info  ] Verified: 815 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @?:?...
[  Info  ] Verified: 816 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @368:9...
[  Info  ] Verified: 817 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @369:21...
[  Info  ] Verified: 818 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[  Info  ] Verified: 819 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastConcatenatedPrefixStillPrefix @366:5...
[  Info  ] Verified: 820 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallContainsPreservedRemoveElm...)' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 821 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmt @894:57...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallContainsPreservedRemoveElmt @894:57...
[  Info  ] Verified: 822 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 823 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 824 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 825 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 826 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsPreservedRemoveElmt @?:?...
[  Info  ] Verified: 827 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaSubseqRefl @619:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaSubseqRefl @619:15...
[  Info  ] Verified: 828 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @621:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqRefl @621:28...
[  Info  ] Verified: 829 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaSubseqRefl @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaSubseqRefl @?:?...
[  Info  ] Verified: 830 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @622:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaSubseqRefl @622:28...
[  Info  ] Verified: 831 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaSubseqRefl @620:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaSubseqRefl @620:5...
[  Info  ] Verified: 832 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaSubseqRefl @620:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaSubseqRefl @620:5...
[  Info  ] Verified: 833 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 834 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[  Info  ] Verified: 835 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache hit: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 836 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[ Debug  ] Cache miss: 'precond. (call removeLast[B](l))' VC for lemmaRemoveLastFromLMakesItPrefix @459:24...
[  Info  ] Verified: 837 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemoveLastFromLMakesItPrefix @459:39...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemoveLastFromLMakesItPrefix @459:39...
[  Info  ] Verified: 838 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @455:31...
[  Info  ] Verified: 839 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[  Info  ] Verified: 840 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemoveLastFromLMakesItPrefix @?:?...
[  Info  ] Verified: 841 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @456:31...
[  Info  ] Verified: 842 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[  Info  ] Verified: 843 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemoveLastFromLMakesItPrefix @454:5...
[  Info  ] Verified: 844 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 845 / 982
[ Debug  ]  - Checking cache: 'precond. (call removeLast[B]((scrut.t): @DropVCs ))' VC for removeLast @23:40...
[ Debug  ] Cache hit: 'precond. (call removeLast[B]((scrut.t): @DropVCs ))' VC for removeLast @23:40...
[  Info  ] Verified: 846 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache hit: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 847 / 982
[ Debug  ]  - Checking cache: 'precond. (call last[B](l))' VC for removeLast @26:34...
[ Debug  ] Cache miss: 'precond. (call last[B](l))' VC for removeLast @26:34...
[  Info  ] Verified: 848 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for removeLast @26:45...
[ Debug  ] Cache hit: 'non-negative measure' VC for removeLast @26:45...
[  Info  ] Verified: 849 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @22:31...
[ Debug  ] Cache hit: 'postcondition' VC for removeLast @22:31...
[  Info  ] Verified: 850 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for removeLast @23:40...
[ Debug  ] Cache hit: 'measure decreases' VC for removeLast @23:40...
[  Info  ] Verified: 851 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @23:31...
[ Debug  ] Cache hit: 'postcondition' VC for removeLast @23:31...
[  Info  ] Verified: 852 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for removeLast @21:24...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for removeLast @21:24...
[  Info  ] Verified: 853 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for removeLast @21:24...
[ Debug  ] Cache hit: 'postcondition' VC for removeLast @21:24...
[  Info  ] Verified: 854 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaForallThenDisjunction1[B]((scrut...)' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaForallThenDisjunction1[B]((scrut...)' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 855 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaForallThenDisjunction1 @791:46...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaForallThenDisjunction1 @791:46...
[  Info  ] Verified: 856 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 857 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 858 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 859 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 860 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallThenDisjunction1 @?:?...
[  Info  ] Verified: 861 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] Cache miss: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[  Info  ] Verified: 862 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 863 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 864 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 865 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 866 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 1/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 867 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](l, l) (require 2/2))' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:15...
[  Info  ] Verified: 868 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:28...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @520:28...
[  Info  ] Verified: 869 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @514:5...
[ Debug  ] Cache miss: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @514:5...
[  Info  ] Verified: 870 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @?:?...
[  Info  ] Verified: 871 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @517:28...
[  Info  ] Verified: 872 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @518:28...
[  Info  ] Verified: 873 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[  Info  ] Verified: 874 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaGetSuffixOnListWithItSelfIsEmpty @516:5...
[  Info  ] Verified: 875 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l2))' VC for lemmaIsPrefixRefl @265:50...
[ Debug  ] Cache hit: 'precond. (call tail[B](l2))' VC for lemmaIsPrefixRefl @265:50...
[  Info  ] Verified: 876 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixRefl[B](l1, l2))' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 877 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 878 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaIsPrefixRefl' VC for lemmaIsPrefixRefl @265:28...
[  Info  ] Verified: 879 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixRefl @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixRefl @?:?...
[  Info  ] Verified: 880 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixRefl @265:28...
[  Info  ] Verified: 881 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixRefl @266:28...
[  Info  ] Verified: 882 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixRefl @264:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixRefl @264:5...
[  Info  ] Verified: 883 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixRefl @264:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaIsPrefixRefl @264:5...
[  Info  ] Verified: 884 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for getSuffix @41:38...
[  Info  ] Verified: 885 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))' VC for getSuffix @41:28...
[  Info  ] Verified: 886 / 982
[ Debug  ]  - Checking cache: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))' VC for getSuffix @41:28...
[  Info  ] Verified: 887 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getSuffix @44:34...
[ Debug  ] Cache hit: 'non-negative measure' VC for getSuffix @44:34...
[  Info  ] Verified: 888 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'measure decreases' VC for getSuffix @41:28...
[  Info  ] Verified: 889 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @41:28...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @41:28...
[  Info  ] Verified: 890 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @44:34...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @44:34...
[  Info  ] Verified: 891 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getSuffix @40:5...
[  Info  ] Verified: 892 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getSuffix @40:5...
[ Debug  ] Cache hit: 'postcondition' VC for getSuffix @40:5...
[  Info  ] Verified: 893 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](p2))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @301:11...
[  Info  ] Verified: 894 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[  Info  ] Verified: 895 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 896 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 897 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 898 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 899 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache hit: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[  Info  ] Verified: 900 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache hit: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[  Info  ] Verified: 901 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[ Debug  ] Cache hit: 'precond. (call head[B](s1))' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @306:27...
[  Info  ] Verified: 902 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @302:11...
[  Info  ] Verified: 903 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 904 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 905 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 906 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 907 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @?:?...
[  Info  ] Verified: 908 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @298:9...
[  Info  ] Verified: 909 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @304:21...
[  Info  ] Verified: 910 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[  Info  ] Verified: 911 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref @296:5...
[  Info  ] Verified: 912 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaConcatTwoListThenFirstIsPrefix @278:28...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaConcatTwoListThenFirstIsPrefix @278:28...
[  Info  ] Verified: 913 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaConcatTwoListThenFirstIsPrefix @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaConcatTwoListThenFirstIsPrefix @?:?...
[  Info  ] Verified: 914 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @275:28...
[  Info  ] Verified: 915 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @276:28...
[  Info  ] Verified: 916 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[ Debug  ] Cache miss: 'body assertion: match exhaustiveness' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[  Info  ] Verified: 917 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[ Debug  ] Cache miss: 'postcondition' VC for lemmaConcatTwoListThenFirstIsPrefix @274:5...
[  Info  ] Verified: 918 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[ Debug  ] Cache hit: 'precond. (call tail[B](p2))' VC for lemmaIsPrefixSameLengthThenSameList @425:49...
[  Info  ] Verified: 919 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] Cache hit: 'precond. (call tail[B](l))' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[  Info  ] Verified: 920 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 921 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 922 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 923 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaIsPrefixSameLengthThenSameList @425:58...
[  Info  ] Verified: 924 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 925 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 926 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 927 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaIsPrefixSameLengthThenSameList @?:?...
[  Info  ] Verified: 928 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @425:9...
[  Info  ] Verified: 929 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @426:21...
[  Info  ] Verified: 930 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[  Info  ] Verified: 931 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaIsPrefixSameLengthThenSameList @423:5...
[  Info  ] Verified: 932 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](scrut._1))' VC for isPrefix @14:13...
[ Debug  ] Cache hit: 'precond. (call head[B](scrut._1))' VC for isPrefix @14:13...
[  Info  ] Verified: 933 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](scrut._2))' VC for isPrefix @14:24...
[ Debug  ] Cache hit: 'precond. (call head[B](scrut._2))' VC for isPrefix @14:24...
[  Info  ] Verified: 934 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._1))' VC for isPrefix @14:42...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._1))' VC for isPrefix @14:42...
[  Info  ] Verified: 935 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](scrut._2))' VC for isPrefix @14:51...
[ Debug  ] Cache hit: 'precond. (call tail[B](scrut._2))' VC for isPrefix @14:51...
[  Info  ] Verified: 936 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for isPrefix @9:7...
[ Debug  ] Cache hit: 'non-negative measure' VC for isPrefix @9:7...
[  Info  ] Verified: 937 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 938 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 939 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 940 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 941 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for isPrefix @14:33...
[ Debug  ] Cache hit: 'measure decreases' VC for isPrefix @14:33...
[  Info  ] Verified: 942 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 943 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 944 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:31...
[ Debug  ] Cache hit: 'postcondition' VC for isPrefix @16:31...
[  Info  ] Verified: 945 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for isPrefix @16:58...
[ Debug  ] Cache miss: 'postcondition' VC for isPrefix @16:58...
[  Info  ] Verified: 946 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaForallContainsThenForEqualLists @797:7...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaForallContainsThenForEqualLists @797:7...
[  Info  ] Verified: 947 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 948 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 949 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 950 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 951 / 982
[ Debug  ]  - Checking cache: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] Cache hit: 'precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[  Info  ] Verified: 952 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 953 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 954 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 955 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 956 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 957 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 958 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 959 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 960 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:33...
[  Info  ] Verified: 961 / 982
[ Debug  ]  - Checking cache: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[ Debug  ] Cache hit: 'precond. (call head[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:62...
[  Info  ] Verified: 962 / 982
[ Debug  ]  - Checking cache: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[ Debug  ] Cache hit: 'precond. (call tail[B](suffix))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:91...
[  Info  ] Verified: 963 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B](l, tail[B](suffix)))' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @145:78...
[  Info  ] Verified: 964 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @135:15...
[  Info  ] Verified: 965 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @138:55...
[  Info  ] Verified: 966 / 982
[ Debug  ]  - Checking cache: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] Cache hit: 'body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[  Info  ] Verified: 967 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[ Debug  ] Cache hit: 'measure decreases' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @?:?...
[  Info  ] Verified: 968 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @140:9...
[  Info  ] Verified: 969 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @142:21...
[  Info  ] Verified: 970 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[  Info  ] Verified: 971 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[ Debug  ] Cache hit: 'postcondition' VC for lemmaRemovingHeadOfSuffixThenGetPrefixLonger @137:5...
[  Info  ] Verified: 972 / 982
[ Debug  ]  - Checking cache: 'precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)' VC for getPrefix @90:64...
[ Debug  ] Cache hit: 'precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)' VC for getPrefix @90:64...
[  Info  ] Verified: 973 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for getPrefix @87:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for getPrefix @87:15...
[  Info  ] Verified: 974 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @89:55...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @89:55...
[  Info  ] Verified: 975 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for getPrefix @90:64...
[ Debug  ] Cache hit: 'measure decreases' VC for getPrefix @90:64...
[  Info  ] Verified: 976 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @90:55...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @90:55...
[  Info  ] Verified: 977 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @91:55...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @91:55...
[  Info  ] Verified: 978 / 982
[ Debug  ]  - Checking cache: 'body assertion: match exhaustiveness' VC for getPrefix @88:5...
[ Debug  ] Cache hit: 'body assertion: match exhaustiveness' VC for getPrefix @88:5...
[  Info  ] Verified: 979 / 982
[ Debug  ]  - Checking cache: 'postcondition' VC for getPrefix @88:5...
[ Debug  ] Cache hit: 'postcondition' VC for getPrefix @88:5...
[  Info  ] Verified: 980 / 982
[ Debug  ]  - Checking cache: 'non-negative measure' VC for isSuffix @76:15...
[ Debug  ] Cache hit: 'non-negative measure' VC for isSuffix @76:15...
[  Info  ] Verified: 981 / 982
[ Debug  ]  - Checking cache: 'measure decreases' VC for isSuffix @78:62...
[ Debug  ] Cache hit: 'measure decreases' VC for isSuffix @78:62...
[  Info  ] Verified: 982 / 982
[  Info  ] Done in 47.82s
[  Info  ]   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
[  Info  ] ‚ïî‚ïê‚ï° stainless summary ‚ïû‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
[  Info  ] ‚ïë ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                                                                                                                                                                                                 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           precond. (call concatWithoutDuplicates[B](baseList, ...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            concatWithoutDuplicates                                           precond. (call concatWithoutDuplicates[B](baseList, ...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:571:15:    concatWithoutDuplicates                                           non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:573:5:     concatWithoutDuplicates                                           body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:573:5:     concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:575:9:     concatWithoutDuplicates                                           body assertion: Inlined precondition of concatWithoutDuplicates                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:575:9:     concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:577:9:     concatWithoutDuplicates                                           body assertion: Inlined precondition of concatWithoutDuplicates                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:577:9:     concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:580:51:    concatWithoutDuplicates                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:58:5:      consecutiveSubseq                                                 body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:60:46:     consecutiveSubseq                                                 measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:61:49:     consecutiveSubseq                                                 non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:67:6:      consecutiveSubseqAtHead                                           non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:70:9:      consecutiveSubseqAtHead                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:49:5:      getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:50:39:     getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:39:     getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:43:     getIndex                                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:51:43:     getIndex                                                          precond. (call getIndex[B]((scrut.t): @DropVCs , e))                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:52:39:     getIndex                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:87:15:     getPrefix                                                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:88:5:      getPrefix                                                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:88:5:      getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:89:55:     getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:55:     getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:64:     getPrefix                                                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:90:64:     getPrefix                                                         precond. (call getPrefix[B]((scrut.t): @DropVCs , su...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:91:55:     getPrefix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:40:5:      getSuffix                                                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:40:5:      getSuffix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:28:     getSuffix                                                         precond. (call getSuffix[B](tail[B](l), (scrut.t): @... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:41:38:     getSuffix                                                         precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:44:34:     getSuffix                                                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:44:34:     getSuffix                                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:9:7:       isPrefix                                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:13:     isPrefix                                                          precond. (call head[B](scrut._1))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:24:     isPrefix                                                          precond. (call head[B](scrut._2))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:33:     isPrefix                                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:42:     isPrefix                                                          precond. (call tail[B](scrut._1))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:14:51:     isPrefix                                                          precond. (call tail[B](scrut._2))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:31:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:16:58:     isPrefix                                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:76:15:     isSuffix                                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:78:62:     isSuffix                                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call lemmaAddHeadSuffixToPrefixStillPrefix... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:504:5:     lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:504:5:     lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: Inlined precondition (1/2) of lemmaAddHeadSuffixToPrefixStillPrefix                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             body assertion: Inlined precondition (2/2) of lemmaAddHeadSuffixToPrefixStillPrefix                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:505:70:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:506:28:    lemmaAddHeadSuffixToPrefixStillPrefix                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call getSuffix[B](l, p) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:34:    lemmaAddHeadSuffixToPrefixStillPrefix                             precond. (call head[B](getSuffix[B](l, p)))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:508:57:    lemmaAddHeadSuffixToPrefixStillPrefix                             non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:5:     lemmaChangeCutStillConcatTotal                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:47:    lemmaChangeCutStillConcatTotal                                    precond. (call head[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:353:57:    lemmaChangeCutStillConcatTotal                                    precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:355:27:    lemmaChangeCutStillConcatTotal                                    precond. (call head[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:355:40:    lemmaChangeCutStillConcatTotal                                    precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatAssociativity                                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatAssociativity                                          precond. (call lemmaConcatAssociativity[B](l1, elmt,...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:319:12:    lemmaConcatAssociativity                                          body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:320:5:     lemmaConcatAssociativity                                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:320:5:     lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:28:    lemmaConcatAssociativity                                          body assertion: Inlined precondition of lemmaConcatAssociativity                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:28:    lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:321:67:    lemmaConcatAssociativity                                          precond. (call tail[B](tot))                                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:322:28:    lemmaConcatAssociativity                                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:324:15:    lemmaConcatAssociativity                                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatThenFirstSubseqOfTot                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:729:15:    lemmaConcatThenFirstSubseqOfTot                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:730:5:     lemmaConcatThenFirstSubseqOfTot                                   body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:730:5:     lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:731:28:    lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:732:28:    lemmaConcatThenFirstSubseqOfTot                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatThenSecondSubseqOfTot                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:739:15:    lemmaConcatThenSecondSubseqOfTot                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:740:5:     lemmaConcatThenSecondSubseqOfTot                                  body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:740:5:     lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:741:28:    lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:742:28:    lemmaConcatThenSecondSubseqOfTot                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListThenFirstIsPrefix                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:274:5:     lemmaConcatTwoListThenFirstIsPrefix                               body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:274:5:     lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:275:28:    lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:276:28:    lemmaConcatTwoListThenFirstIsPrefix                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:278:28:    lemmaConcatTwoListThenFirstIsPrefix                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConcatTwoListsWhichNotContainThenTotNotContain               precond. (call lemmaConcatTwoListsWhichNotContainThe... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:757:5:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:757:5:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:758:39:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:758:39:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition (1/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               body assertion: Inlined precondition (2/2) of lemmaConcatTwoListsWhichNotContainThenTotNotContain               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:760:9:     lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:761:21:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:763:17:    lemmaConcatTwoListsWhichNotContainThenTotNotContain               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaConsecutiveSubseqThenSubseq                                  precond. (call lemmaConsecutiveSubseqThenSubseq[B](l...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:167:15:    lemmaConsecutiveSubseqThenSubseq                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:170:9:     lemmaConsecutiveSubseqThenSubseq                                  body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:170:9:     lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:172:9:     lemmaConsecutiveSubseqThenSubseq                                  body assertion: Inlined precondition of lemmaConsecutiveSubseqThenSubseq                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:172:9:     lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:173:17:    lemmaConsecutiveSubseqThenSubseq                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:180:7:     lemmaContainsAndNotHdThenTlContains                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:182:13:    lemmaContainsAndNotHdThenTlContains                               precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:184:15:    lemmaContainsAndNotHdThenTlContains                               precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          precond. (call lemmaForallContainsAddingElmtInPreser... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingElmtInPreserves                          precond. (call lemmaForallContainsAddingElmtInPreser... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:869:5:     lemmaForallContainsAddingElmtInPreserves                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:869:5:     lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          body assertion: Inlined precondition (1/2) of lemmaForallContainsAddingElmtInPreserves                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          body assertion: Inlined precondition (2/2) of lemmaForallContainsAddingElmtInPreserves                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:871:9:     lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:872:21:    lemmaForallContainsAddingElmtInPreserves                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:875:23:    lemmaForallContainsAddingElmtInPreserves                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingInSndListPreserves                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAddingInSndListPreserves                       precond. (call lemmaForallContainsAddingInSndListPre...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:850:5:     lemmaForallContainsAddingInSndListPreserves                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:850:5:     lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:852:9:     lemmaForallContainsAddingInSndListPreserves                       body assertion: Inlined precondition of lemmaForallContainsAddingInSndListPreserves                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:852:9:     lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:853:21:    lemmaForallContainsAddingInSndListPreserves                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:856:15:    lemmaForallContainsAddingInSndListPreserves                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:817:15:    lemmaForallContainsAndNoDuplicateThenSmallerList                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:819:5:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:819:5:     lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:822:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call forallContainsSubset[B](lIn, l))                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:823:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:824:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:826:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:827:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  precond. (call subsetContains[B]((scrut.t): @DropVCs...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:828:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:828:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:829:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:830:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:831:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:832:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:833:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:834:9:     lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:834:16:    lemmaForallContainsAndNoDuplicateThenSmallerList                  body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:836:21:    lemmaForallContainsAndNoDuplicateThenSmallerList                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                precond. (call lemmaForallContainsConcatPreserves[B]... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsConcatPreserves                                precond. (call lemmaForallContainsConcatPreserves[B]... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:884:5:     lemmaForallContainsConcatPreserves                                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:884:5:     lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:885:21:    lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                body assertion: Inlined precondition (1/2) of lemmaForallContainsConcatPreserves                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                body assertion: Inlined precondition (2/2) of lemmaForallContainsConcatPreserves                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:887:9:     lemmaForallContainsConcatPreserves                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:890:16:    lemmaForallContainsConcatPreserves                                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         precond. (call lemmaForallContainsPreservedIfSameCon... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedIfSameContent                         precond. (call lemmaForallContainsPreservedIfSameCon... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:915:5:     lemmaForallContainsPreservedIfSameContent                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:915:5:     lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:916:21:    lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:918:9:     lemmaForallContainsPreservedIfSameContent                         precond. (call forallContained[B](l1, (b: B) => cont...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         body assertion: Inlined precondition (1/2) of lemmaForallContainsPreservedIfSameContent                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         body assertion: Inlined precondition (2/2) of lemmaForallContainsPreservedIfSameContent                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:919:9:     lemmaForallContainsPreservedIfSameContent                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:922:15:    lemmaForallContainsPreservedIfSameContent                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmt                            precond. (call lemmaForallContainsPreservedRemoveElm...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:894:57:    lemmaForallContainsPreservedRemoveElmt                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsPreservedRemoveElmtInRefList                   precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:901:66:    lemmaForallContainsPreservedRemoveElmtInRefList                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:797:7:     lemmaForallContainsThenForEqualLists                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                precond. (call lemmaForallContainsThenInOtherList[B]... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallContainsThenInOtherList                                precond. (call lemmaForallContainsThenInOtherList[B]... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:776:5:     lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:777:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                body assertion: Inlined precondition (1/2) of lemmaForallContainsThenInOtherList                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                body assertion: Inlined precondition (2/2) of lemmaForallContainsThenInOtherList                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:778:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:779:39:    lemmaForallContainsThenInOtherList                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainedNoDupThenConcatNoDup                       precond. (call lemmaForallNotContainedNoDupThenConca... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:976:62:    lemmaForallNotContainedNoDupThenConcatNoDup                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:981:15:    lemmaForallNotContainedNoDupThenConcatNoDup                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               precond. (call lemmaForallNotContainsCannotContain[B... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsCannotContain                               precond. (call lemmaForallNotContainsCannotContain[B... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:949:54:    lemmaForallNotContainsCannotContain                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:933:50:    lemmaForallNotContainsForConcat                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForConcat                                   precond. (call lemmaForallNotContainsForConcat[B]((s... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:941:50:    lemmaForallNotContainsForConcat                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsForSubseq                                   precond. (call lemmaForallNotContainsForSubseq[B]((s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:926:50:    lemmaForallNotContainsForSubseq                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:51:    lemmaForallNotContainsNilRefList                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:972:71:    lemmaForallNotContainsNilRefList                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallNotContainsPreservedAddNewElmtInRefList                precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:964:69:    lemmaForallNotContainsPreservedAddNewElmtInRefList                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction1                                       precond. (call lemmaForallThenDisjunction1[B]((scrut...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:791:46:    lemmaForallThenDisjunction1                                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaForallThenDisjunction2                                       precond. (call lemmaForallThenDisjunction2[B]((scrut...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:785:46:    lemmaForallThenDisjunction2                                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:235:7:     lemmaGetIndexBiggerAndHeadEqThenTailContains                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:242:13:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:243:13:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:243:31:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call getIndex[B](l, e2))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:245:15:    lemmaGetIndexBiggerAndHeadEqThenTailContains                      precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaContainsAndNotHdThenTlContains[B... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadEqThenTailC... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaGetIndexBiggerAndHeadNotEqThenTa... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:195:13:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:195:31:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call getIndex[B](l, e2))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:198:5:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (3/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:200:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (4/4) of lemmaGetIndexBiggerAndHeadEqThenTailContains                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:202:16:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:204:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaContainsAndNotHdThenTlContains                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:204:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaContainsAndNotHdThenTlContains                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:205:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:205:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:206:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:206:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (1/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (2/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:208:9:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition (3/3) of lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:210:21:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:5:     lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:12:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:212:12:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:214:15:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:214:15:    lemmaGetIndexBiggerAndHeadNotEqThenTailContains                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetSuffixOnListWithItSelfIsEmpty                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call lemmaIsPrefixRefl[B](l1, l2))                                                                    trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:514:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             body assertion: Inlined precondition of lemmaIsPrefixRefl                                                       trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:516:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:516:5:     lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:517:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:518:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 1/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:15:    lemmaGetSuffixOnListWithItSelfIsEmpty                             precond. (call getSuffix[B](l, l) (require 2/2))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:520:28:    lemmaGetSuffixOnListWithItSelfIsEmpty                             non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixRefl                                                 precond. (call lemmaIsPrefixRefl[B](l1, l2))                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:264:5:     lemmaIsPrefixRefl                                                 body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:264:5:     lemmaIsPrefixRefl                                                 postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:28:    lemmaIsPrefixRefl                                                 body assertion: Inlined precondition of lemmaIsPrefixRefl                                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:28:    lemmaIsPrefixRefl                                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:265:50:    lemmaIsPrefixRefl                                                 precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:266:28:    lemmaIsPrefixRefl                                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixSameLengthThenSameList                               precond. (call lemmaIsPrefixSameLengthThenSameList[B... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:423:5:     lemmaIsPrefixSameLengthThenSameList                               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:423:5:     lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (1/3) of lemmaIsPrefixSameLengthThenSameList                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (2/3) of lemmaIsPrefixSameLengthThenSameList                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               body assertion: Inlined precondition (3/3) of lemmaIsPrefixSameLengthThenSameList                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:9:     lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:49:    lemmaIsPrefixSameLengthThenSameList                               precond. (call tail[B](p2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:58:    lemmaIsPrefixSameLengthThenSameList                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:425:58:    lemmaIsPrefixSameLengthThenSameList                               precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:426:21:    lemmaIsPrefixSameLengthThenSameList                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixThenSmallerEqSize                                    measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsPrefixThenSmallerEqSize                                    precond. (call lemmaIsPrefixThenSmallerEqSize[B](p, l))                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:491:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:492:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:26:    lemmaIsPrefixThenSmallerEqSize                                    body assertion: Inlined precondition of lemmaIsPrefixThenSmallerEqSize                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:26:    lemmaIsPrefixThenSmallerEqSize                                    postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:57:    lemmaIsPrefixThenSmallerEqSize                                    precond. (call tail[B](scrut._1))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:493:66:    lemmaIsPrefixThenSmallerEqSize                                    precond. (call tail[B](scrut._2))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:495:25:    lemmaIsPrefixThenSmallerEqSize                                    non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenSubseq                                           measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenSubseq                                           precond. (call lemmaIsSuffixThenSubseq[B](l1, l2))                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:99:15:     lemmaIsSuffixThenSubseq                                           non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:101:56:    lemmaIsSuffixThenSubseq                                           body assertion: Inlined precondition of lemmaIsSuffixThenSubseq                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:101:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:102:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:103:56:    lemmaIsSuffixThenSubseq                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenTailIsSuffix                                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaIsSuffixThenTailIsSuffix                                     precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:113:15:    lemmaIsSuffixThenTailIsSuffix                                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:114:5:     lemmaIsSuffixThenTailIsSuffix                                     body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:114:5:     lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:115:59:    lemmaIsSuffixThenTailIsSuffix                                     body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:115:59:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:117:16:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:119:11:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:119:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:11:    lemmaIsSuffixThenTailIsSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:18:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:122:33:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:18:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:123:33:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:124:18:    lemmaIsSuffixThenTailIsSuffix                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:124:27:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:130:42:    lemmaIsSuffixThenTailIsSuffix                                     precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       precond. (call lemmaListContainsThenFilterContainsNo... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListContainsThenFilterContainsNotEmpty                       precond. (call lemmaListContainsThenFilterContainsNo... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1151:15:   lemmaListContainsThenFilterContainsNotEmpty                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1152:5:    lemmaListContainsThenFilterContainsNotEmpty                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1152:5:    lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition (1/2) of lemmaListContainsThenFilterContainsNotEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition (2/2) of lemmaListContainsThenFilterContainsNotEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1155:11:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1156:10:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1158:21:   lemmaListContainsThenFilterContainsNotEmpty                       body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1158:21:   lemmaListContainsThenFilterContainsNotEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       precond. (call lemmaListNotContainsThenFilterContain... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaListNotContainsThenFilterContainsEmpty                       precond. (call lemmaListNotContainsThenFilterContain... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1167:15:   lemmaListNotContainsThenFilterContainsEmpty                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1168:5:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1168:5:    lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: Inlined precondition (1/2) of lemmaListNotContainsThenFilterContainsEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       body assertion: Inlined precondition (2/2) of lemmaListNotContainsThenFilterContainsEmpty                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1170:9:    lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1172:21:   lemmaListNotContainsThenFilterContainsEmpty                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call lemmaLongerPrefixContainsHeadOfSuffix... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:296:5:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:296:5:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (1/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (2/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (3/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                body assertion: Inlined precondition (4/4) of lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:298:9:     lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:301:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call tail[B](p2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:302:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:302:11:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:304:21:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:306:27:    lemmaLongerPrefixContainsHeadOfSuffixOfSmallerPref                precond. (call head[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaMoveElementToOtherListKeepsConcatEq                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaMoveElementToOtherListKeepsConcatEq                          precond. (call lemmaMoveElementToOtherListKeepsConca...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:533:5:     lemmaMoveElementToOtherListKeepsConcatEq                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:533:5:     lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:9:     lemmaMoveElementToOtherListKeepsConcatEq                          body assertion: Inlined precondition of lemmaMoveElementToOtherListKeepsConcatEq                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:9:     lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:535:65:    lemmaMoveElementToOtherListKeepsConcatEq                          precond. (call tail[B](tot))                                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:536:21:    lemmaMoveElementToOtherListKeepsConcatEq                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:539:43:    lemmaMoveElementToOtherListKeepsConcatEq                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicateConcatThenForallNotContains                       precond. (call lemmaNoDuplicateConcatThenForallNotCo...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:957:62:    lemmaNoDuplicateConcatThenForallNotContains                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsAndNoDuplicateThen... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaForallContainsPreservedRemoveElm...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1065:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaSubsetContentThenForallContains                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1066:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaSubsetContentThenForallContains                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1067:12:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1068:12:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1069:5:    lemmaNoDuplicatePreservedSameContent                              body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1072:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1074:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaRemoveOneElmtPreservesNoDuplicate                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1075:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1075:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1077:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1078:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaForallContainsPreservedRemoveElmt                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1079:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1080:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1080:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1081:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1082:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1083:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1084:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1086:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (3/3) of lemmaForallContainsPreservedRemoveElmtInRefList                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1087:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1088:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (1/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1088:9:    lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition (2/2) of lemmaForallContainsAndNoDuplicateThenSmallerList                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1089:16:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1091:11:   lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1092:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1093:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1094:18:   lemmaNoDuplicatePreservedSameContent                              body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1095:11:   lemmaNoDuplicatePreservedSameContent                              body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1098:9:    lemmaNoDuplicatePreservedSameContent                              precond. (call lemmaNoDuplicatePreservedSameContent[... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:15:   lemmaNoDuplicatePreservedSameContent                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1101:37:   lemmaNoDuplicatePreservedSameContent                              non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call lemmaNotHeadSoGetIndexTailIsMinusOne[... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:251:13:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:254:9:     lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call head[B](tail[B](l)))                                                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:254:9:     lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              body assertion: Inlined precondition (1/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              body assertion: Inlined precondition (2/2) of lemmaNotHeadSoGetIndexTailIsMinusOne                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:7:     lemmaNotHeadSoGetIndexTailIsMinusOne                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:255:44:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:256:6:     lemmaNotHeadSoGetIndexTailIsMinusOne                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:15:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](l, e))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:15:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](l, e))                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:33:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](tail[B](l), e))                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:33:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call getIndex[B](tail[B](l), e))                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:257:42:    lemmaNotHeadSoGetIndexTailIsMinusOne                              precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call lemmaPrefixFromSameListAndStrictlySma... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:553:5:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:553:5:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (1/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (2/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  body assertion: Inlined precondition (3/3) of lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:555:9:     lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:556:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call tail[B](s1))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:558:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:558:11:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:560:18:    lemmaPrefixFromSameListAndStrictlySmallerThenPrefixFromEachOther  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixStaysPrefixWhenAddingToSuffix                          measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaPrefixStaysPrefixWhenAddingToSuffix                          precond. (call lemmaPrefixStaysPrefixWhenAddingToSuf...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:398:5:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:398:5:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:9:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          body assertion: Inlined precondition of lemmaPrefixStaysPrefixWhenAddingToSuffix                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:9:     lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:400:54:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:401:21:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:403:27:    lemmaPrefixStaysPrefixWhenAddingToSuffix                          non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveElmtContainedSizeSmaller                               precond. (call lemmaRemoveElmtContainedSizeSmaller[B...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:989:5:     lemmaRemoveElmtContainedSizeSmaller                               body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:989:5:     lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:991:16:    lemmaRemoveElmtContainedSizeSmaller                               body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:993:11:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:993:11:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:994:10:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:996:28:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of lemmaRemoveElmtContainedSizeSmaller                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:996:28:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:997:28:    lemmaRemoveElmtContainedSizeSmaller                               body assertion: Inlined precondition of check                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:997:28:    lemmaRemoveElmtContainedSizeSmaller                               postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:999:30:    lemmaRemoveElmtContainedSizeSmaller                               non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastConcatenatedPrefixStillPrefix                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastConcatenatedPrefixStillPrefix                      precond. (call lemmaRemoveLastConcatenatedPrefixStil...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:366:5:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:366:5:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:9:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      body assertion: Inlined precondition of lemmaRemoveLastConcatenatedPrefixStillPrefix                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:9:     lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:368:64:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      precond. (call tail[B](tot))                                                                                    valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:369:21:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:371:24:    lemmaRemoveLastConcatenatedPrefixStillPrefix                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromBothSidePreservesEq                            precond. (call lemmaRemoveLastFromBothSidePreservesE... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:442:5:     lemmaRemoveLastFromBothSidePreservesEq                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:442:5:     lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            body assertion: Inlined precondition (1/2) of lemmaRemoveLastFromBothSidePreservesEq                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            body assertion: Inlined precondition (2/2) of lemmaRemoveLastFromBothSidePreservesEq                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:28:    lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:443:74:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:444:28:    lemmaRemoveLastFromBothSidePreservesEq                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:20:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](s))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:37:    lemmaRemoveLastFromBothSidePreservesEq                            precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:446:48:    lemmaRemoveLastFromBothSidePreservesEq                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromLMakesItPrefix                                 measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastFromLMakesItPrefix                                 precond. (call lemmaRemoveLastFromLMakesItPrefix[B](l))                                                         trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:454:5:     lemmaRemoveLastFromLMakesItPrefix                                 body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:454:5:     lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:455:31:    lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:456:31:    lemmaRemoveLastFromLMakesItPrefix                                 body assertion: Inlined precondition of lemmaRemoveLastFromLMakesItPrefix                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:456:31:    lemmaRemoveLastFromLMakesItPrefix                                 postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:24:    lemmaRemoveLastFromLMakesItPrefix                                 precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:459:39:    lemmaRemoveLastFromLMakesItPrefix                                 non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:407:7:     lemmaRemoveLastPrefixDecreasesSize                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:409:15:    lemmaRemoveLastPrefixDecreasesSize                                precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveLastPrefixStillPrefix                                  precond. (call lemmaRemoveLastPrefixStillPrefix[B](p... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:381:5:     lemmaRemoveLastPrefixStillPrefix                                  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:381:5:     lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (1/3) of lemmaRemoveLastPrefixStillPrefix                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (2/3) of lemmaRemoveLastPrefixStillPrefix                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  body assertion: Inlined precondition (3/3) of lemmaRemoveLastPrefixStillPrefix                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:28:    lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:382:65:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:383:28:    lemmaRemoveLastPrefixStillPrefix                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:27:    lemmaRemoveLastPrefixStillPrefix                                  precond. (call removeLast[B](l))                                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:386:38:    lemmaRemoveLastPrefixStillPrefix                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNoDuplicateSizeMinu... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         precond. (call lemmaRemoveOneElmtNotContainedSameLis...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1008:5:    lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1008:5:    lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1009:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1010:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition of lemmaRemoveOneElmtNotContainedSameList                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1010:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition (1/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         body assertion: Inlined precondition (2/2) of lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1011:39:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1014:44:   lemmaRemoveOneElmtNoDuplicateSizeMinusOne                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtNotContainedSameList                            precond. (call lemmaRemoveOneElmtNotContainedSameLis...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1105:57:   lemmaRemoveOneElmtNotContainedSameList                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemoveOneElmtPreservesNoDuplicate                            precond. (call lemmaRemoveOneElmtPreservesNoDuplicat...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1112:57:   lemmaRemoveOneElmtPreservesNoDuplicate                            non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1115:15:   lemmaRemoveOneElmtPreservesNoDuplicate                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:135:15:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:137:5:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:137:5:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:138:55:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:140:9:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:140:9:     lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:142:21:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:33:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, suffix))                                                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:62:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call head[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:78:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call getPrefix[B](l, tail[B](suffix)))                                                                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:145:91:    lemmaRemovingHeadOfSuffixThenGetPrefixLonger                      precond. (call tail[B](suffix))                                                                                 valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call lemmaSameContentSameSizeSmallerEqOneS... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1182:15:   lemmaSameContentSameSizeSmallerEqOneSameList                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1184:5:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1184:5:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1186:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1186:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1189:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1189:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call head[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1190:16:   lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (1/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (2/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      body assertion: Inlined precondition (3/3) of lemmaSameContentSameSizeSmallerEqOneSameList                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:9:    lemmaSameContentSameSizeSmallerEqOneSameList                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1191:58:   lemmaSameContentSameSizeSmallerEqOneSameList                      precond. (call tail[B](l2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSameIndexThenSameElement                                     precond. (call lemmaSameIndexThenSameElement[B](l, e... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:221:13:    lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:221:32:    lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e2))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:224:9:     lemmaSameIndexThenSameElement                                     precond. (call getIndex[B](l, e1))                                                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:7:     lemmaSameIndexThenSameElement                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:225:14:    lemmaSameIndexThenSameElement                                     precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:226:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:226:14:    lemmaSameIndexThenSameElement                                     precond. (call head[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:227:14:    lemmaSameIndexThenSameElement                                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (1/3) of lemmaSameIndexThenSameElement                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (2/3) of lemmaSameIndexThenSameElement                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     body assertion: Inlined precondition (3/3) of lemmaSameIndexThenSameElement                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:7:     lemmaSameIndexThenSameElement                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:37:    lemmaSameIndexThenSameElement                                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:229:37:    lemmaSameIndexThenSameElement                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 1/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 2/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 3/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 4/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSamePrefixThenSameSuffix                                     precond. (call lemmaSamePrefixThenSameSuffix[B](p1, ... (require 5/5))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:477:5:     lemmaSamePrefixThenSameSuffix                                     body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:477:5:     lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (1/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (2/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (3/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (4/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     body assertion: Inlined precondition (5/5) of lemmaSamePrefixThenSameSuffix                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:9:     lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:47:    lemmaSamePrefixThenSameSuffix                                     precond. (call tail[B](p2))                                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:60:    lemmaSamePrefixThenSameSuffix                                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:479:60:    lemmaSamePrefixThenSameSuffix                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:480:21:    lemmaSamePrefixThenSameSuffix                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqAddSameElmtPreserves                                   precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:711:15:    lemmaSubSeqAddSameElmtPreserves                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:712:5:     lemmaSubSeqAddSameElmtPreserves                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:712:5:     lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:713:39:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:714:39:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:714:39:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:717:11:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:717:11:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:719:18:    lemmaSubSeqAddSameElmtPreserves                                   body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:720:11:    lemmaSubSeqAddSameElmtPreserves                                   body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:720:11:    lemmaSubSeqAddSameElmtPreserves                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubSeqTransitive                                             precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:676:9:     lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:682:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:684:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:687:13:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:692:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:694:15:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:697:13:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:702:17:    lemmaSubSeqTransitive                                             postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqOfEmptyIsEmpty                                         precond. (call lemmaSubseqOfEmptyIsEmpty[B]((scrut.t... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:628:44:    lemmaSubseqOfEmptyIsEmpty                                         non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubseqRefl                                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:619:15:    lemmaSubseqRefl                                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:620:5:     lemmaSubseqRefl                                                   body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:620:5:     lemmaSubseqRefl                                                   postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:621:28:    lemmaSubseqRefl                                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:622:28:    lemmaSubseqRefl                                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaSubsetContentThenForallContains                              precond. (call lemmaSubsetContentThenForallContains[...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1119:55:   lemmaSubsetContentThenForallContains                              non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTailIsSubseqOfBiggerList                                     precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTailIsSubseqOfBiggerList                                     precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:7:     lemmaTailIsSubseqOfBiggerList                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:662:29:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:664:6:     lemmaTailIsSubseqOfBiggerList                                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:665:45:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:665:45:    lemmaTailIsSubseqOfBiggerList                                     precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:636:5:     lemmaTailIsSubseqOfList                                           body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:636:5:     lemmaTailIsSubseqOfList                                           postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:637:21:    lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:640:9:     lemmaTailIsSubseqOfList                                           precond. (call subseqTail[B](l, l))                                                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:641:9:     lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:641:16:    lemmaTailIsSubseqOfList                                           body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:643:42:    lemmaTailIsSubseqOfList                                           postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:650:5:     lemmaTailIsSubseqOfListBis                                        body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:650:5:     lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:651:28:    lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:652:28:    lemmaTailIsSubseqOfListBis                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:654:45:    lemmaTailIsSubseqOfListBis                                        precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            lemmaTwoListsConcatAssociativity                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:333:15:    lemmaTwoListsConcatAssociativity                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:334:5:     lemmaTwoListsConcatAssociativity                                  body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:334:5:     lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:336:9:     lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:338:21:    lemmaTwoListsConcatAssociativity                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 1/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 2/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreserves                        precond. (call noDuplicateConcatListNotContainedPres... (require 3/3))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1032:5:    noDuplicateConcatListNotContainedPreserves                        body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1032:5:    noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (1/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (2/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        body assertion: Inlined precondition (3/3) of noDuplicateConcatListNotContainedPreserves                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1033:28:   noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1034:28:   noDuplicateConcatListNotContainedPreserves                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1037:35:   noDuplicateConcatListNotContainedPreserves                        non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForConcat[B](l,... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForConcat[B](l,... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call lemmaForallNotContainsForSubseq[B](l,...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            noDuplicateConcatListNotContainedPreservesBis                     precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1048:5:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1048:5:    noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1050:16:   noDuplicateConcatListNotContainedPreservesBis                     body assertion                                                                                                  valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1051:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (1/2) of lemmaForallNotContainsForConcat                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1051:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (2/2) of lemmaForallNotContainsForConcat                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1052:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition of lemmaForallNotContainsForSubseq                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1053:9:    noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1055:21:   noDuplicateConcatListNotContainedPreservesBis                     postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1057:35:   noDuplicateConcatListNotContainedPreservesBis                     non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1018:7:    noDuplicateConcatNotContainedPreserves                            postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAThenTailNotContains                                   precond. (call notContainsAThenTailNotContains[B]((s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1139:15:   notContainsAThenTailNotContains                                   non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1144:29:   notContainsAThenTailNotContains                                   precond. (call tail[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                precond. (call notContainsAddNotEqThenNotContains[B]... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            notContainsAddNotEqThenNotContains                                precond. (call notContainsAddNotEqThenNotContains[B]... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:1127:15:   notContainsAddNotEqThenNotContains                                non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaForallNotContainsPreservedAddNew... (require 1/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaForallNotContainsPreservedAddNew... (require 2/2))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaIsSuffixThenTailIsSuffix[B](l, s...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaRemovingHeadOfSuffixThenGetPrefi...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqAddSameElmtPreserves[B](lS...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 1/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call lemmaSubSeqTransitive[B](l1, l2, l3) (require 2/2))                                              valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            removeDuplicates                                                  precond. (call noDuplicateConcatListNotContainedPres... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:585:35:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:589:5:     removeDuplicates                                                  body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:589:5:     removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:591:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:592:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:593:41:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:36:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:594:62:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:596:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:599:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaIsSuffixThenTailIsSuffix                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:600:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaRemovingHeadOfSuffixThenGetPrefixLonger                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:601:41:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaSubSeqTransitive                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:36:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:602:62:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:604:9:     removeDuplicates                                                  body assertion: Inlined precondition of lemmaSubSeqAddSameElmtPreserves                                         valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:604:46:    removeDuplicates                                                  precond. (call getPrefix[B](totList, list))                                                                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:607:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:607:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/2) of lemmaForallNotContainsPreservedAddNewElmtInRefList                valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (1/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (2/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (3/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:608:9:     removeDuplicates                                                  body assertion: Inlined precondition (4/4) of noDuplicateConcatListNotContainedPreservesBis                     valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 1/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 2/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 3/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:610:9:     removeDuplicates                                                  precond. (call removeDuplicates[B](totList, (scrut.t... (require 4/4))                                          valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:614:100:   removeDuplicates                                                  non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:614:108:   removeDuplicates                                                  postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:582:24:    removeDuplicates$default$3                                        postcondition                                                                                                   trivial              0.1 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:21:24:     removeLast                                                        body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:21:24:     removeLast                                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:22:31:     removeLast                                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:31:     removeLast                                                        postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:40:     removeLast                                                        measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:23:40:     removeLast                                                        precond. (call removeLast[B]((scrut.t): @DropVCs ))                                                             valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:34:     removeLast                                                        precond. (call last[B](l))                                                                                      trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:26:45:     removeLast                                                        non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:30:5:      reverseList                                                       body assertion: match exhaustiveness                                                                            trivial              0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:30:5:      reverseList                                                       non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:31:28:     reverseList                                                       measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      measure decreases                                                                                               valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call lemmaTailIsSubseqOfBiggerList[B](l, l...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call subseqForall[B](l, lSub, p) (require 1/2))                                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë                            subseqForall                                                      precond. (call subseqForall[B](l, lSub, p) (require 2/2))                                                       valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:152:15:    subseqForall                                                      non-negative measure                                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:153:5:     subseqForall                                                      body assertion: match exhaustiveness                                                                            valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:153:5:     subseqForall                                                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:155:9:     subseqForall                                                      body assertion: Inlined precondition of lemmaTailIsSubseqOfBiggerList                                           valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:156:9:     subseqForall                                                      precond. (call subseqContains[B](lSub, l, (scrut.h):...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:157:9:     subseqForall                                                      precond. (call forallContained[B](l, p, (scrut.h): @...)                                                        valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      body assertion: Inlined precondition (1/2) of subseqForall                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      body assertion: Inlined precondition (2/2) of subseqForall                                                      valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:158:9:     subseqForall                                                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïë ListUtils.scala:160:21:    subseqForall                                                      postcondition                                                                                                   valid from cache     0.0 ‚ïë
[  Info  ] ‚ïü‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ï¢
[  Info  ] ‚ïë total: 982  valid: 982  (950 from cache, 32 trivial) invalid: 0    unknown: 0    time:    0.60                                                                                                                                        ‚ïë
[  Info  ] ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
[  Info  ] Verification pipeline summary:
[  Info  ]   cache, anti-aliasing, imperative elimination, 
[  Info  ]   no-inc:smt-z3:z3, smt-cvc4, smt-z3, batched
[  Info  ] 
[  Info  ] 
[  Info  ] Waiting for source changes... (or press Enter to reload)
[  Info  ] 
[  Info  ] 
^C[  Info  ] 
[Warning ] Interrupted...
[  Info  ] Shutting down executor service.
